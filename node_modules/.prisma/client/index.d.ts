
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Vehicle
 * 
 */
export type Vehicle = $Result.DefaultSelection<Prisma.$VehiclePayload>
/**
 * Model VehicleEntry
 * 
 */
export type VehicleEntry = $Result.DefaultSelection<Prisma.$VehicleEntryPayload>
/**
 * Model KeyControl
 * 
 */
export type KeyControl = $Result.DefaultSelection<Prisma.$KeyControlPayload>
/**
 * Model WorkOrder
 * 
 */
export type WorkOrder = $Result.DefaultSelection<Prisma.$WorkOrderPayload>
/**
 * Model WorkOrderStatus
 * 
 */
export type WorkOrderStatus = $Result.DefaultSelection<Prisma.$WorkOrderStatusPayload>
/**
 * Model WorkOrderPhoto
 * 
 */
export type WorkOrderPhoto = $Result.DefaultSelection<Prisma.$WorkOrderPhotoPayload>
/**
 * Model WorkPause
 * 
 */
export type WorkPause = $Result.DefaultSelection<Prisma.$WorkPausePayload>
/**
 * Model SparePart
 * 
 */
export type SparePart = $Result.DefaultSelection<Prisma.$SparePartPayload>
/**
 * Model WorkOrderSparePart
 * 
 */
export type WorkOrderSparePart = $Result.DefaultSelection<Prisma.$WorkOrderSparePartPayload>
/**
 * Model SparePartMovement
 * 
 */
export type SparePartMovement = $Result.DefaultSelection<Prisma.$SparePartMovementPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Workshop
 * 
 */
export type Workshop = $Result.DefaultSelection<Prisma.$WorkshopPayload>
/**
 * Model WorkshopSchedule
 * 
 */
export type WorkshopSchedule = $Result.DefaultSelection<Prisma.$WorkshopSchedulePayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.vehicle`: Exposes CRUD operations for the **Vehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicle.findMany()
    * ```
    */
  get vehicle(): Prisma.VehicleDelegate<ExtArgs>;

  /**
   * `prisma.vehicleEntry`: Exposes CRUD operations for the **VehicleEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VehicleEntries
    * const vehicleEntries = await prisma.vehicleEntry.findMany()
    * ```
    */
  get vehicleEntry(): Prisma.VehicleEntryDelegate<ExtArgs>;

  /**
   * `prisma.keyControl`: Exposes CRUD operations for the **KeyControl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeyControls
    * const keyControls = await prisma.keyControl.findMany()
    * ```
    */
  get keyControl(): Prisma.KeyControlDelegate<ExtArgs>;

  /**
   * `prisma.workOrder`: Exposes CRUD operations for the **WorkOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrders
    * const workOrders = await prisma.workOrder.findMany()
    * ```
    */
  get workOrder(): Prisma.WorkOrderDelegate<ExtArgs>;

  /**
   * `prisma.workOrderStatus`: Exposes CRUD operations for the **WorkOrderStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderStatuses
    * const workOrderStatuses = await prisma.workOrderStatus.findMany()
    * ```
    */
  get workOrderStatus(): Prisma.WorkOrderStatusDelegate<ExtArgs>;

  /**
   * `prisma.workOrderPhoto`: Exposes CRUD operations for the **WorkOrderPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderPhotos
    * const workOrderPhotos = await prisma.workOrderPhoto.findMany()
    * ```
    */
  get workOrderPhoto(): Prisma.WorkOrderPhotoDelegate<ExtArgs>;

  /**
   * `prisma.workPause`: Exposes CRUD operations for the **WorkPause** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkPauses
    * const workPauses = await prisma.workPause.findMany()
    * ```
    */
  get workPause(): Prisma.WorkPauseDelegate<ExtArgs>;

  /**
   * `prisma.sparePart`: Exposes CRUD operations for the **SparePart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpareParts
    * const spareParts = await prisma.sparePart.findMany()
    * ```
    */
  get sparePart(): Prisma.SparePartDelegate<ExtArgs>;

  /**
   * `prisma.workOrderSparePart`: Exposes CRUD operations for the **WorkOrderSparePart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkOrderSpareParts
    * const workOrderSpareParts = await prisma.workOrderSparePart.findMany()
    * ```
    */
  get workOrderSparePart(): Prisma.WorkOrderSparePartDelegate<ExtArgs>;

  /**
   * `prisma.sparePartMovement`: Exposes CRUD operations for the **SparePartMovement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SparePartMovements
    * const sparePartMovements = await prisma.sparePartMovement.findMany()
    * ```
    */
  get sparePartMovement(): Prisma.SparePartMovementDelegate<ExtArgs>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs>;

  /**
   * `prisma.workshop`: Exposes CRUD operations for the **Workshop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workshops
    * const workshops = await prisma.workshop.findMany()
    * ```
    */
  get workshop(): Prisma.WorkshopDelegate<ExtArgs>;

  /**
   * `prisma.workshopSchedule`: Exposes CRUD operations for the **WorkshopSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkshopSchedules
    * const workshopSchedules = await prisma.workshopSchedule.findMany()
    * ```
    */
  get workshopSchedule(): Prisma.WorkshopScheduleDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    AuditLog: 'AuditLog',
    Vehicle: 'Vehicle',
    VehicleEntry: 'VehicleEntry',
    KeyControl: 'KeyControl',
    WorkOrder: 'WorkOrder',
    WorkOrderStatus: 'WorkOrderStatus',
    WorkOrderPhoto: 'WorkOrderPhoto',
    WorkPause: 'WorkPause',
    SparePart: 'SparePart',
    WorkOrderSparePart: 'WorkOrderSparePart',
    SparePartMovement: 'SparePartMovement',
    Region: 'Region',
    Workshop: 'Workshop',
    WorkshopSchedule: 'WorkshopSchedule',
    Document: 'Document',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "role" | "permission" | "rolePermission" | "auditLog" | "vehicle" | "vehicleEntry" | "keyControl" | "workOrder" | "workOrderStatus" | "workOrderPhoto" | "workPause" | "sparePart" | "workOrderSparePart" | "sparePartMovement" | "region" | "workshop" | "workshopSchedule" | "document" | "notification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Vehicle: {
        payload: Prisma.$VehiclePayload<ExtArgs>
        fields: Prisma.VehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findFirst: {
            args: Prisma.VehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findMany: {
            args: Prisma.VehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          create: {
            args: Prisma.VehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          createMany: {
            args: Prisma.VehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VehicleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          delete: {
            args: Prisma.VehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          update: {
            args: Prisma.VehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          deleteMany: {
            args: Prisma.VehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          aggregate: {
            args: Prisma.VehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicle>
          }
          groupBy: {
            args: Prisma.VehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehicleCountArgs<ExtArgs>
            result: $Utils.Optional<VehicleCountAggregateOutputType> | number
          }
        }
      }
      VehicleEntry: {
        payload: Prisma.$VehicleEntryPayload<ExtArgs>
        fields: Prisma.VehicleEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          findFirst: {
            args: Prisma.VehicleEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          findMany: {
            args: Prisma.VehicleEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>[]
          }
          create: {
            args: Prisma.VehicleEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          createMany: {
            args: Prisma.VehicleEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VehicleEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>[]
          }
          delete: {
            args: Prisma.VehicleEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          update: {
            args: Prisma.VehicleEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          deleteMany: {
            args: Prisma.VehicleEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VehicleEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehicleEntryPayload>
          }
          aggregate: {
            args: Prisma.VehicleEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicleEntry>
          }
          groupBy: {
            args: Prisma.VehicleEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehicleEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehicleEntryCountArgs<ExtArgs>
            result: $Utils.Optional<VehicleEntryCountAggregateOutputType> | number
          }
        }
      }
      KeyControl: {
        payload: Prisma.$KeyControlPayload<ExtArgs>
        fields: Prisma.KeyControlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyControlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyControlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          findFirst: {
            args: Prisma.KeyControlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyControlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          findMany: {
            args: Prisma.KeyControlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>[]
          }
          create: {
            args: Prisma.KeyControlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          createMany: {
            args: Prisma.KeyControlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeyControlCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>[]
          }
          delete: {
            args: Prisma.KeyControlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          update: {
            args: Prisma.KeyControlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          deleteMany: {
            args: Prisma.KeyControlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeyControlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KeyControlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyControlPayload>
          }
          aggregate: {
            args: Prisma.KeyControlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeyControl>
          }
          groupBy: {
            args: Prisma.KeyControlGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeyControlGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyControlCountArgs<ExtArgs>
            result: $Utils.Optional<KeyControlCountAggregateOutputType> | number
          }
        }
      }
      WorkOrder: {
        payload: Prisma.$WorkOrderPayload<ExtArgs>
        fields: Prisma.WorkOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          findMany: {
            args: Prisma.WorkOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          create: {
            args: Prisma.WorkOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          createMany: {
            args: Prisma.WorkOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          update: {
            args: Prisma.WorkOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrder>
          }
          groupBy: {
            args: Prisma.WorkOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderStatus: {
        payload: Prisma.$WorkOrderStatusPayload<ExtArgs>
        fields: Prisma.WorkOrderStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          findMany: {
            args: Prisma.WorkOrderStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>[]
          }
          create: {
            args: Prisma.WorkOrderStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          createMany: {
            args: Prisma.WorkOrderStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          update: {
            args: Prisma.WorkOrderStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkOrderStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderStatusPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderStatus>
          }
          groupBy: {
            args: Prisma.WorkOrderStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderStatusCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderStatusCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderPhoto: {
        payload: Prisma.$WorkOrderPhotoPayload<ExtArgs>
        fields: Prisma.WorkOrderPhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderPhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderPhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderPhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderPhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          findMany: {
            args: Prisma.WorkOrderPhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>[]
          }
          create: {
            args: Prisma.WorkOrderPhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          createMany: {
            args: Prisma.WorkOrderPhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderPhotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderPhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          update: {
            args: Prisma.WorkOrderPhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderPhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderPhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkOrderPhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderPhotoPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderPhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderPhoto>
          }
          groupBy: {
            args: Prisma.WorkOrderPhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderPhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderPhotoCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderPhotoCountAggregateOutputType> | number
          }
        }
      }
      WorkPause: {
        payload: Prisma.$WorkPausePayload<ExtArgs>
        fields: Prisma.WorkPauseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkPauseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkPauseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          findFirst: {
            args: Prisma.WorkPauseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkPauseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          findMany: {
            args: Prisma.WorkPauseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>[]
          }
          create: {
            args: Prisma.WorkPauseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          createMany: {
            args: Prisma.WorkPauseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkPauseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>[]
          }
          delete: {
            args: Prisma.WorkPauseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          update: {
            args: Prisma.WorkPauseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          deleteMany: {
            args: Prisma.WorkPauseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkPauseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkPauseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPausePayload>
          }
          aggregate: {
            args: Prisma.WorkPauseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkPause>
          }
          groupBy: {
            args: Prisma.WorkPauseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkPauseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkPauseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkPauseCountAggregateOutputType> | number
          }
        }
      }
      SparePart: {
        payload: Prisma.$SparePartPayload<ExtArgs>
        fields: Prisma.SparePartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SparePartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SparePartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          findFirst: {
            args: Prisma.SparePartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SparePartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          findMany: {
            args: Prisma.SparePartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>[]
          }
          create: {
            args: Prisma.SparePartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          createMany: {
            args: Prisma.SparePartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SparePartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>[]
          }
          delete: {
            args: Prisma.SparePartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          update: {
            args: Prisma.SparePartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          deleteMany: {
            args: Prisma.SparePartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SparePartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SparePartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartPayload>
          }
          aggregate: {
            args: Prisma.SparePartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSparePart>
          }
          groupBy: {
            args: Prisma.SparePartGroupByArgs<ExtArgs>
            result: $Utils.Optional<SparePartGroupByOutputType>[]
          }
          count: {
            args: Prisma.SparePartCountArgs<ExtArgs>
            result: $Utils.Optional<SparePartCountAggregateOutputType> | number
          }
        }
      }
      WorkOrderSparePart: {
        payload: Prisma.$WorkOrderSparePartPayload<ExtArgs>
        fields: Prisma.WorkOrderSparePartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkOrderSparePartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkOrderSparePartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          findFirst: {
            args: Prisma.WorkOrderSparePartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkOrderSparePartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          findMany: {
            args: Prisma.WorkOrderSparePartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>[]
          }
          create: {
            args: Prisma.WorkOrderSparePartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          createMany: {
            args: Prisma.WorkOrderSparePartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkOrderSparePartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>[]
          }
          delete: {
            args: Prisma.WorkOrderSparePartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          update: {
            args: Prisma.WorkOrderSparePartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          deleteMany: {
            args: Prisma.WorkOrderSparePartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkOrderSparePartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkOrderSparePartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkOrderSparePartPayload>
          }
          aggregate: {
            args: Prisma.WorkOrderSparePartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkOrderSparePart>
          }
          groupBy: {
            args: Prisma.WorkOrderSparePartGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderSparePartGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkOrderSparePartCountArgs<ExtArgs>
            result: $Utils.Optional<WorkOrderSparePartCountAggregateOutputType> | number
          }
        }
      }
      SparePartMovement: {
        payload: Prisma.$SparePartMovementPayload<ExtArgs>
        fields: Prisma.SparePartMovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SparePartMovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SparePartMovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          findFirst: {
            args: Prisma.SparePartMovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SparePartMovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          findMany: {
            args: Prisma.SparePartMovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>[]
          }
          create: {
            args: Prisma.SparePartMovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          createMany: {
            args: Prisma.SparePartMovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SparePartMovementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>[]
          }
          delete: {
            args: Prisma.SparePartMovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          update: {
            args: Prisma.SparePartMovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          deleteMany: {
            args: Prisma.SparePartMovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SparePartMovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SparePartMovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SparePartMovementPayload>
          }
          aggregate: {
            args: Prisma.SparePartMovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSparePartMovement>
          }
          groupBy: {
            args: Prisma.SparePartMovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<SparePartMovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.SparePartMovementCountArgs<ExtArgs>
            result: $Utils.Optional<SparePartMovementCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Workshop: {
        payload: Prisma.$WorkshopPayload<ExtArgs>
        fields: Prisma.WorkshopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkshopFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkshopFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          findFirst: {
            args: Prisma.WorkshopFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkshopFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          findMany: {
            args: Prisma.WorkshopFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>[]
          }
          create: {
            args: Prisma.WorkshopCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          createMany: {
            args: Prisma.WorkshopCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkshopCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>[]
          }
          delete: {
            args: Prisma.WorkshopDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          update: {
            args: Prisma.WorkshopUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          deleteMany: {
            args: Prisma.WorkshopDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkshopUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkshopUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopPayload>
          }
          aggregate: {
            args: Prisma.WorkshopAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkshop>
          }
          groupBy: {
            args: Prisma.WorkshopGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkshopGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkshopCountArgs<ExtArgs>
            result: $Utils.Optional<WorkshopCountAggregateOutputType> | number
          }
        }
      }
      WorkshopSchedule: {
        payload: Prisma.$WorkshopSchedulePayload<ExtArgs>
        fields: Prisma.WorkshopScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkshopScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkshopScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          findFirst: {
            args: Prisma.WorkshopScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkshopScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          findMany: {
            args: Prisma.WorkshopScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>[]
          }
          create: {
            args: Prisma.WorkshopScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          createMany: {
            args: Prisma.WorkshopScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkshopScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>[]
          }
          delete: {
            args: Prisma.WorkshopScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          update: {
            args: Prisma.WorkshopScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          deleteMany: {
            args: Prisma.WorkshopScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkshopScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkshopScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkshopSchedulePayload>
          }
          aggregate: {
            args: Prisma.WorkshopScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkshopSchedule>
          }
          groupBy: {
            args: Prisma.WorkshopScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkshopScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkshopScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<WorkshopScheduleCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdWorkOrders: number
    assignedWorkOrders: number
    vehicleEntries: number
    auditLogs: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdWorkOrders?: boolean | UserCountOutputTypeCountCreatedWorkOrdersArgs
    assignedWorkOrders?: boolean | UserCountOutputTypeCountAssignedWorkOrdersArgs
    vehicleEntries?: boolean | UserCountOutputTypeCountVehicleEntriesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVehicleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    permissions: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type VehicleCountOutputType
   */

  export type VehicleCountOutputType = {
    entries: number
    workOrders: number
  }

  export type VehicleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entries?: boolean | VehicleCountOutputTypeCountEntriesArgs
    workOrders?: boolean | VehicleCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleCountOutputType
     */
    select?: VehicleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleEntryWhereInput
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }


  /**
   * Count Type VehicleEntryCountOutputType
   */

  export type VehicleEntryCountOutputType = {
    workOrders: number
  }

  export type VehicleEntryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | VehicleEntryCountOutputTypeCountWorkOrdersArgs
  }

  // Custom InputTypes
  /**
   * VehicleEntryCountOutputType without action
   */
  export type VehicleEntryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntryCountOutputType
     */
    select?: VehicleEntryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VehicleEntryCountOutputType without action
   */
  export type VehicleEntryCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }


  /**
   * Count Type WorkOrderCountOutputType
   */

  export type WorkOrderCountOutputType = {
    statuses: number
    photos: number
    spareParts: number
    pauses: number
  }

  export type WorkOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statuses?: boolean | WorkOrderCountOutputTypeCountStatusesArgs
    photos?: boolean | WorkOrderCountOutputTypeCountPhotosArgs
    spareParts?: boolean | WorkOrderCountOutputTypeCountSparePartsArgs
    pauses?: boolean | WorkOrderCountOutputTypeCountPausesArgs
  }

  // Custom InputTypes
  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderCountOutputType
     */
    select?: WorkOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderStatusWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderPhotoWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountSparePartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderSparePartWhereInput
  }

  /**
   * WorkOrderCountOutputType without action
   */
  export type WorkOrderCountOutputTypeCountPausesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkPauseWhereInput
  }


  /**
   * Count Type SparePartCountOutputType
   */

  export type SparePartCountOutputType = {
    workOrders: number
    movements: number
  }

  export type SparePartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | SparePartCountOutputTypeCountWorkOrdersArgs
    movements?: boolean | SparePartCountOutputTypeCountMovementsArgs
  }

  // Custom InputTypes
  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartCountOutputType
     */
    select?: SparePartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderSparePartWhereInput
  }

  /**
   * SparePartCountOutputType without action
   */
  export type SparePartCountOutputTypeCountMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SparePartMovementWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    workshops: number
    vehicles: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workshops?: boolean | RegionCountOutputTypeCountWorkshopsArgs
    vehicles?: boolean | RegionCountOutputTypeCountVehiclesArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountWorkshopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkshopWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }


  /**
   * Count Type WorkshopCountOutputType
   */

  export type WorkshopCountOutputType = {
    users: number
    entries: number
    workOrders: number
    schedules: number
  }

  export type WorkshopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | WorkshopCountOutputTypeCountUsersArgs
    entries?: boolean | WorkshopCountOutputTypeCountEntriesArgs
    workOrders?: boolean | WorkshopCountOutputTypeCountWorkOrdersArgs
    schedules?: boolean | WorkshopCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopCountOutputType
     */
    select?: WorkshopCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeCountEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleEntryWhereInput
  }

  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeCountWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
  }

  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkshopScheduleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    rut: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phone: string | null
    roleId: string | null
    workshopId: string | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    rut: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phone: string | null
    roleId: string | null
    workshopId: string | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    rut: number
    firstName: number
    lastName: number
    email: number
    password: number
    phone: number
    roleId: number
    workshopId: number
    isActive: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    rut?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phone?: true
    roleId?: true
    workshopId?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    rut?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phone?: true
    roleId?: true
    workshopId?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    rut?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phone?: true
    roleId?: true
    workshopId?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone: string | null
    roleId: string
    workshopId: string | null
    isActive: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rut?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roleId?: boolean
    workshopId?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    workshop?: boolean | User$workshopArgs<ExtArgs>
    createdWorkOrders?: boolean | User$createdWorkOrdersArgs<ExtArgs>
    assignedWorkOrders?: boolean | User$assignedWorkOrdersArgs<ExtArgs>
    vehicleEntries?: boolean | User$vehicleEntriesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rut?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roleId?: boolean
    workshopId?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    workshop?: boolean | User$workshopArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    rut?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    roleId?: boolean
    workshopId?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    workshop?: boolean | User$workshopArgs<ExtArgs>
    createdWorkOrders?: boolean | User$createdWorkOrdersArgs<ExtArgs>
    assignedWorkOrders?: boolean | User$assignedWorkOrdersArgs<ExtArgs>
    vehicleEntries?: boolean | User$vehicleEntriesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    workshop?: boolean | User$workshopArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      workshop: Prisma.$WorkshopPayload<ExtArgs> | null
      createdWorkOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      assignedWorkOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      vehicleEntries: Prisma.$VehicleEntryPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rut: string
      firstName: string
      lastName: string
      email: string
      password: string
      phone: string | null
      roleId: string
      workshopId: string | null
      isActive: boolean
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workshop<T extends User$workshopArgs<ExtArgs> = {}>(args?: Subset<T, User$workshopArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdWorkOrders<T extends User$createdWorkOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdWorkOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    assignedWorkOrders<T extends User$assignedWorkOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedWorkOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    vehicleEntries<T extends User$vehicleEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$vehicleEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly rut: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly roleId: FieldRef<"User", 'String'>
    readonly workshopId: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.workshop
   */
  export type User$workshopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    where?: WorkshopWhereInput
  }

  /**
   * User.createdWorkOrders
   */
  export type User$createdWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * User.assignedWorkOrders
   */
  export type User$assignedWorkOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * User.vehicleEntries
   */
  export type User$vehicleEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    where?: VehicleEntryWhereInput
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    cursor?: VehicleEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    resource: number
    action: number
    description: number
    createdAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    resource: string
    action: string
    description: string | null
    createdAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      roles: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      resource: string
      action: string
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
    createdAt: Date | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
    createdAt: Date | null
  }

  export type RolePermissionCountAggregateOutputType = {
    roleId: number
    permissionId: number
    createdAt: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    roleId?: true
    permissionId?: true
    createdAt?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    roleId?: true
    permissionId?: true
    createdAt?: true
  }

  export type RolePermissionCountAggregateInputType = {
    roleId?: true
    permissionId?: true
    createdAt?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    roleId: string
    permissionId: string
    createdAt: Date
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    roleId?: boolean
    permissionId?: boolean
    createdAt?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: string
      permissionId: string
      createdAt: Date
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.createManyAndReturn({ 
     *   select: { roleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly createdAt: FieldRef<"RolePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    resource: number
    resourceId: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    resource: string
    resourceId: string | null
    details: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      resource: string
      resourceId: string | null
      details: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Vehicle
   */

  export type AggregateVehicle = {
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  export type VehicleAvgAggregateOutputType = {
    year: number | null
  }

  export type VehicleSumAggregateOutputType = {
    year: number | null
  }

  export type VehicleMinAggregateOutputType = {
    id: string | null
    licensePlate: string | null
    vehicleType: string | null
    brand: string | null
    model: string | null
    year: number | null
    vin: string | null
    fleetNumber: string | null
    regionId: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleMaxAggregateOutputType = {
    id: string | null
    licensePlate: string | null
    vehicleType: string | null
    brand: string | null
    model: string | null
    year: number | null
    vin: string | null
    fleetNumber: string | null
    regionId: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleCountAggregateOutputType = {
    id: number
    licensePlate: number
    vehicleType: number
    brand: number
    model: number
    year: number
    vin: number
    fleetNumber: number
    regionId: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VehicleAvgAggregateInputType = {
    year?: true
  }

  export type VehicleSumAggregateInputType = {
    year?: true
  }

  export type VehicleMinAggregateInputType = {
    id?: true
    licensePlate?: true
    vehicleType?: true
    brand?: true
    model?: true
    year?: true
    vin?: true
    fleetNumber?: true
    regionId?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleMaxAggregateInputType = {
    id?: true
    licensePlate?: true
    vehicleType?: true
    brand?: true
    model?: true
    year?: true
    vin?: true
    fleetNumber?: true
    regionId?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleCountAggregateInputType = {
    id?: true
    licensePlate?: true
    vehicleType?: true
    brand?: true
    model?: true
    year?: true
    vin?: true
    fleetNumber?: true
    regionId?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicle to aggregate.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleMaxAggregateInputType
  }

  export type GetVehicleAggregateType<T extends VehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicle[P]>
      : GetScalarType<T[P], AggregateVehicle[P]>
  }




  export type VehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithAggregationInput | VehicleOrderByWithAggregationInput[]
    by: VehicleScalarFieldEnum[] | VehicleScalarFieldEnum
    having?: VehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleCountAggregateInputType | true
    _avg?: VehicleAvgAggregateInputType
    _sum?: VehicleSumAggregateInputType
    _min?: VehicleMinAggregateInputType
    _max?: VehicleMaxAggregateInputType
  }

  export type VehicleGroupByOutputType = {
    id: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin: string | null
    fleetNumber: string | null
    regionId: string
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  type GetVehicleGroupByPayload<T extends VehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleGroupByOutputType[P]>
        }
      >
    >


  export type VehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licensePlate?: boolean
    vehicleType?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    vin?: boolean
    fleetNumber?: boolean
    regionId?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    entries?: boolean | Vehicle$entriesArgs<ExtArgs>
    workOrders?: boolean | Vehicle$workOrdersArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licensePlate?: boolean
    vehicleType?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    vin?: boolean
    fleetNumber?: boolean
    regionId?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectScalar = {
    id?: boolean
    licensePlate?: boolean
    vehicleType?: boolean
    brand?: boolean
    model?: boolean
    year?: boolean
    vin?: boolean
    fleetNumber?: boolean
    regionId?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    entries?: boolean | Vehicle$entriesArgs<ExtArgs>
    workOrders?: boolean | Vehicle$workOrdersArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VehicleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $VehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicle"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      entries: Prisma.$VehicleEntryPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      licensePlate: string
      vehicleType: string
      brand: string
      model: string
      year: number
      vin: string | null
      fleetNumber: string | null
      regionId: string
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vehicle"]>
    composites: {}
  }

  type VehicleGetPayload<S extends boolean | null | undefined | VehicleDefaultArgs> = $Result.GetResult<Prisma.$VehiclePayload, S>

  type VehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehicleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VehicleCountAggregateInputType | true
    }

  export interface VehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicle'], meta: { name: 'Vehicle' } }
    /**
     * Find zero or one Vehicle that matches the filter.
     * @param {VehicleFindUniqueArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehicleFindUniqueArgs>(args: SelectSubset<T, VehicleFindUniqueArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vehicle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VehicleFindUniqueOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, VehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehicleFindFirstArgs>(args?: SelectSubset<T, VehicleFindFirstArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, VehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicle.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehicleFindManyArgs>(args?: SelectSubset<T, VehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vehicle.
     * @param {VehicleCreateArgs} args - Arguments to create a Vehicle.
     * @example
     * // Create one Vehicle
     * const Vehicle = await prisma.vehicle.create({
     *   data: {
     *     // ... data to create a Vehicle
     *   }
     * })
     * 
     */
    create<T extends VehicleCreateArgs>(args: SelectSubset<T, VehicleCreateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vehicles.
     * @param {VehicleCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehicleCreateManyArgs>(args?: SelectSubset<T, VehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vehicles and returns the data saved in the database.
     * @param {VehicleCreateManyAndReturnArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vehicles and only return the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VehicleCreateManyAndReturnArgs>(args?: SelectSubset<T, VehicleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vehicle.
     * @param {VehicleDeleteArgs} args - Arguments to delete one Vehicle.
     * @example
     * // Delete one Vehicle
     * const Vehicle = await prisma.vehicle.delete({
     *   where: {
     *     // ... filter to delete one Vehicle
     *   }
     * })
     * 
     */
    delete<T extends VehicleDeleteArgs>(args: SelectSubset<T, VehicleDeleteArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vehicle.
     * @param {VehicleUpdateArgs} args - Arguments to update one Vehicle.
     * @example
     * // Update one Vehicle
     * const vehicle = await prisma.vehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehicleUpdateArgs>(args: SelectSubset<T, VehicleUpdateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vehicles.
     * @param {VehicleDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehicleDeleteManyArgs>(args?: SelectSubset<T, VehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehicleUpdateManyArgs>(args: SelectSubset<T, VehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vehicle.
     * @param {VehicleUpsertArgs} args - Arguments to update or create a Vehicle.
     * @example
     * // Update or create a Vehicle
     * const vehicle = await prisma.vehicle.upsert({
     *   create: {
     *     // ... data to create a Vehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicle we want to update
     *   }
     * })
     */
    upsert<T extends VehicleUpsertArgs>(args: SelectSubset<T, VehicleUpsertArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicle.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehicleCountArgs>(
      args?: Subset<T, VehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleAggregateArgs>(args: Subset<T, VehicleAggregateArgs>): Prisma.PrismaPromise<GetVehicleAggregateType<T>>

    /**
     * Group by Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleGroupByArgs['orderBy'] }
        : { orderBy?: VehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicle model
   */
  readonly fields: VehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    entries<T extends Vehicle$entriesArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findMany"> | Null>
    workOrders<T extends Vehicle$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vehicle model
   */ 
  interface VehicleFieldRefs {
    readonly id: FieldRef<"Vehicle", 'String'>
    readonly licensePlate: FieldRef<"Vehicle", 'String'>
    readonly vehicleType: FieldRef<"Vehicle", 'String'>
    readonly brand: FieldRef<"Vehicle", 'String'>
    readonly model: FieldRef<"Vehicle", 'String'>
    readonly year: FieldRef<"Vehicle", 'Int'>
    readonly vin: FieldRef<"Vehicle", 'String'>
    readonly fleetNumber: FieldRef<"Vehicle", 'String'>
    readonly regionId: FieldRef<"Vehicle", 'String'>
    readonly status: FieldRef<"Vehicle", 'String'>
    readonly isActive: FieldRef<"Vehicle", 'Boolean'>
    readonly createdAt: FieldRef<"Vehicle", 'DateTime'>
    readonly updatedAt: FieldRef<"Vehicle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vehicle findUnique
   */
  export type VehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findUniqueOrThrow
   */
  export type VehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findFirst
   */
  export type VehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findFirstOrThrow
   */
  export type VehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findMany
   */
  export type VehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle create
   */
  export type VehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicle.
     */
    data: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
  }

  /**
   * Vehicle createMany
   */
  export type VehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vehicle createManyAndReturn
   */
  export type VehicleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicle update
   */
  export type VehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicle.
     */
    data: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
    /**
     * Choose, which Vehicle to update.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle updateMany
   */
  export type VehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle upsert
   */
  export type VehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicle to update in case it exists.
     */
    where: VehicleWhereUniqueInput
    /**
     * In case the Vehicle found by the `where` argument doesn't exist, create a new Vehicle with this data.
     */
    create: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
    /**
     * In case the Vehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
  }

  /**
   * Vehicle delete
   */
  export type VehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter which Vehicle to delete.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle deleteMany
   */
  export type VehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle.entries
   */
  export type Vehicle$entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    where?: VehicleEntryWhereInput
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    cursor?: VehicleEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * Vehicle.workOrders
   */
  export type Vehicle$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * Vehicle without action
   */
  export type VehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
  }


  /**
   * Model VehicleEntry
   */

  export type AggregateVehicleEntry = {
    _count: VehicleEntryCountAggregateOutputType | null
    _avg: VehicleEntryAvgAggregateOutputType | null
    _sum: VehicleEntrySumAggregateOutputType | null
    _min: VehicleEntryMinAggregateOutputType | null
    _max: VehicleEntryMaxAggregateOutputType | null
  }

  export type VehicleEntryAvgAggregateOutputType = {
    entryKm: number | null
    exitKm: number | null
  }

  export type VehicleEntrySumAggregateOutputType = {
    entryKm: number | null
    exitKm: number | null
  }

  export type VehicleEntryMinAggregateOutputType = {
    id: string | null
    entryCode: string | null
    vehicleId: string | null
    workshopId: string | null
    driverRut: string | null
    driverName: string | null
    driverPhone: string | null
    entryDate: Date | null
    exitDate: Date | null
    entryKm: number | null
    exitKm: number | null
    fuelLevel: string | null
    hasKeys: boolean | null
    observations: string | null
    status: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleEntryMaxAggregateOutputType = {
    id: string | null
    entryCode: string | null
    vehicleId: string | null
    workshopId: string | null
    driverRut: string | null
    driverName: string | null
    driverPhone: string | null
    entryDate: Date | null
    exitDate: Date | null
    entryKm: number | null
    exitKm: number | null
    fuelLevel: string | null
    hasKeys: boolean | null
    observations: string | null
    status: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleEntryCountAggregateOutputType = {
    id: number
    entryCode: number
    vehicleId: number
    workshopId: number
    driverRut: number
    driverName: number
    driverPhone: number
    entryDate: number
    exitDate: number
    entryKm: number
    exitKm: number
    fuelLevel: number
    hasKeys: number
    observations: number
    photos: number
    status: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VehicleEntryAvgAggregateInputType = {
    entryKm?: true
    exitKm?: true
  }

  export type VehicleEntrySumAggregateInputType = {
    entryKm?: true
    exitKm?: true
  }

  export type VehicleEntryMinAggregateInputType = {
    id?: true
    entryCode?: true
    vehicleId?: true
    workshopId?: true
    driverRut?: true
    driverName?: true
    driverPhone?: true
    entryDate?: true
    exitDate?: true
    entryKm?: true
    exitKm?: true
    fuelLevel?: true
    hasKeys?: true
    observations?: true
    status?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleEntryMaxAggregateInputType = {
    id?: true
    entryCode?: true
    vehicleId?: true
    workshopId?: true
    driverRut?: true
    driverName?: true
    driverPhone?: true
    entryDate?: true
    exitDate?: true
    entryKm?: true
    exitKm?: true
    fuelLevel?: true
    hasKeys?: true
    observations?: true
    status?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleEntryCountAggregateInputType = {
    id?: true
    entryCode?: true
    vehicleId?: true
    workshopId?: true
    driverRut?: true
    driverName?: true
    driverPhone?: true
    entryDate?: true
    exitDate?: true
    entryKm?: true
    exitKm?: true
    fuelLevel?: true
    hasKeys?: true
    observations?: true
    photos?: true
    status?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VehicleEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VehicleEntry to aggregate.
     */
    where?: VehicleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleEntries to fetch.
     */
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VehicleEntries
    **/
    _count?: true | VehicleEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleEntryMaxAggregateInputType
  }

  export type GetVehicleEntryAggregateType<T extends VehicleEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicleEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicleEntry[P]>
      : GetScalarType<T[P], AggregateVehicleEntry[P]>
  }




  export type VehicleEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleEntryWhereInput
    orderBy?: VehicleEntryOrderByWithAggregationInput | VehicleEntryOrderByWithAggregationInput[]
    by: VehicleEntryScalarFieldEnum[] | VehicleEntryScalarFieldEnum
    having?: VehicleEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleEntryCountAggregateInputType | true
    _avg?: VehicleEntryAvgAggregateInputType
    _sum?: VehicleEntrySumAggregateInputType
    _min?: VehicleEntryMinAggregateInputType
    _max?: VehicleEntryMaxAggregateInputType
  }

  export type VehicleEntryGroupByOutputType = {
    id: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone: string | null
    entryDate: Date
    exitDate: Date | null
    entryKm: number
    exitKm: number | null
    fuelLevel: string
    hasKeys: boolean
    observations: string | null
    photos: JsonValue | null
    status: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: VehicleEntryCountAggregateOutputType | null
    _avg: VehicleEntryAvgAggregateOutputType | null
    _sum: VehicleEntrySumAggregateOutputType | null
    _min: VehicleEntryMinAggregateOutputType | null
    _max: VehicleEntryMaxAggregateOutputType | null
  }

  type GetVehicleEntryGroupByPayload<T extends VehicleEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleEntryGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleEntryGroupByOutputType[P]>
        }
      >
    >


  export type VehicleEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryCode?: boolean
    vehicleId?: boolean
    workshopId?: boolean
    driverRut?: boolean
    driverName?: boolean
    driverPhone?: boolean
    entryDate?: boolean
    exitDate?: boolean
    entryKm?: boolean
    exitKm?: boolean
    fuelLevel?: boolean
    hasKeys?: boolean
    observations?: boolean
    photos?: boolean
    status?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    workOrders?: boolean | VehicleEntry$workOrdersArgs<ExtArgs>
    keyControl?: boolean | VehicleEntry$keyControlArgs<ExtArgs>
    _count?: boolean | VehicleEntryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicleEntry"]>

  export type VehicleEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryCode?: boolean
    vehicleId?: boolean
    workshopId?: boolean
    driverRut?: boolean
    driverName?: boolean
    driverPhone?: boolean
    entryDate?: boolean
    exitDate?: boolean
    entryKm?: boolean
    exitKm?: boolean
    fuelLevel?: boolean
    hasKeys?: boolean
    observations?: boolean
    photos?: boolean
    status?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicleEntry"]>

  export type VehicleEntrySelectScalar = {
    id?: boolean
    entryCode?: boolean
    vehicleId?: boolean
    workshopId?: boolean
    driverRut?: boolean
    driverName?: boolean
    driverPhone?: boolean
    entryDate?: boolean
    exitDate?: boolean
    entryKm?: boolean
    exitKm?: boolean
    fuelLevel?: boolean
    hasKeys?: boolean
    observations?: boolean
    photos?: boolean
    status?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VehicleEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    workOrders?: boolean | VehicleEntry$workOrdersArgs<ExtArgs>
    keyControl?: boolean | VehicleEntry$keyControlArgs<ExtArgs>
    _count?: boolean | VehicleEntryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VehicleEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VehicleEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VehicleEntry"
    objects: {
      vehicle: Prisma.$VehiclePayload<ExtArgs>
      workshop: Prisma.$WorkshopPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      keyControl: Prisma.$KeyControlPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entryCode: string
      vehicleId: string
      workshopId: string
      driverRut: string
      driverName: string
      driverPhone: string | null
      entryDate: Date
      exitDate: Date | null
      entryKm: number
      exitKm: number | null
      fuelLevel: string
      hasKeys: boolean
      observations: string | null
      photos: Prisma.JsonValue | null
      status: string
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vehicleEntry"]>
    composites: {}
  }

  type VehicleEntryGetPayload<S extends boolean | null | undefined | VehicleEntryDefaultArgs> = $Result.GetResult<Prisma.$VehicleEntryPayload, S>

  type VehicleEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehicleEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VehicleEntryCountAggregateInputType | true
    }

  export interface VehicleEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VehicleEntry'], meta: { name: 'VehicleEntry' } }
    /**
     * Find zero or one VehicleEntry that matches the filter.
     * @param {VehicleEntryFindUniqueArgs} args - Arguments to find a VehicleEntry
     * @example
     * // Get one VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehicleEntryFindUniqueArgs>(args: SelectSubset<T, VehicleEntryFindUniqueArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VehicleEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VehicleEntryFindUniqueOrThrowArgs} args - Arguments to find a VehicleEntry
     * @example
     * // Get one VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehicleEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, VehicleEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VehicleEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryFindFirstArgs} args - Arguments to find a VehicleEntry
     * @example
     * // Get one VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehicleEntryFindFirstArgs>(args?: SelectSubset<T, VehicleEntryFindFirstArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VehicleEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryFindFirstOrThrowArgs} args - Arguments to find a VehicleEntry
     * @example
     * // Get one VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehicleEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, VehicleEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VehicleEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VehicleEntries
     * const vehicleEntries = await prisma.vehicleEntry.findMany()
     * 
     * // Get first 10 VehicleEntries
     * const vehicleEntries = await prisma.vehicleEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicleEntryWithIdOnly = await prisma.vehicleEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehicleEntryFindManyArgs>(args?: SelectSubset<T, VehicleEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VehicleEntry.
     * @param {VehicleEntryCreateArgs} args - Arguments to create a VehicleEntry.
     * @example
     * // Create one VehicleEntry
     * const VehicleEntry = await prisma.vehicleEntry.create({
     *   data: {
     *     // ... data to create a VehicleEntry
     *   }
     * })
     * 
     */
    create<T extends VehicleEntryCreateArgs>(args: SelectSubset<T, VehicleEntryCreateArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VehicleEntries.
     * @param {VehicleEntryCreateManyArgs} args - Arguments to create many VehicleEntries.
     * @example
     * // Create many VehicleEntries
     * const vehicleEntry = await prisma.vehicleEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehicleEntryCreateManyArgs>(args?: SelectSubset<T, VehicleEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VehicleEntries and returns the data saved in the database.
     * @param {VehicleEntryCreateManyAndReturnArgs} args - Arguments to create many VehicleEntries.
     * @example
     * // Create many VehicleEntries
     * const vehicleEntry = await prisma.vehicleEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VehicleEntries and only return the `id`
     * const vehicleEntryWithIdOnly = await prisma.vehicleEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VehicleEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, VehicleEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VehicleEntry.
     * @param {VehicleEntryDeleteArgs} args - Arguments to delete one VehicleEntry.
     * @example
     * // Delete one VehicleEntry
     * const VehicleEntry = await prisma.vehicleEntry.delete({
     *   where: {
     *     // ... filter to delete one VehicleEntry
     *   }
     * })
     * 
     */
    delete<T extends VehicleEntryDeleteArgs>(args: SelectSubset<T, VehicleEntryDeleteArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VehicleEntry.
     * @param {VehicleEntryUpdateArgs} args - Arguments to update one VehicleEntry.
     * @example
     * // Update one VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehicleEntryUpdateArgs>(args: SelectSubset<T, VehicleEntryUpdateArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VehicleEntries.
     * @param {VehicleEntryDeleteManyArgs} args - Arguments to filter VehicleEntries to delete.
     * @example
     * // Delete a few VehicleEntries
     * const { count } = await prisma.vehicleEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehicleEntryDeleteManyArgs>(args?: SelectSubset<T, VehicleEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VehicleEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VehicleEntries
     * const vehicleEntry = await prisma.vehicleEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehicleEntryUpdateManyArgs>(args: SelectSubset<T, VehicleEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VehicleEntry.
     * @param {VehicleEntryUpsertArgs} args - Arguments to update or create a VehicleEntry.
     * @example
     * // Update or create a VehicleEntry
     * const vehicleEntry = await prisma.vehicleEntry.upsert({
     *   create: {
     *     // ... data to create a VehicleEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VehicleEntry we want to update
     *   }
     * })
     */
    upsert<T extends VehicleEntryUpsertArgs>(args: SelectSubset<T, VehicleEntryUpsertArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VehicleEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryCountArgs} args - Arguments to filter VehicleEntries to count.
     * @example
     * // Count the number of VehicleEntries
     * const count = await prisma.vehicleEntry.count({
     *   where: {
     *     // ... the filter for the VehicleEntries we want to count
     *   }
     * })
    **/
    count<T extends VehicleEntryCountArgs>(
      args?: Subset<T, VehicleEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VehicleEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleEntryAggregateArgs>(args: Subset<T, VehicleEntryAggregateArgs>): Prisma.PrismaPromise<GetVehicleEntryAggregateType<T>>

    /**
     * Group by VehicleEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleEntryGroupByArgs['orderBy'] }
        : { orderBy?: VehicleEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VehicleEntry model
   */
  readonly fields: VehicleEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VehicleEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vehicle<T extends VehicleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleDefaultArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workshop<T extends WorkshopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkshopDefaultArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workOrders<T extends VehicleEntry$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, VehicleEntry$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    keyControl<T extends VehicleEntry$keyControlArgs<ExtArgs> = {}>(args?: Subset<T, VehicleEntry$keyControlArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VehicleEntry model
   */ 
  interface VehicleEntryFieldRefs {
    readonly id: FieldRef<"VehicleEntry", 'String'>
    readonly entryCode: FieldRef<"VehicleEntry", 'String'>
    readonly vehicleId: FieldRef<"VehicleEntry", 'String'>
    readonly workshopId: FieldRef<"VehicleEntry", 'String'>
    readonly driverRut: FieldRef<"VehicleEntry", 'String'>
    readonly driverName: FieldRef<"VehicleEntry", 'String'>
    readonly driverPhone: FieldRef<"VehicleEntry", 'String'>
    readonly entryDate: FieldRef<"VehicleEntry", 'DateTime'>
    readonly exitDate: FieldRef<"VehicleEntry", 'DateTime'>
    readonly entryKm: FieldRef<"VehicleEntry", 'Int'>
    readonly exitKm: FieldRef<"VehicleEntry", 'Int'>
    readonly fuelLevel: FieldRef<"VehicleEntry", 'String'>
    readonly hasKeys: FieldRef<"VehicleEntry", 'Boolean'>
    readonly observations: FieldRef<"VehicleEntry", 'String'>
    readonly photos: FieldRef<"VehicleEntry", 'Json'>
    readonly status: FieldRef<"VehicleEntry", 'String'>
    readonly createdById: FieldRef<"VehicleEntry", 'String'>
    readonly createdAt: FieldRef<"VehicleEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"VehicleEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VehicleEntry findUnique
   */
  export type VehicleEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter, which VehicleEntry to fetch.
     */
    where: VehicleEntryWhereUniqueInput
  }

  /**
   * VehicleEntry findUniqueOrThrow
   */
  export type VehicleEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter, which VehicleEntry to fetch.
     */
    where: VehicleEntryWhereUniqueInput
  }

  /**
   * VehicleEntry findFirst
   */
  export type VehicleEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter, which VehicleEntry to fetch.
     */
    where?: VehicleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleEntries to fetch.
     */
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VehicleEntries.
     */
    cursor?: VehicleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VehicleEntries.
     */
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * VehicleEntry findFirstOrThrow
   */
  export type VehicleEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter, which VehicleEntry to fetch.
     */
    where?: VehicleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleEntries to fetch.
     */
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VehicleEntries.
     */
    cursor?: VehicleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VehicleEntries.
     */
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * VehicleEntry findMany
   */
  export type VehicleEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter, which VehicleEntries to fetch.
     */
    where?: VehicleEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleEntries to fetch.
     */
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VehicleEntries.
     */
    cursor?: VehicleEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleEntries.
     */
    skip?: number
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * VehicleEntry create
   */
  export type VehicleEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a VehicleEntry.
     */
    data: XOR<VehicleEntryCreateInput, VehicleEntryUncheckedCreateInput>
  }

  /**
   * VehicleEntry createMany
   */
  export type VehicleEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VehicleEntries.
     */
    data: VehicleEntryCreateManyInput | VehicleEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VehicleEntry createManyAndReturn
   */
  export type VehicleEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VehicleEntries.
     */
    data: VehicleEntryCreateManyInput | VehicleEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VehicleEntry update
   */
  export type VehicleEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a VehicleEntry.
     */
    data: XOR<VehicleEntryUpdateInput, VehicleEntryUncheckedUpdateInput>
    /**
     * Choose, which VehicleEntry to update.
     */
    where: VehicleEntryWhereUniqueInput
  }

  /**
   * VehicleEntry updateMany
   */
  export type VehicleEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VehicleEntries.
     */
    data: XOR<VehicleEntryUpdateManyMutationInput, VehicleEntryUncheckedUpdateManyInput>
    /**
     * Filter which VehicleEntries to update
     */
    where?: VehicleEntryWhereInput
  }

  /**
   * VehicleEntry upsert
   */
  export type VehicleEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the VehicleEntry to update in case it exists.
     */
    where: VehicleEntryWhereUniqueInput
    /**
     * In case the VehicleEntry found by the `where` argument doesn't exist, create a new VehicleEntry with this data.
     */
    create: XOR<VehicleEntryCreateInput, VehicleEntryUncheckedCreateInput>
    /**
     * In case the VehicleEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleEntryUpdateInput, VehicleEntryUncheckedUpdateInput>
  }

  /**
   * VehicleEntry delete
   */
  export type VehicleEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    /**
     * Filter which VehicleEntry to delete.
     */
    where: VehicleEntryWhereUniqueInput
  }

  /**
   * VehicleEntry deleteMany
   */
  export type VehicleEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VehicleEntries to delete
     */
    where?: VehicleEntryWhereInput
  }

  /**
   * VehicleEntry.workOrders
   */
  export type VehicleEntry$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * VehicleEntry.keyControl
   */
  export type VehicleEntry$keyControlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    where?: KeyControlWhereInput
  }

  /**
   * VehicleEntry without action
   */
  export type VehicleEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
  }


  /**
   * Model KeyControl
   */

  export type AggregateKeyControl = {
    _count: KeyControlCountAggregateOutputType | null
    _min: KeyControlMinAggregateOutputType | null
    _max: KeyControlMaxAggregateOutputType | null
  }

  export type KeyControlMinAggregateOutputType = {
    id: string | null
    entryId: string | null
    keyLocation: string | null
    deliveredTo: string | null
    deliveredAt: Date | null
    returnedBy: string | null
    returnedAt: Date | null
    observations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeyControlMaxAggregateOutputType = {
    id: string | null
    entryId: string | null
    keyLocation: string | null
    deliveredTo: string | null
    deliveredAt: Date | null
    returnedBy: string | null
    returnedAt: Date | null
    observations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeyControlCountAggregateOutputType = {
    id: number
    entryId: number
    keyLocation: number
    deliveredTo: number
    deliveredAt: number
    returnedBy: number
    returnedAt: number
    observations: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KeyControlMinAggregateInputType = {
    id?: true
    entryId?: true
    keyLocation?: true
    deliveredTo?: true
    deliveredAt?: true
    returnedBy?: true
    returnedAt?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeyControlMaxAggregateInputType = {
    id?: true
    entryId?: true
    keyLocation?: true
    deliveredTo?: true
    deliveredAt?: true
    returnedBy?: true
    returnedAt?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeyControlCountAggregateInputType = {
    id?: true
    entryId?: true
    keyLocation?: true
    deliveredTo?: true
    deliveredAt?: true
    returnedBy?: true
    returnedAt?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KeyControlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyControl to aggregate.
     */
    where?: KeyControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyControls to fetch.
     */
    orderBy?: KeyControlOrderByWithRelationInput | KeyControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyControls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyControls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeyControls
    **/
    _count?: true | KeyControlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyControlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyControlMaxAggregateInputType
  }

  export type GetKeyControlAggregateType<T extends KeyControlAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyControl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyControl[P]>
      : GetScalarType<T[P], AggregateKeyControl[P]>
  }




  export type KeyControlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyControlWhereInput
    orderBy?: KeyControlOrderByWithAggregationInput | KeyControlOrderByWithAggregationInput[]
    by: KeyControlScalarFieldEnum[] | KeyControlScalarFieldEnum
    having?: KeyControlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyControlCountAggregateInputType | true
    _min?: KeyControlMinAggregateInputType
    _max?: KeyControlMaxAggregateInputType
  }

  export type KeyControlGroupByOutputType = {
    id: string
    entryId: string
    keyLocation: string
    deliveredTo: string | null
    deliveredAt: Date | null
    returnedBy: string | null
    returnedAt: Date | null
    observations: string | null
    createdAt: Date
    updatedAt: Date
    _count: KeyControlCountAggregateOutputType | null
    _min: KeyControlMinAggregateOutputType | null
    _max: KeyControlMaxAggregateOutputType | null
  }

  type GetKeyControlGroupByPayload<T extends KeyControlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyControlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyControlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyControlGroupByOutputType[P]>
            : GetScalarType<T[P], KeyControlGroupByOutputType[P]>
        }
      >
    >


  export type KeyControlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    keyLocation?: boolean
    deliveredTo?: boolean
    deliveredAt?: boolean
    returnedBy?: boolean
    returnedAt?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyControl"]>

  export type KeyControlSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    keyLocation?: boolean
    deliveredTo?: boolean
    deliveredAt?: boolean
    returnedBy?: boolean
    returnedAt?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyControl"]>

  export type KeyControlSelectScalar = {
    id?: boolean
    entryId?: boolean
    keyLocation?: boolean
    deliveredTo?: boolean
    deliveredAt?: boolean
    returnedBy?: boolean
    returnedAt?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KeyControlInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
  }
  export type KeyControlIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
  }

  export type $KeyControlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeyControl"
    objects: {
      entry: Prisma.$VehicleEntryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entryId: string
      keyLocation: string
      deliveredTo: string | null
      deliveredAt: Date | null
      returnedBy: string | null
      returnedAt: Date | null
      observations: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["keyControl"]>
    composites: {}
  }

  type KeyControlGetPayload<S extends boolean | null | undefined | KeyControlDefaultArgs> = $Result.GetResult<Prisma.$KeyControlPayload, S>

  type KeyControlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KeyControlFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KeyControlCountAggregateInputType | true
    }

  export interface KeyControlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeyControl'], meta: { name: 'KeyControl' } }
    /**
     * Find zero or one KeyControl that matches the filter.
     * @param {KeyControlFindUniqueArgs} args - Arguments to find a KeyControl
     * @example
     * // Get one KeyControl
     * const keyControl = await prisma.keyControl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeyControlFindUniqueArgs>(args: SelectSubset<T, KeyControlFindUniqueArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KeyControl that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KeyControlFindUniqueOrThrowArgs} args - Arguments to find a KeyControl
     * @example
     * // Get one KeyControl
     * const keyControl = await prisma.keyControl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeyControlFindUniqueOrThrowArgs>(args: SelectSubset<T, KeyControlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KeyControl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlFindFirstArgs} args - Arguments to find a KeyControl
     * @example
     * // Get one KeyControl
     * const keyControl = await prisma.keyControl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeyControlFindFirstArgs>(args?: SelectSubset<T, KeyControlFindFirstArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KeyControl that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlFindFirstOrThrowArgs} args - Arguments to find a KeyControl
     * @example
     * // Get one KeyControl
     * const keyControl = await prisma.keyControl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeyControlFindFirstOrThrowArgs>(args?: SelectSubset<T, KeyControlFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KeyControls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeyControls
     * const keyControls = await prisma.keyControl.findMany()
     * 
     * // Get first 10 KeyControls
     * const keyControls = await prisma.keyControl.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyControlWithIdOnly = await prisma.keyControl.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeyControlFindManyArgs>(args?: SelectSubset<T, KeyControlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KeyControl.
     * @param {KeyControlCreateArgs} args - Arguments to create a KeyControl.
     * @example
     * // Create one KeyControl
     * const KeyControl = await prisma.keyControl.create({
     *   data: {
     *     // ... data to create a KeyControl
     *   }
     * })
     * 
     */
    create<T extends KeyControlCreateArgs>(args: SelectSubset<T, KeyControlCreateArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KeyControls.
     * @param {KeyControlCreateManyArgs} args - Arguments to create many KeyControls.
     * @example
     * // Create many KeyControls
     * const keyControl = await prisma.keyControl.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeyControlCreateManyArgs>(args?: SelectSubset<T, KeyControlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeyControls and returns the data saved in the database.
     * @param {KeyControlCreateManyAndReturnArgs} args - Arguments to create many KeyControls.
     * @example
     * // Create many KeyControls
     * const keyControl = await prisma.keyControl.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeyControls and only return the `id`
     * const keyControlWithIdOnly = await prisma.keyControl.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeyControlCreateManyAndReturnArgs>(args?: SelectSubset<T, KeyControlCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KeyControl.
     * @param {KeyControlDeleteArgs} args - Arguments to delete one KeyControl.
     * @example
     * // Delete one KeyControl
     * const KeyControl = await prisma.keyControl.delete({
     *   where: {
     *     // ... filter to delete one KeyControl
     *   }
     * })
     * 
     */
    delete<T extends KeyControlDeleteArgs>(args: SelectSubset<T, KeyControlDeleteArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KeyControl.
     * @param {KeyControlUpdateArgs} args - Arguments to update one KeyControl.
     * @example
     * // Update one KeyControl
     * const keyControl = await prisma.keyControl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeyControlUpdateArgs>(args: SelectSubset<T, KeyControlUpdateArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KeyControls.
     * @param {KeyControlDeleteManyArgs} args - Arguments to filter KeyControls to delete.
     * @example
     * // Delete a few KeyControls
     * const { count } = await prisma.keyControl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeyControlDeleteManyArgs>(args?: SelectSubset<T, KeyControlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyControls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeyControls
     * const keyControl = await prisma.keyControl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeyControlUpdateManyArgs>(args: SelectSubset<T, KeyControlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KeyControl.
     * @param {KeyControlUpsertArgs} args - Arguments to update or create a KeyControl.
     * @example
     * // Update or create a KeyControl
     * const keyControl = await prisma.keyControl.upsert({
     *   create: {
     *     // ... data to create a KeyControl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeyControl we want to update
     *   }
     * })
     */
    upsert<T extends KeyControlUpsertArgs>(args: SelectSubset<T, KeyControlUpsertArgs<ExtArgs>>): Prisma__KeyControlClient<$Result.GetResult<Prisma.$KeyControlPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KeyControls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlCountArgs} args - Arguments to filter KeyControls to count.
     * @example
     * // Count the number of KeyControls
     * const count = await prisma.keyControl.count({
     *   where: {
     *     // ... the filter for the KeyControls we want to count
     *   }
     * })
    **/
    count<T extends KeyControlCountArgs>(
      args?: Subset<T, KeyControlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyControlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeyControl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyControlAggregateArgs>(args: Subset<T, KeyControlAggregateArgs>): Prisma.PrismaPromise<GetKeyControlAggregateType<T>>

    /**
     * Group by KeyControl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyControlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyControlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyControlGroupByArgs['orderBy'] }
        : { orderBy?: KeyControlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyControlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyControlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeyControl model
   */
  readonly fields: KeyControlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeyControl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyControlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entry<T extends VehicleEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleEntryDefaultArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KeyControl model
   */ 
  interface KeyControlFieldRefs {
    readonly id: FieldRef<"KeyControl", 'String'>
    readonly entryId: FieldRef<"KeyControl", 'String'>
    readonly keyLocation: FieldRef<"KeyControl", 'String'>
    readonly deliveredTo: FieldRef<"KeyControl", 'String'>
    readonly deliveredAt: FieldRef<"KeyControl", 'DateTime'>
    readonly returnedBy: FieldRef<"KeyControl", 'String'>
    readonly returnedAt: FieldRef<"KeyControl", 'DateTime'>
    readonly observations: FieldRef<"KeyControl", 'String'>
    readonly createdAt: FieldRef<"KeyControl", 'DateTime'>
    readonly updatedAt: FieldRef<"KeyControl", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KeyControl findUnique
   */
  export type KeyControlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter, which KeyControl to fetch.
     */
    where: KeyControlWhereUniqueInput
  }

  /**
   * KeyControl findUniqueOrThrow
   */
  export type KeyControlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter, which KeyControl to fetch.
     */
    where: KeyControlWhereUniqueInput
  }

  /**
   * KeyControl findFirst
   */
  export type KeyControlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter, which KeyControl to fetch.
     */
    where?: KeyControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyControls to fetch.
     */
    orderBy?: KeyControlOrderByWithRelationInput | KeyControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyControls.
     */
    cursor?: KeyControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyControls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyControls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyControls.
     */
    distinct?: KeyControlScalarFieldEnum | KeyControlScalarFieldEnum[]
  }

  /**
   * KeyControl findFirstOrThrow
   */
  export type KeyControlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter, which KeyControl to fetch.
     */
    where?: KeyControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyControls to fetch.
     */
    orderBy?: KeyControlOrderByWithRelationInput | KeyControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyControls.
     */
    cursor?: KeyControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyControls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyControls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyControls.
     */
    distinct?: KeyControlScalarFieldEnum | KeyControlScalarFieldEnum[]
  }

  /**
   * KeyControl findMany
   */
  export type KeyControlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter, which KeyControls to fetch.
     */
    where?: KeyControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyControls to fetch.
     */
    orderBy?: KeyControlOrderByWithRelationInput | KeyControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeyControls.
     */
    cursor?: KeyControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyControls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyControls.
     */
    skip?: number
    distinct?: KeyControlScalarFieldEnum | KeyControlScalarFieldEnum[]
  }

  /**
   * KeyControl create
   */
  export type KeyControlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * The data needed to create a KeyControl.
     */
    data: XOR<KeyControlCreateInput, KeyControlUncheckedCreateInput>
  }

  /**
   * KeyControl createMany
   */
  export type KeyControlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeyControls.
     */
    data: KeyControlCreateManyInput | KeyControlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeyControl createManyAndReturn
   */
  export type KeyControlCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KeyControls.
     */
    data: KeyControlCreateManyInput | KeyControlCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeyControl update
   */
  export type KeyControlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * The data needed to update a KeyControl.
     */
    data: XOR<KeyControlUpdateInput, KeyControlUncheckedUpdateInput>
    /**
     * Choose, which KeyControl to update.
     */
    where: KeyControlWhereUniqueInput
  }

  /**
   * KeyControl updateMany
   */
  export type KeyControlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeyControls.
     */
    data: XOR<KeyControlUpdateManyMutationInput, KeyControlUncheckedUpdateManyInput>
    /**
     * Filter which KeyControls to update
     */
    where?: KeyControlWhereInput
  }

  /**
   * KeyControl upsert
   */
  export type KeyControlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * The filter to search for the KeyControl to update in case it exists.
     */
    where: KeyControlWhereUniqueInput
    /**
     * In case the KeyControl found by the `where` argument doesn't exist, create a new KeyControl with this data.
     */
    create: XOR<KeyControlCreateInput, KeyControlUncheckedCreateInput>
    /**
     * In case the KeyControl was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyControlUpdateInput, KeyControlUncheckedUpdateInput>
  }

  /**
   * KeyControl delete
   */
  export type KeyControlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
    /**
     * Filter which KeyControl to delete.
     */
    where: KeyControlWhereUniqueInput
  }

  /**
   * KeyControl deleteMany
   */
  export type KeyControlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyControls to delete
     */
    where?: KeyControlWhereInput
  }

  /**
   * KeyControl without action
   */
  export type KeyControlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyControl
     */
    select?: KeyControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyControlInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrder
   */

  export type AggregateWorkOrder = {
    _count: WorkOrderCountAggregateOutputType | null
    _avg: WorkOrderAvgAggregateOutputType | null
    _sum: WorkOrderSumAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  export type WorkOrderAvgAggregateOutputType = {
    estimatedHours: number | null
    totalHours: number | null
  }

  export type WorkOrderSumAggregateOutputType = {
    estimatedHours: number | null
    totalHours: number | null
  }

  export type WorkOrderMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    vehicleId: string | null
    entryId: string | null
    workshopId: string | null
    workType: string | null
    priority: string | null
    description: string | null
    estimatedHours: number | null
    assignedToId: string | null
    currentStatus: string | null
    startedAt: Date | null
    completedAt: Date | null
    totalHours: number | null
    observations: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    vehicleId: string | null
    entryId: string | null
    workshopId: string | null
    workType: string | null
    priority: string | null
    description: string | null
    estimatedHours: number | null
    assignedToId: string | null
    currentStatus: string | null
    startedAt: Date | null
    completedAt: Date | null
    totalHours: number | null
    observations: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkOrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    vehicleId: number
    entryId: number
    workshopId: number
    workType: number
    priority: number
    description: number
    estimatedHours: number
    assignedToId: number
    currentStatus: number
    startedAt: number
    completedAt: number
    totalHours: number
    observations: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkOrderAvgAggregateInputType = {
    estimatedHours?: true
    totalHours?: true
  }

  export type WorkOrderSumAggregateInputType = {
    estimatedHours?: true
    totalHours?: true
  }

  export type WorkOrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    vehicleId?: true
    entryId?: true
    workshopId?: true
    workType?: true
    priority?: true
    description?: true
    estimatedHours?: true
    assignedToId?: true
    currentStatus?: true
    startedAt?: true
    completedAt?: true
    totalHours?: true
    observations?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    vehicleId?: true
    entryId?: true
    workshopId?: true
    workType?: true
    priority?: true
    description?: true
    estimatedHours?: true
    assignedToId?: true
    currentStatus?: true
    startedAt?: true
    completedAt?: true
    totalHours?: true
    observations?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkOrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    vehicleId?: true
    entryId?: true
    workshopId?: true
    workType?: true
    priority?: true
    description?: true
    estimatedHours?: true
    assignedToId?: true
    currentStatus?: true
    startedAt?: true
    completedAt?: true
    totalHours?: true
    observations?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrder to aggregate.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrders
    **/
    _count?: true | WorkOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderMaxAggregateInputType
  }

  export type GetWorkOrderAggregateType<T extends WorkOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrder[P]>
      : GetScalarType<T[P], AggregateWorkOrder[P]>
  }




  export type WorkOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithAggregationInput | WorkOrderOrderByWithAggregationInput[]
    by: WorkOrderScalarFieldEnum[] | WorkOrderScalarFieldEnum
    having?: WorkOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderCountAggregateInputType | true
    _avg?: WorkOrderAvgAggregateInputType
    _sum?: WorkOrderSumAggregateInputType
    _min?: WorkOrderMinAggregateInputType
    _max?: WorkOrderMaxAggregateInputType
  }

  export type WorkOrderGroupByOutputType = {
    id: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority: string
    description: string
    estimatedHours: number | null
    assignedToId: string | null
    currentStatus: string
    startedAt: Date | null
    completedAt: Date | null
    totalHours: number | null
    observations: string | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: WorkOrderCountAggregateOutputType | null
    _avg: WorkOrderAvgAggregateOutputType | null
    _sum: WorkOrderSumAggregateOutputType | null
    _min: WorkOrderMinAggregateOutputType | null
    _max: WorkOrderMaxAggregateOutputType | null
  }

  type GetWorkOrderGroupByPayload<T extends WorkOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    vehicleId?: boolean
    entryId?: boolean
    workshopId?: boolean
    workType?: boolean
    priority?: boolean
    description?: boolean
    estimatedHours?: boolean
    assignedToId?: boolean
    currentStatus?: boolean
    startedAt?: boolean
    completedAt?: boolean
    totalHours?: boolean
    observations?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    statuses?: boolean | WorkOrder$statusesArgs<ExtArgs>
    photos?: boolean | WorkOrder$photosArgs<ExtArgs>
    spareParts?: boolean | WorkOrder$sparePartsArgs<ExtArgs>
    pauses?: boolean | WorkOrder$pausesArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    vehicleId?: boolean
    entryId?: boolean
    workshopId?: boolean
    workType?: boolean
    priority?: boolean
    description?: boolean
    estimatedHours?: boolean
    assignedToId?: boolean
    currentStatus?: boolean
    startedAt?: boolean
    completedAt?: boolean
    totalHours?: boolean
    observations?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrder"]>

  export type WorkOrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    vehicleId?: boolean
    entryId?: boolean
    workshopId?: boolean
    workType?: boolean
    priority?: boolean
    description?: boolean
    estimatedHours?: boolean
    assignedToId?: boolean
    currentStatus?: boolean
    startedAt?: boolean
    completedAt?: boolean
    totalHours?: boolean
    observations?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    statuses?: boolean | WorkOrder$statusesArgs<ExtArgs>
    photos?: boolean | WorkOrder$photosArgs<ExtArgs>
    spareParts?: boolean | WorkOrder$sparePartsArgs<ExtArgs>
    pauses?: boolean | WorkOrder$pausesArgs<ExtArgs>
    _count?: boolean | WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
    entry?: boolean | VehicleEntryDefaultArgs<ExtArgs>
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
    assignedTo?: boolean | WorkOrder$assignedToArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrder"
    objects: {
      vehicle: Prisma.$VehiclePayload<ExtArgs>
      entry: Prisma.$VehicleEntryPayload<ExtArgs>
      workshop: Prisma.$WorkshopPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      statuses: Prisma.$WorkOrderStatusPayload<ExtArgs>[]
      photos: Prisma.$WorkOrderPhotoPayload<ExtArgs>[]
      spareParts: Prisma.$WorkOrderSparePartPayload<ExtArgs>[]
      pauses: Prisma.$WorkPausePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      vehicleId: string
      entryId: string
      workshopId: string
      workType: string
      priority: string
      description: string
      estimatedHours: number | null
      assignedToId: string | null
      currentStatus: string
      startedAt: Date | null
      completedAt: Date | null
      totalHours: number | null
      observations: string | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workOrder"]>
    composites: {}
  }

  type WorkOrderGetPayload<S extends boolean | null | undefined | WorkOrderDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPayload, S>

  type WorkOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkOrderCountAggregateInputType | true
    }

  export interface WorkOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrder'], meta: { name: 'WorkOrder' } }
    /**
     * Find zero or one WorkOrder that matches the filter.
     * @param {WorkOrderFindUniqueArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderFindUniqueArgs>(args: SelectSubset<T, WorkOrderFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkOrderFindUniqueOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderFindFirstArgs>(args?: SelectSubset<T, WorkOrderFindFirstArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindFirstOrThrowArgs} args - Arguments to find a WorkOrder
     * @example
     * // Get one WorkOrder
     * const workOrder = await prisma.workOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrders
     * const workOrders = await prisma.workOrder.findMany()
     * 
     * // Get first 10 WorkOrders
     * const workOrders = await prisma.workOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderFindManyArgs>(args?: SelectSubset<T, WorkOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkOrder.
     * @param {WorkOrderCreateArgs} args - Arguments to create a WorkOrder.
     * @example
     * // Create one WorkOrder
     * const WorkOrder = await prisma.workOrder.create({
     *   data: {
     *     // ... data to create a WorkOrder
     *   }
     * })
     * 
     */
    create<T extends WorkOrderCreateArgs>(args: SelectSubset<T, WorkOrderCreateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkOrders.
     * @param {WorkOrderCreateManyArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderCreateManyArgs>(args?: SelectSubset<T, WorkOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrders and returns the data saved in the database.
     * @param {WorkOrderCreateManyAndReturnArgs} args - Arguments to create many WorkOrders.
     * @example
     * // Create many WorkOrders
     * const workOrder = await prisma.workOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrders and only return the `id`
     * const workOrderWithIdOnly = await prisma.workOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkOrder.
     * @param {WorkOrderDeleteArgs} args - Arguments to delete one WorkOrder.
     * @example
     * // Delete one WorkOrder
     * const WorkOrder = await prisma.workOrder.delete({
     *   where: {
     *     // ... filter to delete one WorkOrder
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderDeleteArgs>(args: SelectSubset<T, WorkOrderDeleteArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkOrder.
     * @param {WorkOrderUpdateArgs} args - Arguments to update one WorkOrder.
     * @example
     * // Update one WorkOrder
     * const workOrder = await prisma.workOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderUpdateArgs>(args: SelectSubset<T, WorkOrderUpdateArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkOrders.
     * @param {WorkOrderDeleteManyArgs} args - Arguments to filter WorkOrders to delete.
     * @example
     * // Delete a few WorkOrders
     * const { count } = await prisma.workOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderDeleteManyArgs>(args?: SelectSubset<T, WorkOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrders
     * const workOrder = await prisma.workOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderUpdateManyArgs>(args: SelectSubset<T, WorkOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkOrder.
     * @param {WorkOrderUpsertArgs} args - Arguments to update or create a WorkOrder.
     * @example
     * // Update or create a WorkOrder
     * const workOrder = await prisma.workOrder.upsert({
     *   create: {
     *     // ... data to create a WorkOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrder we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderUpsertArgs>(args: SelectSubset<T, WorkOrderUpsertArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderCountArgs} args - Arguments to filter WorkOrders to count.
     * @example
     * // Count the number of WorkOrders
     * const count = await prisma.workOrder.count({
     *   where: {
     *     // ... the filter for the WorkOrders we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderCountArgs>(
      args?: Subset<T, WorkOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderAggregateArgs>(args: Subset<T, WorkOrderAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderAggregateType<T>>

    /**
     * Group by WorkOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrder model
   */
  readonly fields: WorkOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vehicle<T extends VehicleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleDefaultArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    entry<T extends VehicleEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleEntryDefaultArgs<ExtArgs>>): Prisma__VehicleEntryClient<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workshop<T extends WorkshopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkshopDefaultArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedTo<T extends WorkOrder$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    statuses<T extends WorkOrder$statusesArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$statusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findMany"> | Null>
    photos<T extends WorkOrder$photosArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findMany"> | Null>
    spareParts<T extends WorkOrder$sparePartsArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$sparePartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findMany"> | Null>
    pauses<T extends WorkOrder$pausesArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrder$pausesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrder model
   */ 
  interface WorkOrderFieldRefs {
    readonly id: FieldRef<"WorkOrder", 'String'>
    readonly orderNumber: FieldRef<"WorkOrder", 'String'>
    readonly vehicleId: FieldRef<"WorkOrder", 'String'>
    readonly entryId: FieldRef<"WorkOrder", 'String'>
    readonly workshopId: FieldRef<"WorkOrder", 'String'>
    readonly workType: FieldRef<"WorkOrder", 'String'>
    readonly priority: FieldRef<"WorkOrder", 'String'>
    readonly description: FieldRef<"WorkOrder", 'String'>
    readonly estimatedHours: FieldRef<"WorkOrder", 'Float'>
    readonly assignedToId: FieldRef<"WorkOrder", 'String'>
    readonly currentStatus: FieldRef<"WorkOrder", 'String'>
    readonly startedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly completedAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly totalHours: FieldRef<"WorkOrder", 'Float'>
    readonly observations: FieldRef<"WorkOrder", 'String'>
    readonly createdById: FieldRef<"WorkOrder", 'String'>
    readonly createdAt: FieldRef<"WorkOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrder findUnique
   */
  export type WorkOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findUniqueOrThrow
   */
  export type WorkOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder findFirst
   */
  export type WorkOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findFirstOrThrow
   */
  export type WorkOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrder to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrders.
     */
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder findMany
   */
  export type WorkOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrders to fetch.
     */
    where?: WorkOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrders to fetch.
     */
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrders.
     */
    cursor?: WorkOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrders.
     */
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * WorkOrder create
   */
  export type WorkOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrder.
     */
    data: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
  }

  /**
   * WorkOrder createMany
   */
  export type WorkOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrder createManyAndReturn
   */
  export type WorkOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkOrders.
     */
    data: WorkOrderCreateManyInput | WorkOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrder update
   */
  export type WorkOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrder.
     */
    data: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
    /**
     * Choose, which WorkOrder to update.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder updateMany
   */
  export type WorkOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrders.
     */
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrders to update
     */
    where?: WorkOrderWhereInput
  }

  /**
   * WorkOrder upsert
   */
  export type WorkOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrder to update in case it exists.
     */
    where: WorkOrderWhereUniqueInput
    /**
     * In case the WorkOrder found by the `where` argument doesn't exist, create a new WorkOrder with this data.
     */
    create: XOR<WorkOrderCreateInput, WorkOrderUncheckedCreateInput>
    /**
     * In case the WorkOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderUpdateInput, WorkOrderUncheckedUpdateInput>
  }

  /**
   * WorkOrder delete
   */
  export type WorkOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    /**
     * Filter which WorkOrder to delete.
     */
    where: WorkOrderWhereUniqueInput
  }

  /**
   * WorkOrder deleteMany
   */
  export type WorkOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrders to delete
     */
    where?: WorkOrderWhereInput
  }

  /**
   * WorkOrder.assignedTo
   */
  export type WorkOrder$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkOrder.statuses
   */
  export type WorkOrder$statusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    where?: WorkOrderStatusWhereInput
    orderBy?: WorkOrderStatusOrderByWithRelationInput | WorkOrderStatusOrderByWithRelationInput[]
    cursor?: WorkOrderStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderStatusScalarFieldEnum | WorkOrderStatusScalarFieldEnum[]
  }

  /**
   * WorkOrder.photos
   */
  export type WorkOrder$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    where?: WorkOrderPhotoWhereInput
    orderBy?: WorkOrderPhotoOrderByWithRelationInput | WorkOrderPhotoOrderByWithRelationInput[]
    cursor?: WorkOrderPhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderPhotoScalarFieldEnum | WorkOrderPhotoScalarFieldEnum[]
  }

  /**
   * WorkOrder.spareParts
   */
  export type WorkOrder$sparePartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    where?: WorkOrderSparePartWhereInput
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    cursor?: WorkOrderSparePartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderSparePartScalarFieldEnum | WorkOrderSparePartScalarFieldEnum[]
  }

  /**
   * WorkOrder.pauses
   */
  export type WorkOrder$pausesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    where?: WorkPauseWhereInput
    orderBy?: WorkPauseOrderByWithRelationInput | WorkPauseOrderByWithRelationInput[]
    cursor?: WorkPauseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkPauseScalarFieldEnum | WorkPauseScalarFieldEnum[]
  }

  /**
   * WorkOrder without action
   */
  export type WorkOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderStatus
   */

  export type AggregateWorkOrderStatus = {
    _count: WorkOrderStatusCountAggregateOutputType | null
    _min: WorkOrderStatusMinAggregateOutputType | null
    _max: WorkOrderStatusMaxAggregateOutputType | null
  }

  export type WorkOrderStatusMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    status: string | null
    observations: string | null
    changedById: string | null
    changedAt: Date | null
  }

  export type WorkOrderStatusMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    status: string | null
    observations: string | null
    changedById: string | null
    changedAt: Date | null
  }

  export type WorkOrderStatusCountAggregateOutputType = {
    id: number
    workOrderId: number
    status: number
    observations: number
    changedById: number
    changedAt: number
    _all: number
  }


  export type WorkOrderStatusMinAggregateInputType = {
    id?: true
    workOrderId?: true
    status?: true
    observations?: true
    changedById?: true
    changedAt?: true
  }

  export type WorkOrderStatusMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    status?: true
    observations?: true
    changedById?: true
    changedAt?: true
  }

  export type WorkOrderStatusCountAggregateInputType = {
    id?: true
    workOrderId?: true
    status?: true
    observations?: true
    changedById?: true
    changedAt?: true
    _all?: true
  }

  export type WorkOrderStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderStatus to aggregate.
     */
    where?: WorkOrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderStatuses to fetch.
     */
    orderBy?: WorkOrderStatusOrderByWithRelationInput | WorkOrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderStatuses
    **/
    _count?: true | WorkOrderStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderStatusMaxAggregateInputType
  }

  export type GetWorkOrderStatusAggregateType<T extends WorkOrderStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderStatus[P]>
      : GetScalarType<T[P], AggregateWorkOrderStatus[P]>
  }




  export type WorkOrderStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderStatusWhereInput
    orderBy?: WorkOrderStatusOrderByWithAggregationInput | WorkOrderStatusOrderByWithAggregationInput[]
    by: WorkOrderStatusScalarFieldEnum[] | WorkOrderStatusScalarFieldEnum
    having?: WorkOrderStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderStatusCountAggregateInputType | true
    _min?: WorkOrderStatusMinAggregateInputType
    _max?: WorkOrderStatusMaxAggregateInputType
  }

  export type WorkOrderStatusGroupByOutputType = {
    id: string
    workOrderId: string
    status: string
    observations: string | null
    changedById: string
    changedAt: Date
    _count: WorkOrderStatusCountAggregateOutputType | null
    _min: WorkOrderStatusMinAggregateOutputType | null
    _max: WorkOrderStatusMaxAggregateOutputType | null
  }

  type GetWorkOrderStatusGroupByPayload<T extends WorkOrderStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderStatusGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderStatusGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    status?: boolean
    observations?: boolean
    changedById?: boolean
    changedAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderStatus"]>

  export type WorkOrderStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    status?: boolean
    observations?: boolean
    changedById?: boolean
    changedAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderStatus"]>

  export type WorkOrderStatusSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    status?: boolean
    observations?: boolean
    changedById?: boolean
    changedAt?: boolean
  }

  export type WorkOrderStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }
  export type WorkOrderStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }

  export type $WorkOrderStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderStatus"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      status: string
      observations: string | null
      changedById: string
      changedAt: Date
    }, ExtArgs["result"]["workOrderStatus"]>
    composites: {}
  }

  type WorkOrderStatusGetPayload<S extends boolean | null | undefined | WorkOrderStatusDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderStatusPayload, S>

  type WorkOrderStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkOrderStatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkOrderStatusCountAggregateInputType | true
    }

  export interface WorkOrderStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderStatus'], meta: { name: 'WorkOrderStatus' } }
    /**
     * Find zero or one WorkOrderStatus that matches the filter.
     * @param {WorkOrderStatusFindUniqueArgs} args - Arguments to find a WorkOrderStatus
     * @example
     * // Get one WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderStatusFindUniqueArgs>(args: SelectSubset<T, WorkOrderStatusFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkOrderStatus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkOrderStatusFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderStatus
     * @example
     * // Get one WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkOrderStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusFindFirstArgs} args - Arguments to find a WorkOrderStatus
     * @example
     * // Get one WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderStatusFindFirstArgs>(args?: SelectSubset<T, WorkOrderStatusFindFirstArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkOrderStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusFindFirstOrThrowArgs} args - Arguments to find a WorkOrderStatus
     * @example
     * // Get one WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkOrderStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderStatuses
     * const workOrderStatuses = await prisma.workOrderStatus.findMany()
     * 
     * // Get first 10 WorkOrderStatuses
     * const workOrderStatuses = await prisma.workOrderStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderStatusWithIdOnly = await prisma.workOrderStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderStatusFindManyArgs>(args?: SelectSubset<T, WorkOrderStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkOrderStatus.
     * @param {WorkOrderStatusCreateArgs} args - Arguments to create a WorkOrderStatus.
     * @example
     * // Create one WorkOrderStatus
     * const WorkOrderStatus = await prisma.workOrderStatus.create({
     *   data: {
     *     // ... data to create a WorkOrderStatus
     *   }
     * })
     * 
     */
    create<T extends WorkOrderStatusCreateArgs>(args: SelectSubset<T, WorkOrderStatusCreateArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkOrderStatuses.
     * @param {WorkOrderStatusCreateManyArgs} args - Arguments to create many WorkOrderStatuses.
     * @example
     * // Create many WorkOrderStatuses
     * const workOrderStatus = await prisma.workOrderStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderStatusCreateManyArgs>(args?: SelectSubset<T, WorkOrderStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderStatuses and returns the data saved in the database.
     * @param {WorkOrderStatusCreateManyAndReturnArgs} args - Arguments to create many WorkOrderStatuses.
     * @example
     * // Create many WorkOrderStatuses
     * const workOrderStatus = await prisma.workOrderStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderStatuses and only return the `id`
     * const workOrderStatusWithIdOnly = await prisma.workOrderStatus.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkOrderStatus.
     * @param {WorkOrderStatusDeleteArgs} args - Arguments to delete one WorkOrderStatus.
     * @example
     * // Delete one WorkOrderStatus
     * const WorkOrderStatus = await prisma.workOrderStatus.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderStatus
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderStatusDeleteArgs>(args: SelectSubset<T, WorkOrderStatusDeleteArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkOrderStatus.
     * @param {WorkOrderStatusUpdateArgs} args - Arguments to update one WorkOrderStatus.
     * @example
     * // Update one WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderStatusUpdateArgs>(args: SelectSubset<T, WorkOrderStatusUpdateArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkOrderStatuses.
     * @param {WorkOrderStatusDeleteManyArgs} args - Arguments to filter WorkOrderStatuses to delete.
     * @example
     * // Delete a few WorkOrderStatuses
     * const { count } = await prisma.workOrderStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderStatusDeleteManyArgs>(args?: SelectSubset<T, WorkOrderStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderStatuses
     * const workOrderStatus = await prisma.workOrderStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderStatusUpdateManyArgs>(args: SelectSubset<T, WorkOrderStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkOrderStatus.
     * @param {WorkOrderStatusUpsertArgs} args - Arguments to update or create a WorkOrderStatus.
     * @example
     * // Update or create a WorkOrderStatus
     * const workOrderStatus = await prisma.workOrderStatus.upsert({
     *   create: {
     *     // ... data to create a WorkOrderStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderStatus we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderStatusUpsertArgs>(args: SelectSubset<T, WorkOrderStatusUpsertArgs<ExtArgs>>): Prisma__WorkOrderStatusClient<$Result.GetResult<Prisma.$WorkOrderStatusPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkOrderStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusCountArgs} args - Arguments to filter WorkOrderStatuses to count.
     * @example
     * // Count the number of WorkOrderStatuses
     * const count = await prisma.workOrderStatus.count({
     *   where: {
     *     // ... the filter for the WorkOrderStatuses we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderStatusCountArgs>(
      args?: Subset<T, WorkOrderStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderStatusAggregateArgs>(args: Subset<T, WorkOrderStatusAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderStatusAggregateType<T>>

    /**
     * Group by WorkOrderStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderStatusGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderStatus model
   */
  readonly fields: WorkOrderStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderStatus model
   */ 
  interface WorkOrderStatusFieldRefs {
    readonly id: FieldRef<"WorkOrderStatus", 'String'>
    readonly workOrderId: FieldRef<"WorkOrderStatus", 'String'>
    readonly status: FieldRef<"WorkOrderStatus", 'String'>
    readonly observations: FieldRef<"WorkOrderStatus", 'String'>
    readonly changedById: FieldRef<"WorkOrderStatus", 'String'>
    readonly changedAt: FieldRef<"WorkOrderStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderStatus findUnique
   */
  export type WorkOrderStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderStatus to fetch.
     */
    where: WorkOrderStatusWhereUniqueInput
  }

  /**
   * WorkOrderStatus findUniqueOrThrow
   */
  export type WorkOrderStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderStatus to fetch.
     */
    where: WorkOrderStatusWhereUniqueInput
  }

  /**
   * WorkOrderStatus findFirst
   */
  export type WorkOrderStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderStatus to fetch.
     */
    where?: WorkOrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderStatuses to fetch.
     */
    orderBy?: WorkOrderStatusOrderByWithRelationInput | WorkOrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderStatuses.
     */
    cursor?: WorkOrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderStatuses.
     */
    distinct?: WorkOrderStatusScalarFieldEnum | WorkOrderStatusScalarFieldEnum[]
  }

  /**
   * WorkOrderStatus findFirstOrThrow
   */
  export type WorkOrderStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderStatus to fetch.
     */
    where?: WorkOrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderStatuses to fetch.
     */
    orderBy?: WorkOrderStatusOrderByWithRelationInput | WorkOrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderStatuses.
     */
    cursor?: WorkOrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderStatuses.
     */
    distinct?: WorkOrderStatusScalarFieldEnum | WorkOrderStatusScalarFieldEnum[]
  }

  /**
   * WorkOrderStatus findMany
   */
  export type WorkOrderStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderStatuses to fetch.
     */
    where?: WorkOrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderStatuses to fetch.
     */
    orderBy?: WorkOrderStatusOrderByWithRelationInput | WorkOrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderStatuses.
     */
    cursor?: WorkOrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderStatuses.
     */
    skip?: number
    distinct?: WorkOrderStatusScalarFieldEnum | WorkOrderStatusScalarFieldEnum[]
  }

  /**
   * WorkOrderStatus create
   */
  export type WorkOrderStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderStatus.
     */
    data: XOR<WorkOrderStatusCreateInput, WorkOrderStatusUncheckedCreateInput>
  }

  /**
   * WorkOrderStatus createMany
   */
  export type WorkOrderStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderStatuses.
     */
    data: WorkOrderStatusCreateManyInput | WorkOrderStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderStatus createManyAndReturn
   */
  export type WorkOrderStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkOrderStatuses.
     */
    data: WorkOrderStatusCreateManyInput | WorkOrderStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderStatus update
   */
  export type WorkOrderStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderStatus.
     */
    data: XOR<WorkOrderStatusUpdateInput, WorkOrderStatusUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderStatus to update.
     */
    where: WorkOrderStatusWhereUniqueInput
  }

  /**
   * WorkOrderStatus updateMany
   */
  export type WorkOrderStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderStatuses.
     */
    data: XOR<WorkOrderStatusUpdateManyMutationInput, WorkOrderStatusUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderStatuses to update
     */
    where?: WorkOrderStatusWhereInput
  }

  /**
   * WorkOrderStatus upsert
   */
  export type WorkOrderStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderStatus to update in case it exists.
     */
    where: WorkOrderStatusWhereUniqueInput
    /**
     * In case the WorkOrderStatus found by the `where` argument doesn't exist, create a new WorkOrderStatus with this data.
     */
    create: XOR<WorkOrderStatusCreateInput, WorkOrderStatusUncheckedCreateInput>
    /**
     * In case the WorkOrderStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderStatusUpdateInput, WorkOrderStatusUncheckedUpdateInput>
  }

  /**
   * WorkOrderStatus delete
   */
  export type WorkOrderStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderStatus to delete.
     */
    where: WorkOrderStatusWhereUniqueInput
  }

  /**
   * WorkOrderStatus deleteMany
   */
  export type WorkOrderStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderStatuses to delete
     */
    where?: WorkOrderStatusWhereInput
  }

  /**
   * WorkOrderStatus without action
   */
  export type WorkOrderStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderStatus
     */
    select?: WorkOrderStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderStatusInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderPhoto
   */

  export type AggregateWorkOrderPhoto = {
    _count: WorkOrderPhotoCountAggregateOutputType | null
    _min: WorkOrderPhotoMinAggregateOutputType | null
    _max: WorkOrderPhotoMaxAggregateOutputType | null
  }

  export type WorkOrderPhotoMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    url: string | null
    description: string | null
    photoType: string | null
    uploadedAt: Date | null
  }

  export type WorkOrderPhotoMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    url: string | null
    description: string | null
    photoType: string | null
    uploadedAt: Date | null
  }

  export type WorkOrderPhotoCountAggregateOutputType = {
    id: number
    workOrderId: number
    url: number
    description: number
    photoType: number
    uploadedAt: number
    _all: number
  }


  export type WorkOrderPhotoMinAggregateInputType = {
    id?: true
    workOrderId?: true
    url?: true
    description?: true
    photoType?: true
    uploadedAt?: true
  }

  export type WorkOrderPhotoMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    url?: true
    description?: true
    photoType?: true
    uploadedAt?: true
  }

  export type WorkOrderPhotoCountAggregateInputType = {
    id?: true
    workOrderId?: true
    url?: true
    description?: true
    photoType?: true
    uploadedAt?: true
    _all?: true
  }

  export type WorkOrderPhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderPhoto to aggregate.
     */
    where?: WorkOrderPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderPhotos to fetch.
     */
    orderBy?: WorkOrderPhotoOrderByWithRelationInput | WorkOrderPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderPhotos
    **/
    _count?: true | WorkOrderPhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderPhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderPhotoMaxAggregateInputType
  }

  export type GetWorkOrderPhotoAggregateType<T extends WorkOrderPhotoAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderPhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderPhoto[P]>
      : GetScalarType<T[P], AggregateWorkOrderPhoto[P]>
  }




  export type WorkOrderPhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderPhotoWhereInput
    orderBy?: WorkOrderPhotoOrderByWithAggregationInput | WorkOrderPhotoOrderByWithAggregationInput[]
    by: WorkOrderPhotoScalarFieldEnum[] | WorkOrderPhotoScalarFieldEnum
    having?: WorkOrderPhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderPhotoCountAggregateInputType | true
    _min?: WorkOrderPhotoMinAggregateInputType
    _max?: WorkOrderPhotoMaxAggregateInputType
  }

  export type WorkOrderPhotoGroupByOutputType = {
    id: string
    workOrderId: string
    url: string
    description: string | null
    photoType: string
    uploadedAt: Date
    _count: WorkOrderPhotoCountAggregateOutputType | null
    _min: WorkOrderPhotoMinAggregateOutputType | null
    _max: WorkOrderPhotoMaxAggregateOutputType | null
  }

  type GetWorkOrderPhotoGroupByPayload<T extends WorkOrderPhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderPhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderPhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderPhotoGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderPhotoGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderPhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    url?: boolean
    description?: boolean
    photoType?: boolean
    uploadedAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderPhoto"]>

  export type WorkOrderPhotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    url?: boolean
    description?: boolean
    photoType?: boolean
    uploadedAt?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderPhoto"]>

  export type WorkOrderPhotoSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    url?: boolean
    description?: boolean
    photoType?: boolean
    uploadedAt?: boolean
  }

  export type WorkOrderPhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }
  export type WorkOrderPhotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }

  export type $WorkOrderPhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderPhoto"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      url: string
      description: string | null
      photoType: string
      uploadedAt: Date
    }, ExtArgs["result"]["workOrderPhoto"]>
    composites: {}
  }

  type WorkOrderPhotoGetPayload<S extends boolean | null | undefined | WorkOrderPhotoDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderPhotoPayload, S>

  type WorkOrderPhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkOrderPhotoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkOrderPhotoCountAggregateInputType | true
    }

  export interface WorkOrderPhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderPhoto'], meta: { name: 'WorkOrderPhoto' } }
    /**
     * Find zero or one WorkOrderPhoto that matches the filter.
     * @param {WorkOrderPhotoFindUniqueArgs} args - Arguments to find a WorkOrderPhoto
     * @example
     * // Get one WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderPhotoFindUniqueArgs>(args: SelectSubset<T, WorkOrderPhotoFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkOrderPhoto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkOrderPhotoFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderPhoto
     * @example
     * // Get one WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderPhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderPhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkOrderPhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoFindFirstArgs} args - Arguments to find a WorkOrderPhoto
     * @example
     * // Get one WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderPhotoFindFirstArgs>(args?: SelectSubset<T, WorkOrderPhotoFindFirstArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkOrderPhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoFindFirstOrThrowArgs} args - Arguments to find a WorkOrderPhoto
     * @example
     * // Get one WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderPhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderPhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkOrderPhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderPhotos
     * const workOrderPhotos = await prisma.workOrderPhoto.findMany()
     * 
     * // Get first 10 WorkOrderPhotos
     * const workOrderPhotos = await prisma.workOrderPhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderPhotoWithIdOnly = await prisma.workOrderPhoto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderPhotoFindManyArgs>(args?: SelectSubset<T, WorkOrderPhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkOrderPhoto.
     * @param {WorkOrderPhotoCreateArgs} args - Arguments to create a WorkOrderPhoto.
     * @example
     * // Create one WorkOrderPhoto
     * const WorkOrderPhoto = await prisma.workOrderPhoto.create({
     *   data: {
     *     // ... data to create a WorkOrderPhoto
     *   }
     * })
     * 
     */
    create<T extends WorkOrderPhotoCreateArgs>(args: SelectSubset<T, WorkOrderPhotoCreateArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkOrderPhotos.
     * @param {WorkOrderPhotoCreateManyArgs} args - Arguments to create many WorkOrderPhotos.
     * @example
     * // Create many WorkOrderPhotos
     * const workOrderPhoto = await prisma.workOrderPhoto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderPhotoCreateManyArgs>(args?: SelectSubset<T, WorkOrderPhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderPhotos and returns the data saved in the database.
     * @param {WorkOrderPhotoCreateManyAndReturnArgs} args - Arguments to create many WorkOrderPhotos.
     * @example
     * // Create many WorkOrderPhotos
     * const workOrderPhoto = await prisma.workOrderPhoto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderPhotos and only return the `id`
     * const workOrderPhotoWithIdOnly = await prisma.workOrderPhoto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderPhotoCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderPhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkOrderPhoto.
     * @param {WorkOrderPhotoDeleteArgs} args - Arguments to delete one WorkOrderPhoto.
     * @example
     * // Delete one WorkOrderPhoto
     * const WorkOrderPhoto = await prisma.workOrderPhoto.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderPhoto
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderPhotoDeleteArgs>(args: SelectSubset<T, WorkOrderPhotoDeleteArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkOrderPhoto.
     * @param {WorkOrderPhotoUpdateArgs} args - Arguments to update one WorkOrderPhoto.
     * @example
     * // Update one WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderPhotoUpdateArgs>(args: SelectSubset<T, WorkOrderPhotoUpdateArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkOrderPhotos.
     * @param {WorkOrderPhotoDeleteManyArgs} args - Arguments to filter WorkOrderPhotos to delete.
     * @example
     * // Delete a few WorkOrderPhotos
     * const { count } = await prisma.workOrderPhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderPhotoDeleteManyArgs>(args?: SelectSubset<T, WorkOrderPhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderPhotos
     * const workOrderPhoto = await prisma.workOrderPhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderPhotoUpdateManyArgs>(args: SelectSubset<T, WorkOrderPhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkOrderPhoto.
     * @param {WorkOrderPhotoUpsertArgs} args - Arguments to update or create a WorkOrderPhoto.
     * @example
     * // Update or create a WorkOrderPhoto
     * const workOrderPhoto = await prisma.workOrderPhoto.upsert({
     *   create: {
     *     // ... data to create a WorkOrderPhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderPhoto we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderPhotoUpsertArgs>(args: SelectSubset<T, WorkOrderPhotoUpsertArgs<ExtArgs>>): Prisma__WorkOrderPhotoClient<$Result.GetResult<Prisma.$WorkOrderPhotoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkOrderPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoCountArgs} args - Arguments to filter WorkOrderPhotos to count.
     * @example
     * // Count the number of WorkOrderPhotos
     * const count = await prisma.workOrderPhoto.count({
     *   where: {
     *     // ... the filter for the WorkOrderPhotos we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderPhotoCountArgs>(
      args?: Subset<T, WorkOrderPhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderPhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderPhotoAggregateArgs>(args: Subset<T, WorkOrderPhotoAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderPhotoAggregateType<T>>

    /**
     * Group by WorkOrderPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderPhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderPhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderPhotoGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderPhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderPhoto model
   */
  readonly fields: WorkOrderPhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderPhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderPhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderPhoto model
   */ 
  interface WorkOrderPhotoFieldRefs {
    readonly id: FieldRef<"WorkOrderPhoto", 'String'>
    readonly workOrderId: FieldRef<"WorkOrderPhoto", 'String'>
    readonly url: FieldRef<"WorkOrderPhoto", 'String'>
    readonly description: FieldRef<"WorkOrderPhoto", 'String'>
    readonly photoType: FieldRef<"WorkOrderPhoto", 'String'>
    readonly uploadedAt: FieldRef<"WorkOrderPhoto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderPhoto findUnique
   */
  export type WorkOrderPhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderPhoto to fetch.
     */
    where: WorkOrderPhotoWhereUniqueInput
  }

  /**
   * WorkOrderPhoto findUniqueOrThrow
   */
  export type WorkOrderPhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderPhoto to fetch.
     */
    where: WorkOrderPhotoWhereUniqueInput
  }

  /**
   * WorkOrderPhoto findFirst
   */
  export type WorkOrderPhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderPhoto to fetch.
     */
    where?: WorkOrderPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderPhotos to fetch.
     */
    orderBy?: WorkOrderPhotoOrderByWithRelationInput | WorkOrderPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderPhotos.
     */
    cursor?: WorkOrderPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderPhotos.
     */
    distinct?: WorkOrderPhotoScalarFieldEnum | WorkOrderPhotoScalarFieldEnum[]
  }

  /**
   * WorkOrderPhoto findFirstOrThrow
   */
  export type WorkOrderPhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderPhoto to fetch.
     */
    where?: WorkOrderPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderPhotos to fetch.
     */
    orderBy?: WorkOrderPhotoOrderByWithRelationInput | WorkOrderPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderPhotos.
     */
    cursor?: WorkOrderPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderPhotos.
     */
    distinct?: WorkOrderPhotoScalarFieldEnum | WorkOrderPhotoScalarFieldEnum[]
  }

  /**
   * WorkOrderPhoto findMany
   */
  export type WorkOrderPhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderPhotos to fetch.
     */
    where?: WorkOrderPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderPhotos to fetch.
     */
    orderBy?: WorkOrderPhotoOrderByWithRelationInput | WorkOrderPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderPhotos.
     */
    cursor?: WorkOrderPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderPhotos.
     */
    skip?: number
    distinct?: WorkOrderPhotoScalarFieldEnum | WorkOrderPhotoScalarFieldEnum[]
  }

  /**
   * WorkOrderPhoto create
   */
  export type WorkOrderPhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderPhoto.
     */
    data: XOR<WorkOrderPhotoCreateInput, WorkOrderPhotoUncheckedCreateInput>
  }

  /**
   * WorkOrderPhoto createMany
   */
  export type WorkOrderPhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderPhotos.
     */
    data: WorkOrderPhotoCreateManyInput | WorkOrderPhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderPhoto createManyAndReturn
   */
  export type WorkOrderPhotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkOrderPhotos.
     */
    data: WorkOrderPhotoCreateManyInput | WorkOrderPhotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderPhoto update
   */
  export type WorkOrderPhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderPhoto.
     */
    data: XOR<WorkOrderPhotoUpdateInput, WorkOrderPhotoUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderPhoto to update.
     */
    where: WorkOrderPhotoWhereUniqueInput
  }

  /**
   * WorkOrderPhoto updateMany
   */
  export type WorkOrderPhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderPhotos.
     */
    data: XOR<WorkOrderPhotoUpdateManyMutationInput, WorkOrderPhotoUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderPhotos to update
     */
    where?: WorkOrderPhotoWhereInput
  }

  /**
   * WorkOrderPhoto upsert
   */
  export type WorkOrderPhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderPhoto to update in case it exists.
     */
    where: WorkOrderPhotoWhereUniqueInput
    /**
     * In case the WorkOrderPhoto found by the `where` argument doesn't exist, create a new WorkOrderPhoto with this data.
     */
    create: XOR<WorkOrderPhotoCreateInput, WorkOrderPhotoUncheckedCreateInput>
    /**
     * In case the WorkOrderPhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderPhotoUpdateInput, WorkOrderPhotoUncheckedUpdateInput>
  }

  /**
   * WorkOrderPhoto delete
   */
  export type WorkOrderPhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderPhoto to delete.
     */
    where: WorkOrderPhotoWhereUniqueInput
  }

  /**
   * WorkOrderPhoto deleteMany
   */
  export type WorkOrderPhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderPhotos to delete
     */
    where?: WorkOrderPhotoWhereInput
  }

  /**
   * WorkOrderPhoto without action
   */
  export type WorkOrderPhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderPhoto
     */
    select?: WorkOrderPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderPhotoInclude<ExtArgs> | null
  }


  /**
   * Model WorkPause
   */

  export type AggregateWorkPause = {
    _count: WorkPauseCountAggregateOutputType | null
    _avg: WorkPauseAvgAggregateOutputType | null
    _sum: WorkPauseSumAggregateOutputType | null
    _min: WorkPauseMinAggregateOutputType | null
    _max: WorkPauseMaxAggregateOutputType | null
  }

  export type WorkPauseAvgAggregateOutputType = {
    duration: number | null
  }

  export type WorkPauseSumAggregateOutputType = {
    duration: number | null
  }

  export type WorkPauseMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    reason: string | null
    pausedAt: Date | null
    resumedAt: Date | null
    duration: number | null
    observations: string | null
  }

  export type WorkPauseMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    reason: string | null
    pausedAt: Date | null
    resumedAt: Date | null
    duration: number | null
    observations: string | null
  }

  export type WorkPauseCountAggregateOutputType = {
    id: number
    workOrderId: number
    reason: number
    pausedAt: number
    resumedAt: number
    duration: number
    observations: number
    _all: number
  }


  export type WorkPauseAvgAggregateInputType = {
    duration?: true
  }

  export type WorkPauseSumAggregateInputType = {
    duration?: true
  }

  export type WorkPauseMinAggregateInputType = {
    id?: true
    workOrderId?: true
    reason?: true
    pausedAt?: true
    resumedAt?: true
    duration?: true
    observations?: true
  }

  export type WorkPauseMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    reason?: true
    pausedAt?: true
    resumedAt?: true
    duration?: true
    observations?: true
  }

  export type WorkPauseCountAggregateInputType = {
    id?: true
    workOrderId?: true
    reason?: true
    pausedAt?: true
    resumedAt?: true
    duration?: true
    observations?: true
    _all?: true
  }

  export type WorkPauseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkPause to aggregate.
     */
    where?: WorkPauseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPauses to fetch.
     */
    orderBy?: WorkPauseOrderByWithRelationInput | WorkPauseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkPauseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPauses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPauses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkPauses
    **/
    _count?: true | WorkPauseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkPauseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkPauseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkPauseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkPauseMaxAggregateInputType
  }

  export type GetWorkPauseAggregateType<T extends WorkPauseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkPause]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkPause[P]>
      : GetScalarType<T[P], AggregateWorkPause[P]>
  }




  export type WorkPauseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkPauseWhereInput
    orderBy?: WorkPauseOrderByWithAggregationInput | WorkPauseOrderByWithAggregationInput[]
    by: WorkPauseScalarFieldEnum[] | WorkPauseScalarFieldEnum
    having?: WorkPauseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkPauseCountAggregateInputType | true
    _avg?: WorkPauseAvgAggregateInputType
    _sum?: WorkPauseSumAggregateInputType
    _min?: WorkPauseMinAggregateInputType
    _max?: WorkPauseMaxAggregateInputType
  }

  export type WorkPauseGroupByOutputType = {
    id: string
    workOrderId: string
    reason: string
    pausedAt: Date
    resumedAt: Date | null
    duration: number | null
    observations: string | null
    _count: WorkPauseCountAggregateOutputType | null
    _avg: WorkPauseAvgAggregateOutputType | null
    _sum: WorkPauseSumAggregateOutputType | null
    _min: WorkPauseMinAggregateOutputType | null
    _max: WorkPauseMaxAggregateOutputType | null
  }

  type GetWorkPauseGroupByPayload<T extends WorkPauseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkPauseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkPauseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkPauseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkPauseGroupByOutputType[P]>
        }
      >
    >


  export type WorkPauseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    reason?: boolean
    pausedAt?: boolean
    resumedAt?: boolean
    duration?: boolean
    observations?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workPause"]>

  export type WorkPauseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    reason?: boolean
    pausedAt?: boolean
    resumedAt?: boolean
    duration?: boolean
    observations?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workPause"]>

  export type WorkPauseSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    reason?: boolean
    pausedAt?: boolean
    resumedAt?: boolean
    duration?: boolean
    observations?: boolean
  }

  export type WorkPauseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }
  export type WorkPauseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
  }

  export type $WorkPausePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkPause"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      reason: string
      pausedAt: Date
      resumedAt: Date | null
      duration: number | null
      observations: string | null
    }, ExtArgs["result"]["workPause"]>
    composites: {}
  }

  type WorkPauseGetPayload<S extends boolean | null | undefined | WorkPauseDefaultArgs> = $Result.GetResult<Prisma.$WorkPausePayload, S>

  type WorkPauseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkPauseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkPauseCountAggregateInputType | true
    }

  export interface WorkPauseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkPause'], meta: { name: 'WorkPause' } }
    /**
     * Find zero or one WorkPause that matches the filter.
     * @param {WorkPauseFindUniqueArgs} args - Arguments to find a WorkPause
     * @example
     * // Get one WorkPause
     * const workPause = await prisma.workPause.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkPauseFindUniqueArgs>(args: SelectSubset<T, WorkPauseFindUniqueArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkPause that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkPauseFindUniqueOrThrowArgs} args - Arguments to find a WorkPause
     * @example
     * // Get one WorkPause
     * const workPause = await prisma.workPause.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkPauseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkPauseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkPause that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseFindFirstArgs} args - Arguments to find a WorkPause
     * @example
     * // Get one WorkPause
     * const workPause = await prisma.workPause.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkPauseFindFirstArgs>(args?: SelectSubset<T, WorkPauseFindFirstArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkPause that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseFindFirstOrThrowArgs} args - Arguments to find a WorkPause
     * @example
     * // Get one WorkPause
     * const workPause = await prisma.workPause.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkPauseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkPauseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkPauses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkPauses
     * const workPauses = await prisma.workPause.findMany()
     * 
     * // Get first 10 WorkPauses
     * const workPauses = await prisma.workPause.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workPauseWithIdOnly = await prisma.workPause.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkPauseFindManyArgs>(args?: SelectSubset<T, WorkPauseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkPause.
     * @param {WorkPauseCreateArgs} args - Arguments to create a WorkPause.
     * @example
     * // Create one WorkPause
     * const WorkPause = await prisma.workPause.create({
     *   data: {
     *     // ... data to create a WorkPause
     *   }
     * })
     * 
     */
    create<T extends WorkPauseCreateArgs>(args: SelectSubset<T, WorkPauseCreateArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkPauses.
     * @param {WorkPauseCreateManyArgs} args - Arguments to create many WorkPauses.
     * @example
     * // Create many WorkPauses
     * const workPause = await prisma.workPause.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkPauseCreateManyArgs>(args?: SelectSubset<T, WorkPauseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkPauses and returns the data saved in the database.
     * @param {WorkPauseCreateManyAndReturnArgs} args - Arguments to create many WorkPauses.
     * @example
     * // Create many WorkPauses
     * const workPause = await prisma.workPause.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkPauses and only return the `id`
     * const workPauseWithIdOnly = await prisma.workPause.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkPauseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkPauseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkPause.
     * @param {WorkPauseDeleteArgs} args - Arguments to delete one WorkPause.
     * @example
     * // Delete one WorkPause
     * const WorkPause = await prisma.workPause.delete({
     *   where: {
     *     // ... filter to delete one WorkPause
     *   }
     * })
     * 
     */
    delete<T extends WorkPauseDeleteArgs>(args: SelectSubset<T, WorkPauseDeleteArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkPause.
     * @param {WorkPauseUpdateArgs} args - Arguments to update one WorkPause.
     * @example
     * // Update one WorkPause
     * const workPause = await prisma.workPause.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkPauseUpdateArgs>(args: SelectSubset<T, WorkPauseUpdateArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkPauses.
     * @param {WorkPauseDeleteManyArgs} args - Arguments to filter WorkPauses to delete.
     * @example
     * // Delete a few WorkPauses
     * const { count } = await prisma.workPause.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkPauseDeleteManyArgs>(args?: SelectSubset<T, WorkPauseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkPauses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkPauses
     * const workPause = await prisma.workPause.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkPauseUpdateManyArgs>(args: SelectSubset<T, WorkPauseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkPause.
     * @param {WorkPauseUpsertArgs} args - Arguments to update or create a WorkPause.
     * @example
     * // Update or create a WorkPause
     * const workPause = await prisma.workPause.upsert({
     *   create: {
     *     // ... data to create a WorkPause
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkPause we want to update
     *   }
     * })
     */
    upsert<T extends WorkPauseUpsertArgs>(args: SelectSubset<T, WorkPauseUpsertArgs<ExtArgs>>): Prisma__WorkPauseClient<$Result.GetResult<Prisma.$WorkPausePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkPauses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseCountArgs} args - Arguments to filter WorkPauses to count.
     * @example
     * // Count the number of WorkPauses
     * const count = await prisma.workPause.count({
     *   where: {
     *     // ... the filter for the WorkPauses we want to count
     *   }
     * })
    **/
    count<T extends WorkPauseCountArgs>(
      args?: Subset<T, WorkPauseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkPauseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkPause.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkPauseAggregateArgs>(args: Subset<T, WorkPauseAggregateArgs>): Prisma.PrismaPromise<GetWorkPauseAggregateType<T>>

    /**
     * Group by WorkPause.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPauseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkPauseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkPauseGroupByArgs['orderBy'] }
        : { orderBy?: WorkPauseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkPauseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkPauseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkPause model
   */
  readonly fields: WorkPauseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkPause.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkPauseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkPause model
   */ 
  interface WorkPauseFieldRefs {
    readonly id: FieldRef<"WorkPause", 'String'>
    readonly workOrderId: FieldRef<"WorkPause", 'String'>
    readonly reason: FieldRef<"WorkPause", 'String'>
    readonly pausedAt: FieldRef<"WorkPause", 'DateTime'>
    readonly resumedAt: FieldRef<"WorkPause", 'DateTime'>
    readonly duration: FieldRef<"WorkPause", 'Int'>
    readonly observations: FieldRef<"WorkPause", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkPause findUnique
   */
  export type WorkPauseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter, which WorkPause to fetch.
     */
    where: WorkPauseWhereUniqueInput
  }

  /**
   * WorkPause findUniqueOrThrow
   */
  export type WorkPauseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter, which WorkPause to fetch.
     */
    where: WorkPauseWhereUniqueInput
  }

  /**
   * WorkPause findFirst
   */
  export type WorkPauseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter, which WorkPause to fetch.
     */
    where?: WorkPauseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPauses to fetch.
     */
    orderBy?: WorkPauseOrderByWithRelationInput | WorkPauseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkPauses.
     */
    cursor?: WorkPauseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPauses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPauses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkPauses.
     */
    distinct?: WorkPauseScalarFieldEnum | WorkPauseScalarFieldEnum[]
  }

  /**
   * WorkPause findFirstOrThrow
   */
  export type WorkPauseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter, which WorkPause to fetch.
     */
    where?: WorkPauseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPauses to fetch.
     */
    orderBy?: WorkPauseOrderByWithRelationInput | WorkPauseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkPauses.
     */
    cursor?: WorkPauseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPauses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPauses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkPauses.
     */
    distinct?: WorkPauseScalarFieldEnum | WorkPauseScalarFieldEnum[]
  }

  /**
   * WorkPause findMany
   */
  export type WorkPauseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter, which WorkPauses to fetch.
     */
    where?: WorkPauseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPauses to fetch.
     */
    orderBy?: WorkPauseOrderByWithRelationInput | WorkPauseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkPauses.
     */
    cursor?: WorkPauseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPauses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPauses.
     */
    skip?: number
    distinct?: WorkPauseScalarFieldEnum | WorkPauseScalarFieldEnum[]
  }

  /**
   * WorkPause create
   */
  export type WorkPauseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkPause.
     */
    data: XOR<WorkPauseCreateInput, WorkPauseUncheckedCreateInput>
  }

  /**
   * WorkPause createMany
   */
  export type WorkPauseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkPauses.
     */
    data: WorkPauseCreateManyInput | WorkPauseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkPause createManyAndReturn
   */
  export type WorkPauseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkPauses.
     */
    data: WorkPauseCreateManyInput | WorkPauseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkPause update
   */
  export type WorkPauseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkPause.
     */
    data: XOR<WorkPauseUpdateInput, WorkPauseUncheckedUpdateInput>
    /**
     * Choose, which WorkPause to update.
     */
    where: WorkPauseWhereUniqueInput
  }

  /**
   * WorkPause updateMany
   */
  export type WorkPauseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkPauses.
     */
    data: XOR<WorkPauseUpdateManyMutationInput, WorkPauseUncheckedUpdateManyInput>
    /**
     * Filter which WorkPauses to update
     */
    where?: WorkPauseWhereInput
  }

  /**
   * WorkPause upsert
   */
  export type WorkPauseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkPause to update in case it exists.
     */
    where: WorkPauseWhereUniqueInput
    /**
     * In case the WorkPause found by the `where` argument doesn't exist, create a new WorkPause with this data.
     */
    create: XOR<WorkPauseCreateInput, WorkPauseUncheckedCreateInput>
    /**
     * In case the WorkPause was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkPauseUpdateInput, WorkPauseUncheckedUpdateInput>
  }

  /**
   * WorkPause delete
   */
  export type WorkPauseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
    /**
     * Filter which WorkPause to delete.
     */
    where: WorkPauseWhereUniqueInput
  }

  /**
   * WorkPause deleteMany
   */
  export type WorkPauseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkPauses to delete
     */
    where?: WorkPauseWhereInput
  }

  /**
   * WorkPause without action
   */
  export type WorkPauseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPause
     */
    select?: WorkPauseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPauseInclude<ExtArgs> | null
  }


  /**
   * Model SparePart
   */

  export type AggregateSparePart = {
    _count: SparePartCountAggregateOutputType | null
    _avg: SparePartAvgAggregateOutputType | null
    _sum: SparePartSumAggregateOutputType | null
    _min: SparePartMinAggregateOutputType | null
    _max: SparePartMaxAggregateOutputType | null
  }

  export type SparePartAvgAggregateOutputType = {
    unitPrice: number | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
  }

  export type SparePartSumAggregateOutputType = {
    unitPrice: number | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
  }

  export type SparePartMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    unitOfMeasure: string | null
    unitPrice: number | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    location: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SparePartMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    unitOfMeasure: string | null
    unitPrice: number | null
    currentStock: number | null
    minStock: number | null
    maxStock: number | null
    location: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SparePartCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    category: number
    unitOfMeasure: number
    unitPrice: number
    currentStock: number
    minStock: number
    maxStock: number
    location: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SparePartAvgAggregateInputType = {
    unitPrice?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
  }

  export type SparePartSumAggregateInputType = {
    unitPrice?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
  }

  export type SparePartMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    unitOfMeasure?: true
    unitPrice?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    location?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SparePartMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    unitOfMeasure?: true
    unitPrice?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    location?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SparePartCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    unitOfMeasure?: true
    unitPrice?: true
    currentStock?: true
    minStock?: true
    maxStock?: true
    location?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SparePartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SparePart to aggregate.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpareParts
    **/
    _count?: true | SparePartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SparePartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SparePartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SparePartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SparePartMaxAggregateInputType
  }

  export type GetSparePartAggregateType<T extends SparePartAggregateArgs> = {
        [P in keyof T & keyof AggregateSparePart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSparePart[P]>
      : GetScalarType<T[P], AggregateSparePart[P]>
  }




  export type SparePartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SparePartWhereInput
    orderBy?: SparePartOrderByWithAggregationInput | SparePartOrderByWithAggregationInput[]
    by: SparePartScalarFieldEnum[] | SparePartScalarFieldEnum
    having?: SparePartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SparePartCountAggregateInputType | true
    _avg?: SparePartAvgAggregateInputType
    _sum?: SparePartSumAggregateInputType
    _min?: SparePartMinAggregateInputType
    _max?: SparePartMaxAggregateInputType
  }

  export type SparePartGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock: number
    minStock: number
    maxStock: number
    location: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SparePartCountAggregateOutputType | null
    _avg: SparePartAvgAggregateOutputType | null
    _sum: SparePartSumAggregateOutputType | null
    _min: SparePartMinAggregateOutputType | null
    _max: SparePartMaxAggregateOutputType | null
  }

  type GetSparePartGroupByPayload<T extends SparePartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SparePartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SparePartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SparePartGroupByOutputType[P]>
            : GetScalarType<T[P], SparePartGroupByOutputType[P]>
        }
      >
    >


  export type SparePartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitOfMeasure?: boolean
    unitPrice?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    location?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workOrders?: boolean | SparePart$workOrdersArgs<ExtArgs>
    movements?: boolean | SparePart$movementsArgs<ExtArgs>
    _count?: boolean | SparePartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sparePart"]>

  export type SparePartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitOfMeasure?: boolean
    unitPrice?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    location?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sparePart"]>

  export type SparePartSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    unitOfMeasure?: boolean
    unitPrice?: boolean
    currentStock?: boolean
    minStock?: boolean
    maxStock?: boolean
    location?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SparePartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrders?: boolean | SparePart$workOrdersArgs<ExtArgs>
    movements?: boolean | SparePart$movementsArgs<ExtArgs>
    _count?: boolean | SparePartCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SparePartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SparePartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SparePart"
    objects: {
      workOrders: Prisma.$WorkOrderSparePartPayload<ExtArgs>[]
      movements: Prisma.$SparePartMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      category: string
      unitOfMeasure: string
      unitPrice: number
      currentStock: number
      minStock: number
      maxStock: number
      location: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sparePart"]>
    composites: {}
  }

  type SparePartGetPayload<S extends boolean | null | undefined | SparePartDefaultArgs> = $Result.GetResult<Prisma.$SparePartPayload, S>

  type SparePartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SparePartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SparePartCountAggregateInputType | true
    }

  export interface SparePartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SparePart'], meta: { name: 'SparePart' } }
    /**
     * Find zero or one SparePart that matches the filter.
     * @param {SparePartFindUniqueArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SparePartFindUniqueArgs>(args: SelectSubset<T, SparePartFindUniqueArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SparePart that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SparePartFindUniqueOrThrowArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SparePartFindUniqueOrThrowArgs>(args: SelectSubset<T, SparePartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SparePart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindFirstArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SparePartFindFirstArgs>(args?: SelectSubset<T, SparePartFindFirstArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SparePart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindFirstOrThrowArgs} args - Arguments to find a SparePart
     * @example
     * // Get one SparePart
     * const sparePart = await prisma.sparePart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SparePartFindFirstOrThrowArgs>(args?: SelectSubset<T, SparePartFindFirstOrThrowArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SpareParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpareParts
     * const spareParts = await prisma.sparePart.findMany()
     * 
     * // Get first 10 SpareParts
     * const spareParts = await prisma.sparePart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sparePartWithIdOnly = await prisma.sparePart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SparePartFindManyArgs>(args?: SelectSubset<T, SparePartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SparePart.
     * @param {SparePartCreateArgs} args - Arguments to create a SparePart.
     * @example
     * // Create one SparePart
     * const SparePart = await prisma.sparePart.create({
     *   data: {
     *     // ... data to create a SparePart
     *   }
     * })
     * 
     */
    create<T extends SparePartCreateArgs>(args: SelectSubset<T, SparePartCreateArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SpareParts.
     * @param {SparePartCreateManyArgs} args - Arguments to create many SpareParts.
     * @example
     * // Create many SpareParts
     * const sparePart = await prisma.sparePart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SparePartCreateManyArgs>(args?: SelectSubset<T, SparePartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpareParts and returns the data saved in the database.
     * @param {SparePartCreateManyAndReturnArgs} args - Arguments to create many SpareParts.
     * @example
     * // Create many SpareParts
     * const sparePart = await prisma.sparePart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpareParts and only return the `id`
     * const sparePartWithIdOnly = await prisma.sparePart.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SparePartCreateManyAndReturnArgs>(args?: SelectSubset<T, SparePartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SparePart.
     * @param {SparePartDeleteArgs} args - Arguments to delete one SparePart.
     * @example
     * // Delete one SparePart
     * const SparePart = await prisma.sparePart.delete({
     *   where: {
     *     // ... filter to delete one SparePart
     *   }
     * })
     * 
     */
    delete<T extends SparePartDeleteArgs>(args: SelectSubset<T, SparePartDeleteArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SparePart.
     * @param {SparePartUpdateArgs} args - Arguments to update one SparePart.
     * @example
     * // Update one SparePart
     * const sparePart = await prisma.sparePart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SparePartUpdateArgs>(args: SelectSubset<T, SparePartUpdateArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SpareParts.
     * @param {SparePartDeleteManyArgs} args - Arguments to filter SpareParts to delete.
     * @example
     * // Delete a few SpareParts
     * const { count } = await prisma.sparePart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SparePartDeleteManyArgs>(args?: SelectSubset<T, SparePartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpareParts
     * const sparePart = await prisma.sparePart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SparePartUpdateManyArgs>(args: SelectSubset<T, SparePartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SparePart.
     * @param {SparePartUpsertArgs} args - Arguments to update or create a SparePart.
     * @example
     * // Update or create a SparePart
     * const sparePart = await prisma.sparePart.upsert({
     *   create: {
     *     // ... data to create a SparePart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SparePart we want to update
     *   }
     * })
     */
    upsert<T extends SparePartUpsertArgs>(args: SelectSubset<T, SparePartUpsertArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartCountArgs} args - Arguments to filter SpareParts to count.
     * @example
     * // Count the number of SpareParts
     * const count = await prisma.sparePart.count({
     *   where: {
     *     // ... the filter for the SpareParts we want to count
     *   }
     * })
    **/
    count<T extends SparePartCountArgs>(
      args?: Subset<T, SparePartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SparePartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SparePartAggregateArgs>(args: Subset<T, SparePartAggregateArgs>): Prisma.PrismaPromise<GetSparePartAggregateType<T>>

    /**
     * Group by SparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SparePartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SparePartGroupByArgs['orderBy'] }
        : { orderBy?: SparePartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SparePartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSparePartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SparePart model
   */
  readonly fields: SparePartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SparePart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SparePartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrders<T extends SparePart$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findMany"> | Null>
    movements<T extends SparePart$movementsArgs<ExtArgs> = {}>(args?: Subset<T, SparePart$movementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SparePart model
   */ 
  interface SparePartFieldRefs {
    readonly id: FieldRef<"SparePart", 'String'>
    readonly code: FieldRef<"SparePart", 'String'>
    readonly name: FieldRef<"SparePart", 'String'>
    readonly description: FieldRef<"SparePart", 'String'>
    readonly category: FieldRef<"SparePart", 'String'>
    readonly unitOfMeasure: FieldRef<"SparePart", 'String'>
    readonly unitPrice: FieldRef<"SparePart", 'Float'>
    readonly currentStock: FieldRef<"SparePart", 'Int'>
    readonly minStock: FieldRef<"SparePart", 'Int'>
    readonly maxStock: FieldRef<"SparePart", 'Int'>
    readonly location: FieldRef<"SparePart", 'String'>
    readonly isActive: FieldRef<"SparePart", 'Boolean'>
    readonly createdAt: FieldRef<"SparePart", 'DateTime'>
    readonly updatedAt: FieldRef<"SparePart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SparePart findUnique
   */
  export type SparePartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart findUniqueOrThrow
   */
  export type SparePartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart findFirst
   */
  export type SparePartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpareParts.
     */
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart findFirstOrThrow
   */
  export type SparePartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SparePart to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpareParts.
     */
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart findMany
   */
  export type SparePartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter, which SpareParts to fetch.
     */
    where?: SparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpareParts to fetch.
     */
    orderBy?: SparePartOrderByWithRelationInput | SparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpareParts.
     */
    cursor?: SparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpareParts.
     */
    skip?: number
    distinct?: SparePartScalarFieldEnum | SparePartScalarFieldEnum[]
  }

  /**
   * SparePart create
   */
  export type SparePartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The data needed to create a SparePart.
     */
    data: XOR<SparePartCreateInput, SparePartUncheckedCreateInput>
  }

  /**
   * SparePart createMany
   */
  export type SparePartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpareParts.
     */
    data: SparePartCreateManyInput | SparePartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SparePart createManyAndReturn
   */
  export type SparePartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SpareParts.
     */
    data: SparePartCreateManyInput | SparePartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SparePart update
   */
  export type SparePartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The data needed to update a SparePart.
     */
    data: XOR<SparePartUpdateInput, SparePartUncheckedUpdateInput>
    /**
     * Choose, which SparePart to update.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart updateMany
   */
  export type SparePartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpareParts.
     */
    data: XOR<SparePartUpdateManyMutationInput, SparePartUncheckedUpdateManyInput>
    /**
     * Filter which SpareParts to update
     */
    where?: SparePartWhereInput
  }

  /**
   * SparePart upsert
   */
  export type SparePartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * The filter to search for the SparePart to update in case it exists.
     */
    where: SparePartWhereUniqueInput
    /**
     * In case the SparePart found by the `where` argument doesn't exist, create a new SparePart with this data.
     */
    create: XOR<SparePartCreateInput, SparePartUncheckedCreateInput>
    /**
     * In case the SparePart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SparePartUpdateInput, SparePartUncheckedUpdateInput>
  }

  /**
   * SparePart delete
   */
  export type SparePartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
    /**
     * Filter which SparePart to delete.
     */
    where: SparePartWhereUniqueInput
  }

  /**
   * SparePart deleteMany
   */
  export type SparePartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpareParts to delete
     */
    where?: SparePartWhereInput
  }

  /**
   * SparePart.workOrders
   */
  export type SparePart$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    where?: WorkOrderSparePartWhereInput
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    cursor?: WorkOrderSparePartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderSparePartScalarFieldEnum | WorkOrderSparePartScalarFieldEnum[]
  }

  /**
   * SparePart.movements
   */
  export type SparePart$movementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    where?: SparePartMovementWhereInput
    orderBy?: SparePartMovementOrderByWithRelationInput | SparePartMovementOrderByWithRelationInput[]
    cursor?: SparePartMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SparePartMovementScalarFieldEnum | SparePartMovementScalarFieldEnum[]
  }

  /**
   * SparePart without action
   */
  export type SparePartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePart
     */
    select?: SparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartInclude<ExtArgs> | null
  }


  /**
   * Model WorkOrderSparePart
   */

  export type AggregateWorkOrderSparePart = {
    _count: WorkOrderSparePartCountAggregateOutputType | null
    _avg: WorkOrderSparePartAvgAggregateOutputType | null
    _sum: WorkOrderSparePartSumAggregateOutputType | null
    _min: WorkOrderSparePartMinAggregateOutputType | null
    _max: WorkOrderSparePartMaxAggregateOutputType | null
  }

  export type WorkOrderSparePartAvgAggregateOutputType = {
    quantityRequested: number | null
    quantityDelivered: number | null
  }

  export type WorkOrderSparePartSumAggregateOutputType = {
    quantityRequested: number | null
    quantityDelivered: number | null
  }

  export type WorkOrderSparePartMinAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    sparePartId: string | null
    quantityRequested: number | null
    quantityDelivered: number | null
    status: string | null
    requestedAt: Date | null
    deliveredAt: Date | null
    observations: string | null
  }

  export type WorkOrderSparePartMaxAggregateOutputType = {
    id: string | null
    workOrderId: string | null
    sparePartId: string | null
    quantityRequested: number | null
    quantityDelivered: number | null
    status: string | null
    requestedAt: Date | null
    deliveredAt: Date | null
    observations: string | null
  }

  export type WorkOrderSparePartCountAggregateOutputType = {
    id: number
    workOrderId: number
    sparePartId: number
    quantityRequested: number
    quantityDelivered: number
    status: number
    requestedAt: number
    deliveredAt: number
    observations: number
    _all: number
  }


  export type WorkOrderSparePartAvgAggregateInputType = {
    quantityRequested?: true
    quantityDelivered?: true
  }

  export type WorkOrderSparePartSumAggregateInputType = {
    quantityRequested?: true
    quantityDelivered?: true
  }

  export type WorkOrderSparePartMinAggregateInputType = {
    id?: true
    workOrderId?: true
    sparePartId?: true
    quantityRequested?: true
    quantityDelivered?: true
    status?: true
    requestedAt?: true
    deliveredAt?: true
    observations?: true
  }

  export type WorkOrderSparePartMaxAggregateInputType = {
    id?: true
    workOrderId?: true
    sparePartId?: true
    quantityRequested?: true
    quantityDelivered?: true
    status?: true
    requestedAt?: true
    deliveredAt?: true
    observations?: true
  }

  export type WorkOrderSparePartCountAggregateInputType = {
    id?: true
    workOrderId?: true
    sparePartId?: true
    quantityRequested?: true
    quantityDelivered?: true
    status?: true
    requestedAt?: true
    deliveredAt?: true
    observations?: true
    _all?: true
  }

  export type WorkOrderSparePartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderSparePart to aggregate.
     */
    where?: WorkOrderSparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderSpareParts to fetch.
     */
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkOrderSparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderSpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderSpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkOrderSpareParts
    **/
    _count?: true | WorkOrderSparePartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkOrderSparePartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkOrderSparePartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkOrderSparePartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkOrderSparePartMaxAggregateInputType
  }

  export type GetWorkOrderSparePartAggregateType<T extends WorkOrderSparePartAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkOrderSparePart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkOrderSparePart[P]>
      : GetScalarType<T[P], AggregateWorkOrderSparePart[P]>
  }




  export type WorkOrderSparePartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkOrderSparePartWhereInput
    orderBy?: WorkOrderSparePartOrderByWithAggregationInput | WorkOrderSparePartOrderByWithAggregationInput[]
    by: WorkOrderSparePartScalarFieldEnum[] | WorkOrderSparePartScalarFieldEnum
    having?: WorkOrderSparePartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkOrderSparePartCountAggregateInputType | true
    _avg?: WorkOrderSparePartAvgAggregateInputType
    _sum?: WorkOrderSparePartSumAggregateInputType
    _min?: WorkOrderSparePartMinAggregateInputType
    _max?: WorkOrderSparePartMaxAggregateInputType
  }

  export type WorkOrderSparePartGroupByOutputType = {
    id: string
    workOrderId: string
    sparePartId: string
    quantityRequested: number
    quantityDelivered: number | null
    status: string
    requestedAt: Date
    deliveredAt: Date | null
    observations: string | null
    _count: WorkOrderSparePartCountAggregateOutputType | null
    _avg: WorkOrderSparePartAvgAggregateOutputType | null
    _sum: WorkOrderSparePartSumAggregateOutputType | null
    _min: WorkOrderSparePartMinAggregateOutputType | null
    _max: WorkOrderSparePartMaxAggregateOutputType | null
  }

  type GetWorkOrderSparePartGroupByPayload<T extends WorkOrderSparePartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkOrderSparePartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkOrderSparePartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkOrderSparePartGroupByOutputType[P]>
            : GetScalarType<T[P], WorkOrderSparePartGroupByOutputType[P]>
        }
      >
    >


  export type WorkOrderSparePartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    sparePartId?: boolean
    quantityRequested?: boolean
    quantityDelivered?: boolean
    status?: boolean
    requestedAt?: boolean
    deliveredAt?: boolean
    observations?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderSparePart"]>

  export type WorkOrderSparePartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workOrderId?: boolean
    sparePartId?: boolean
    quantityRequested?: boolean
    quantityDelivered?: boolean
    status?: boolean
    requestedAt?: boolean
    deliveredAt?: boolean
    observations?: boolean
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workOrderSparePart"]>

  export type WorkOrderSparePartSelectScalar = {
    id?: boolean
    workOrderId?: boolean
    sparePartId?: boolean
    quantityRequested?: boolean
    quantityDelivered?: boolean
    status?: boolean
    requestedAt?: boolean
    deliveredAt?: boolean
    observations?: boolean
  }

  export type WorkOrderSparePartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }
  export type WorkOrderSparePartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workOrder?: boolean | WorkOrderDefaultArgs<ExtArgs>
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }

  export type $WorkOrderSparePartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkOrderSparePart"
    objects: {
      workOrder: Prisma.$WorkOrderPayload<ExtArgs>
      sparePart: Prisma.$SparePartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workOrderId: string
      sparePartId: string
      quantityRequested: number
      quantityDelivered: number | null
      status: string
      requestedAt: Date
      deliveredAt: Date | null
      observations: string | null
    }, ExtArgs["result"]["workOrderSparePart"]>
    composites: {}
  }

  type WorkOrderSparePartGetPayload<S extends boolean | null | undefined | WorkOrderSparePartDefaultArgs> = $Result.GetResult<Prisma.$WorkOrderSparePartPayload, S>

  type WorkOrderSparePartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkOrderSparePartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkOrderSparePartCountAggregateInputType | true
    }

  export interface WorkOrderSparePartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkOrderSparePart'], meta: { name: 'WorkOrderSparePart' } }
    /**
     * Find zero or one WorkOrderSparePart that matches the filter.
     * @param {WorkOrderSparePartFindUniqueArgs} args - Arguments to find a WorkOrderSparePart
     * @example
     * // Get one WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkOrderSparePartFindUniqueArgs>(args: SelectSubset<T, WorkOrderSparePartFindUniqueArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkOrderSparePart that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkOrderSparePartFindUniqueOrThrowArgs} args - Arguments to find a WorkOrderSparePart
     * @example
     * // Get one WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkOrderSparePartFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkOrderSparePartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkOrderSparePart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartFindFirstArgs} args - Arguments to find a WorkOrderSparePart
     * @example
     * // Get one WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkOrderSparePartFindFirstArgs>(args?: SelectSubset<T, WorkOrderSparePartFindFirstArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkOrderSparePart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartFindFirstOrThrowArgs} args - Arguments to find a WorkOrderSparePart
     * @example
     * // Get one WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkOrderSparePartFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkOrderSparePartFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkOrderSpareParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkOrderSpareParts
     * const workOrderSpareParts = await prisma.workOrderSparePart.findMany()
     * 
     * // Get first 10 WorkOrderSpareParts
     * const workOrderSpareParts = await prisma.workOrderSparePart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workOrderSparePartWithIdOnly = await prisma.workOrderSparePart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkOrderSparePartFindManyArgs>(args?: SelectSubset<T, WorkOrderSparePartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkOrderSparePart.
     * @param {WorkOrderSparePartCreateArgs} args - Arguments to create a WorkOrderSparePart.
     * @example
     * // Create one WorkOrderSparePart
     * const WorkOrderSparePart = await prisma.workOrderSparePart.create({
     *   data: {
     *     // ... data to create a WorkOrderSparePart
     *   }
     * })
     * 
     */
    create<T extends WorkOrderSparePartCreateArgs>(args: SelectSubset<T, WorkOrderSparePartCreateArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkOrderSpareParts.
     * @param {WorkOrderSparePartCreateManyArgs} args - Arguments to create many WorkOrderSpareParts.
     * @example
     * // Create many WorkOrderSpareParts
     * const workOrderSparePart = await prisma.workOrderSparePart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkOrderSparePartCreateManyArgs>(args?: SelectSubset<T, WorkOrderSparePartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkOrderSpareParts and returns the data saved in the database.
     * @param {WorkOrderSparePartCreateManyAndReturnArgs} args - Arguments to create many WorkOrderSpareParts.
     * @example
     * // Create many WorkOrderSpareParts
     * const workOrderSparePart = await prisma.workOrderSparePart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkOrderSpareParts and only return the `id`
     * const workOrderSparePartWithIdOnly = await prisma.workOrderSparePart.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkOrderSparePartCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkOrderSparePartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkOrderSparePart.
     * @param {WorkOrderSparePartDeleteArgs} args - Arguments to delete one WorkOrderSparePart.
     * @example
     * // Delete one WorkOrderSparePart
     * const WorkOrderSparePart = await prisma.workOrderSparePart.delete({
     *   where: {
     *     // ... filter to delete one WorkOrderSparePart
     *   }
     * })
     * 
     */
    delete<T extends WorkOrderSparePartDeleteArgs>(args: SelectSubset<T, WorkOrderSparePartDeleteArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkOrderSparePart.
     * @param {WorkOrderSparePartUpdateArgs} args - Arguments to update one WorkOrderSparePart.
     * @example
     * // Update one WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkOrderSparePartUpdateArgs>(args: SelectSubset<T, WorkOrderSparePartUpdateArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkOrderSpareParts.
     * @param {WorkOrderSparePartDeleteManyArgs} args - Arguments to filter WorkOrderSpareParts to delete.
     * @example
     * // Delete a few WorkOrderSpareParts
     * const { count } = await prisma.workOrderSparePart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkOrderSparePartDeleteManyArgs>(args?: SelectSubset<T, WorkOrderSparePartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkOrderSpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkOrderSpareParts
     * const workOrderSparePart = await prisma.workOrderSparePart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkOrderSparePartUpdateManyArgs>(args: SelectSubset<T, WorkOrderSparePartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkOrderSparePart.
     * @param {WorkOrderSparePartUpsertArgs} args - Arguments to update or create a WorkOrderSparePart.
     * @example
     * // Update or create a WorkOrderSparePart
     * const workOrderSparePart = await prisma.workOrderSparePart.upsert({
     *   create: {
     *     // ... data to create a WorkOrderSparePart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkOrderSparePart we want to update
     *   }
     * })
     */
    upsert<T extends WorkOrderSparePartUpsertArgs>(args: SelectSubset<T, WorkOrderSparePartUpsertArgs<ExtArgs>>): Prisma__WorkOrderSparePartClient<$Result.GetResult<Prisma.$WorkOrderSparePartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkOrderSpareParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartCountArgs} args - Arguments to filter WorkOrderSpareParts to count.
     * @example
     * // Count the number of WorkOrderSpareParts
     * const count = await prisma.workOrderSparePart.count({
     *   where: {
     *     // ... the filter for the WorkOrderSpareParts we want to count
     *   }
     * })
    **/
    count<T extends WorkOrderSparePartCountArgs>(
      args?: Subset<T, WorkOrderSparePartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkOrderSparePartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkOrderSparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkOrderSparePartAggregateArgs>(args: Subset<T, WorkOrderSparePartAggregateArgs>): Prisma.PrismaPromise<GetWorkOrderSparePartAggregateType<T>>

    /**
     * Group by WorkOrderSparePart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkOrderSparePartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkOrderSparePartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkOrderSparePartGroupByArgs['orderBy'] }
        : { orderBy?: WorkOrderSparePartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkOrderSparePartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkOrderSparePartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkOrderSparePart model
   */
  readonly fields: WorkOrderSparePartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkOrderSparePart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkOrderSparePartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workOrder<T extends WorkOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkOrderDefaultArgs<ExtArgs>>): Prisma__WorkOrderClient<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sparePart<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkOrderSparePart model
   */ 
  interface WorkOrderSparePartFieldRefs {
    readonly id: FieldRef<"WorkOrderSparePart", 'String'>
    readonly workOrderId: FieldRef<"WorkOrderSparePart", 'String'>
    readonly sparePartId: FieldRef<"WorkOrderSparePart", 'String'>
    readonly quantityRequested: FieldRef<"WorkOrderSparePart", 'Int'>
    readonly quantityDelivered: FieldRef<"WorkOrderSparePart", 'Int'>
    readonly status: FieldRef<"WorkOrderSparePart", 'String'>
    readonly requestedAt: FieldRef<"WorkOrderSparePart", 'DateTime'>
    readonly deliveredAt: FieldRef<"WorkOrderSparePart", 'DateTime'>
    readonly observations: FieldRef<"WorkOrderSparePart", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkOrderSparePart findUnique
   */
  export type WorkOrderSparePartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderSparePart to fetch.
     */
    where: WorkOrderSparePartWhereUniqueInput
  }

  /**
   * WorkOrderSparePart findUniqueOrThrow
   */
  export type WorkOrderSparePartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderSparePart to fetch.
     */
    where: WorkOrderSparePartWhereUniqueInput
  }

  /**
   * WorkOrderSparePart findFirst
   */
  export type WorkOrderSparePartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderSparePart to fetch.
     */
    where?: WorkOrderSparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderSpareParts to fetch.
     */
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderSpareParts.
     */
    cursor?: WorkOrderSparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderSpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderSpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderSpareParts.
     */
    distinct?: WorkOrderSparePartScalarFieldEnum | WorkOrderSparePartScalarFieldEnum[]
  }

  /**
   * WorkOrderSparePart findFirstOrThrow
   */
  export type WorkOrderSparePartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderSparePart to fetch.
     */
    where?: WorkOrderSparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderSpareParts to fetch.
     */
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkOrderSpareParts.
     */
    cursor?: WorkOrderSparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderSpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderSpareParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkOrderSpareParts.
     */
    distinct?: WorkOrderSparePartScalarFieldEnum | WorkOrderSparePartScalarFieldEnum[]
  }

  /**
   * WorkOrderSparePart findMany
   */
  export type WorkOrderSparePartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter, which WorkOrderSpareParts to fetch.
     */
    where?: WorkOrderSparePartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkOrderSpareParts to fetch.
     */
    orderBy?: WorkOrderSparePartOrderByWithRelationInput | WorkOrderSparePartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkOrderSpareParts.
     */
    cursor?: WorkOrderSparePartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkOrderSpareParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkOrderSpareParts.
     */
    skip?: number
    distinct?: WorkOrderSparePartScalarFieldEnum | WorkOrderSparePartScalarFieldEnum[]
  }

  /**
   * WorkOrderSparePart create
   */
  export type WorkOrderSparePartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkOrderSparePart.
     */
    data: XOR<WorkOrderSparePartCreateInput, WorkOrderSparePartUncheckedCreateInput>
  }

  /**
   * WorkOrderSparePart createMany
   */
  export type WorkOrderSparePartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkOrderSpareParts.
     */
    data: WorkOrderSparePartCreateManyInput | WorkOrderSparePartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkOrderSparePart createManyAndReturn
   */
  export type WorkOrderSparePartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkOrderSpareParts.
     */
    data: WorkOrderSparePartCreateManyInput | WorkOrderSparePartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkOrderSparePart update
   */
  export type WorkOrderSparePartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkOrderSparePart.
     */
    data: XOR<WorkOrderSparePartUpdateInput, WorkOrderSparePartUncheckedUpdateInput>
    /**
     * Choose, which WorkOrderSparePart to update.
     */
    where: WorkOrderSparePartWhereUniqueInput
  }

  /**
   * WorkOrderSparePart updateMany
   */
  export type WorkOrderSparePartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkOrderSpareParts.
     */
    data: XOR<WorkOrderSparePartUpdateManyMutationInput, WorkOrderSparePartUncheckedUpdateManyInput>
    /**
     * Filter which WorkOrderSpareParts to update
     */
    where?: WorkOrderSparePartWhereInput
  }

  /**
   * WorkOrderSparePart upsert
   */
  export type WorkOrderSparePartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkOrderSparePart to update in case it exists.
     */
    where: WorkOrderSparePartWhereUniqueInput
    /**
     * In case the WorkOrderSparePart found by the `where` argument doesn't exist, create a new WorkOrderSparePart with this data.
     */
    create: XOR<WorkOrderSparePartCreateInput, WorkOrderSparePartUncheckedCreateInput>
    /**
     * In case the WorkOrderSparePart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkOrderSparePartUpdateInput, WorkOrderSparePartUncheckedUpdateInput>
  }

  /**
   * WorkOrderSparePart delete
   */
  export type WorkOrderSparePartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
    /**
     * Filter which WorkOrderSparePart to delete.
     */
    where: WorkOrderSparePartWhereUniqueInput
  }

  /**
   * WorkOrderSparePart deleteMany
   */
  export type WorkOrderSparePartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkOrderSpareParts to delete
     */
    where?: WorkOrderSparePartWhereInput
  }

  /**
   * WorkOrderSparePart without action
   */
  export type WorkOrderSparePartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrderSparePart
     */
    select?: WorkOrderSparePartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderSparePartInclude<ExtArgs> | null
  }


  /**
   * Model SparePartMovement
   */

  export type AggregateSparePartMovement = {
    _count: SparePartMovementCountAggregateOutputType | null
    _avg: SparePartMovementAvgAggregateOutputType | null
    _sum: SparePartMovementSumAggregateOutputType | null
    _min: SparePartMovementMinAggregateOutputType | null
    _max: SparePartMovementMaxAggregateOutputType | null
  }

  export type SparePartMovementAvgAggregateOutputType = {
    quantity: number | null
    previousStock: number | null
    newStock: number | null
  }

  export type SparePartMovementSumAggregateOutputType = {
    quantity: number | null
    previousStock: number | null
    newStock: number | null
  }

  export type SparePartMovementMinAggregateOutputType = {
    id: string | null
    sparePartId: string | null
    movementType: string | null
    quantity: number | null
    previousStock: number | null
    newStock: number | null
    reason: string | null
    reference: string | null
    createdAt: Date | null
  }

  export type SparePartMovementMaxAggregateOutputType = {
    id: string | null
    sparePartId: string | null
    movementType: string | null
    quantity: number | null
    previousStock: number | null
    newStock: number | null
    reason: string | null
    reference: string | null
    createdAt: Date | null
  }

  export type SparePartMovementCountAggregateOutputType = {
    id: number
    sparePartId: number
    movementType: number
    quantity: number
    previousStock: number
    newStock: number
    reason: number
    reference: number
    createdAt: number
    _all: number
  }


  export type SparePartMovementAvgAggregateInputType = {
    quantity?: true
    previousStock?: true
    newStock?: true
  }

  export type SparePartMovementSumAggregateInputType = {
    quantity?: true
    previousStock?: true
    newStock?: true
  }

  export type SparePartMovementMinAggregateInputType = {
    id?: true
    sparePartId?: true
    movementType?: true
    quantity?: true
    previousStock?: true
    newStock?: true
    reason?: true
    reference?: true
    createdAt?: true
  }

  export type SparePartMovementMaxAggregateInputType = {
    id?: true
    sparePartId?: true
    movementType?: true
    quantity?: true
    previousStock?: true
    newStock?: true
    reason?: true
    reference?: true
    createdAt?: true
  }

  export type SparePartMovementCountAggregateInputType = {
    id?: true
    sparePartId?: true
    movementType?: true
    quantity?: true
    previousStock?: true
    newStock?: true
    reason?: true
    reference?: true
    createdAt?: true
    _all?: true
  }

  export type SparePartMovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SparePartMovement to aggregate.
     */
    where?: SparePartMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SparePartMovements to fetch.
     */
    orderBy?: SparePartMovementOrderByWithRelationInput | SparePartMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SparePartMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SparePartMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SparePartMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SparePartMovements
    **/
    _count?: true | SparePartMovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SparePartMovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SparePartMovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SparePartMovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SparePartMovementMaxAggregateInputType
  }

  export type GetSparePartMovementAggregateType<T extends SparePartMovementAggregateArgs> = {
        [P in keyof T & keyof AggregateSparePartMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSparePartMovement[P]>
      : GetScalarType<T[P], AggregateSparePartMovement[P]>
  }




  export type SparePartMovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SparePartMovementWhereInput
    orderBy?: SparePartMovementOrderByWithAggregationInput | SparePartMovementOrderByWithAggregationInput[]
    by: SparePartMovementScalarFieldEnum[] | SparePartMovementScalarFieldEnum
    having?: SparePartMovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SparePartMovementCountAggregateInputType | true
    _avg?: SparePartMovementAvgAggregateInputType
    _sum?: SparePartMovementSumAggregateInputType
    _min?: SparePartMovementMinAggregateInputType
    _max?: SparePartMovementMaxAggregateInputType
  }

  export type SparePartMovementGroupByOutputType = {
    id: string
    sparePartId: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference: string | null
    createdAt: Date
    _count: SparePartMovementCountAggregateOutputType | null
    _avg: SparePartMovementAvgAggregateOutputType | null
    _sum: SparePartMovementSumAggregateOutputType | null
    _min: SparePartMovementMinAggregateOutputType | null
    _max: SparePartMovementMaxAggregateOutputType | null
  }

  type GetSparePartMovementGroupByPayload<T extends SparePartMovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SparePartMovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SparePartMovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SparePartMovementGroupByOutputType[P]>
            : GetScalarType<T[P], SparePartMovementGroupByOutputType[P]>
        }
      >
    >


  export type SparePartMovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sparePartId?: boolean
    movementType?: boolean
    quantity?: boolean
    previousStock?: boolean
    newStock?: boolean
    reason?: boolean
    reference?: boolean
    createdAt?: boolean
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sparePartMovement"]>

  export type SparePartMovementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sparePartId?: boolean
    movementType?: boolean
    quantity?: boolean
    previousStock?: boolean
    newStock?: boolean
    reason?: boolean
    reference?: boolean
    createdAt?: boolean
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sparePartMovement"]>

  export type SparePartMovementSelectScalar = {
    id?: boolean
    sparePartId?: boolean
    movementType?: boolean
    quantity?: boolean
    previousStock?: boolean
    newStock?: boolean
    reason?: boolean
    reference?: boolean
    createdAt?: boolean
  }

  export type SparePartMovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }
  export type SparePartMovementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sparePart?: boolean | SparePartDefaultArgs<ExtArgs>
  }

  export type $SparePartMovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SparePartMovement"
    objects: {
      sparePart: Prisma.$SparePartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sparePartId: string
      movementType: string
      quantity: number
      previousStock: number
      newStock: number
      reason: string
      reference: string | null
      createdAt: Date
    }, ExtArgs["result"]["sparePartMovement"]>
    composites: {}
  }

  type SparePartMovementGetPayload<S extends boolean | null | undefined | SparePartMovementDefaultArgs> = $Result.GetResult<Prisma.$SparePartMovementPayload, S>

  type SparePartMovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SparePartMovementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SparePartMovementCountAggregateInputType | true
    }

  export interface SparePartMovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SparePartMovement'], meta: { name: 'SparePartMovement' } }
    /**
     * Find zero or one SparePartMovement that matches the filter.
     * @param {SparePartMovementFindUniqueArgs} args - Arguments to find a SparePartMovement
     * @example
     * // Get one SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SparePartMovementFindUniqueArgs>(args: SelectSubset<T, SparePartMovementFindUniqueArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SparePartMovement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SparePartMovementFindUniqueOrThrowArgs} args - Arguments to find a SparePartMovement
     * @example
     * // Get one SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SparePartMovementFindUniqueOrThrowArgs>(args: SelectSubset<T, SparePartMovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SparePartMovement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementFindFirstArgs} args - Arguments to find a SparePartMovement
     * @example
     * // Get one SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SparePartMovementFindFirstArgs>(args?: SelectSubset<T, SparePartMovementFindFirstArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SparePartMovement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementFindFirstOrThrowArgs} args - Arguments to find a SparePartMovement
     * @example
     * // Get one SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SparePartMovementFindFirstOrThrowArgs>(args?: SelectSubset<T, SparePartMovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SparePartMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SparePartMovements
     * const sparePartMovements = await prisma.sparePartMovement.findMany()
     * 
     * // Get first 10 SparePartMovements
     * const sparePartMovements = await prisma.sparePartMovement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sparePartMovementWithIdOnly = await prisma.sparePartMovement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SparePartMovementFindManyArgs>(args?: SelectSubset<T, SparePartMovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SparePartMovement.
     * @param {SparePartMovementCreateArgs} args - Arguments to create a SparePartMovement.
     * @example
     * // Create one SparePartMovement
     * const SparePartMovement = await prisma.sparePartMovement.create({
     *   data: {
     *     // ... data to create a SparePartMovement
     *   }
     * })
     * 
     */
    create<T extends SparePartMovementCreateArgs>(args: SelectSubset<T, SparePartMovementCreateArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SparePartMovements.
     * @param {SparePartMovementCreateManyArgs} args - Arguments to create many SparePartMovements.
     * @example
     * // Create many SparePartMovements
     * const sparePartMovement = await prisma.sparePartMovement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SparePartMovementCreateManyArgs>(args?: SelectSubset<T, SparePartMovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SparePartMovements and returns the data saved in the database.
     * @param {SparePartMovementCreateManyAndReturnArgs} args - Arguments to create many SparePartMovements.
     * @example
     * // Create many SparePartMovements
     * const sparePartMovement = await prisma.sparePartMovement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SparePartMovements and only return the `id`
     * const sparePartMovementWithIdOnly = await prisma.sparePartMovement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SparePartMovementCreateManyAndReturnArgs>(args?: SelectSubset<T, SparePartMovementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SparePartMovement.
     * @param {SparePartMovementDeleteArgs} args - Arguments to delete one SparePartMovement.
     * @example
     * // Delete one SparePartMovement
     * const SparePartMovement = await prisma.sparePartMovement.delete({
     *   where: {
     *     // ... filter to delete one SparePartMovement
     *   }
     * })
     * 
     */
    delete<T extends SparePartMovementDeleteArgs>(args: SelectSubset<T, SparePartMovementDeleteArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SparePartMovement.
     * @param {SparePartMovementUpdateArgs} args - Arguments to update one SparePartMovement.
     * @example
     * // Update one SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SparePartMovementUpdateArgs>(args: SelectSubset<T, SparePartMovementUpdateArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SparePartMovements.
     * @param {SparePartMovementDeleteManyArgs} args - Arguments to filter SparePartMovements to delete.
     * @example
     * // Delete a few SparePartMovements
     * const { count } = await prisma.sparePartMovement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SparePartMovementDeleteManyArgs>(args?: SelectSubset<T, SparePartMovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SparePartMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SparePartMovements
     * const sparePartMovement = await prisma.sparePartMovement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SparePartMovementUpdateManyArgs>(args: SelectSubset<T, SparePartMovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SparePartMovement.
     * @param {SparePartMovementUpsertArgs} args - Arguments to update or create a SparePartMovement.
     * @example
     * // Update or create a SparePartMovement
     * const sparePartMovement = await prisma.sparePartMovement.upsert({
     *   create: {
     *     // ... data to create a SparePartMovement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SparePartMovement we want to update
     *   }
     * })
     */
    upsert<T extends SparePartMovementUpsertArgs>(args: SelectSubset<T, SparePartMovementUpsertArgs<ExtArgs>>): Prisma__SparePartMovementClient<$Result.GetResult<Prisma.$SparePartMovementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SparePartMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementCountArgs} args - Arguments to filter SparePartMovements to count.
     * @example
     * // Count the number of SparePartMovements
     * const count = await prisma.sparePartMovement.count({
     *   where: {
     *     // ... the filter for the SparePartMovements we want to count
     *   }
     * })
    **/
    count<T extends SparePartMovementCountArgs>(
      args?: Subset<T, SparePartMovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SparePartMovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SparePartMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SparePartMovementAggregateArgs>(args: Subset<T, SparePartMovementAggregateArgs>): Prisma.PrismaPromise<GetSparePartMovementAggregateType<T>>

    /**
     * Group by SparePartMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SparePartMovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SparePartMovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SparePartMovementGroupByArgs['orderBy'] }
        : { orderBy?: SparePartMovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SparePartMovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSparePartMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SparePartMovement model
   */
  readonly fields: SparePartMovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SparePartMovement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SparePartMovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sparePart<T extends SparePartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SparePartDefaultArgs<ExtArgs>>): Prisma__SparePartClient<$Result.GetResult<Prisma.$SparePartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SparePartMovement model
   */ 
  interface SparePartMovementFieldRefs {
    readonly id: FieldRef<"SparePartMovement", 'String'>
    readonly sparePartId: FieldRef<"SparePartMovement", 'String'>
    readonly movementType: FieldRef<"SparePartMovement", 'String'>
    readonly quantity: FieldRef<"SparePartMovement", 'Int'>
    readonly previousStock: FieldRef<"SparePartMovement", 'Int'>
    readonly newStock: FieldRef<"SparePartMovement", 'Int'>
    readonly reason: FieldRef<"SparePartMovement", 'String'>
    readonly reference: FieldRef<"SparePartMovement", 'String'>
    readonly createdAt: FieldRef<"SparePartMovement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SparePartMovement findUnique
   */
  export type SparePartMovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter, which SparePartMovement to fetch.
     */
    where: SparePartMovementWhereUniqueInput
  }

  /**
   * SparePartMovement findUniqueOrThrow
   */
  export type SparePartMovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter, which SparePartMovement to fetch.
     */
    where: SparePartMovementWhereUniqueInput
  }

  /**
   * SparePartMovement findFirst
   */
  export type SparePartMovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter, which SparePartMovement to fetch.
     */
    where?: SparePartMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SparePartMovements to fetch.
     */
    orderBy?: SparePartMovementOrderByWithRelationInput | SparePartMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SparePartMovements.
     */
    cursor?: SparePartMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SparePartMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SparePartMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SparePartMovements.
     */
    distinct?: SparePartMovementScalarFieldEnum | SparePartMovementScalarFieldEnum[]
  }

  /**
   * SparePartMovement findFirstOrThrow
   */
  export type SparePartMovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter, which SparePartMovement to fetch.
     */
    where?: SparePartMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SparePartMovements to fetch.
     */
    orderBy?: SparePartMovementOrderByWithRelationInput | SparePartMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SparePartMovements.
     */
    cursor?: SparePartMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SparePartMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SparePartMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SparePartMovements.
     */
    distinct?: SparePartMovementScalarFieldEnum | SparePartMovementScalarFieldEnum[]
  }

  /**
   * SparePartMovement findMany
   */
  export type SparePartMovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter, which SparePartMovements to fetch.
     */
    where?: SparePartMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SparePartMovements to fetch.
     */
    orderBy?: SparePartMovementOrderByWithRelationInput | SparePartMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SparePartMovements.
     */
    cursor?: SparePartMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SparePartMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SparePartMovements.
     */
    skip?: number
    distinct?: SparePartMovementScalarFieldEnum | SparePartMovementScalarFieldEnum[]
  }

  /**
   * SparePartMovement create
   */
  export type SparePartMovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * The data needed to create a SparePartMovement.
     */
    data: XOR<SparePartMovementCreateInput, SparePartMovementUncheckedCreateInput>
  }

  /**
   * SparePartMovement createMany
   */
  export type SparePartMovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SparePartMovements.
     */
    data: SparePartMovementCreateManyInput | SparePartMovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SparePartMovement createManyAndReturn
   */
  export type SparePartMovementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SparePartMovements.
     */
    data: SparePartMovementCreateManyInput | SparePartMovementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SparePartMovement update
   */
  export type SparePartMovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * The data needed to update a SparePartMovement.
     */
    data: XOR<SparePartMovementUpdateInput, SparePartMovementUncheckedUpdateInput>
    /**
     * Choose, which SparePartMovement to update.
     */
    where: SparePartMovementWhereUniqueInput
  }

  /**
   * SparePartMovement updateMany
   */
  export type SparePartMovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SparePartMovements.
     */
    data: XOR<SparePartMovementUpdateManyMutationInput, SparePartMovementUncheckedUpdateManyInput>
    /**
     * Filter which SparePartMovements to update
     */
    where?: SparePartMovementWhereInput
  }

  /**
   * SparePartMovement upsert
   */
  export type SparePartMovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * The filter to search for the SparePartMovement to update in case it exists.
     */
    where: SparePartMovementWhereUniqueInput
    /**
     * In case the SparePartMovement found by the `where` argument doesn't exist, create a new SparePartMovement with this data.
     */
    create: XOR<SparePartMovementCreateInput, SparePartMovementUncheckedCreateInput>
    /**
     * In case the SparePartMovement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SparePartMovementUpdateInput, SparePartMovementUncheckedUpdateInput>
  }

  /**
   * SparePartMovement delete
   */
  export type SparePartMovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
    /**
     * Filter which SparePartMovement to delete.
     */
    where: SparePartMovementWhereUniqueInput
  }

  /**
   * SparePartMovement deleteMany
   */
  export type SparePartMovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SparePartMovements to delete
     */
    where?: SparePartMovementWhereInput
  }

  /**
   * SparePartMovement without action
   */
  export type SparePartMovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SparePartMovement
     */
    select?: SparePartMovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SparePartMovementInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    code: number
    name: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    isActive?: true
    createdAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    isActive?: true
    createdAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    code: string
    name: string
    isActive: boolean
    createdAt: Date
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    workshops?: boolean | Region$workshopsArgs<ExtArgs>
    vehicles?: boolean | Region$vehiclesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workshops?: boolean | Region$workshopsArgs<ExtArgs>
    vehicles?: boolean | Region$vehiclesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      workshops: Prisma.$WorkshopPayload<ExtArgs>[]
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workshops<T extends Region$workshopsArgs<ExtArgs> = {}>(args?: Subset<T, Region$workshopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findMany"> | Null>
    vehicles<T extends Region$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, Region$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */ 
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly code: FieldRef<"Region", 'String'>
    readonly name: FieldRef<"Region", 'String'>
    readonly isActive: FieldRef<"Region", 'Boolean'>
    readonly createdAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
  }

  /**
   * Region.workshops
   */
  export type Region$workshopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    where?: WorkshopWhereInput
    orderBy?: WorkshopOrderByWithRelationInput | WorkshopOrderByWithRelationInput[]
    cursor?: WorkshopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkshopScalarFieldEnum | WorkshopScalarFieldEnum[]
  }

  /**
   * Region.vehicles
   */
  export type Region$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Workshop
   */

  export type AggregateWorkshop = {
    _count: WorkshopCountAggregateOutputType | null
    _avg: WorkshopAvgAggregateOutputType | null
    _sum: WorkshopSumAggregateOutputType | null
    _min: WorkshopMinAggregateOutputType | null
    _max: WorkshopMaxAggregateOutputType | null
  }

  export type WorkshopAvgAggregateOutputType = {
    capacity: number | null
  }

  export type WorkshopSumAggregateOutputType = {
    capacity: number | null
  }

  export type WorkshopMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    regionId: string | null
    address: string | null
    city: string | null
    phone: string | null
    capacity: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkshopMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    regionId: string | null
    address: string | null
    city: string | null
    phone: string | null
    capacity: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkshopCountAggregateOutputType = {
    id: number
    code: number
    name: number
    regionId: number
    address: number
    city: number
    phone: number
    capacity: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkshopAvgAggregateInputType = {
    capacity?: true
  }

  export type WorkshopSumAggregateInputType = {
    capacity?: true
  }

  export type WorkshopMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    regionId?: true
    address?: true
    city?: true
    phone?: true
    capacity?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkshopMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    regionId?: true
    address?: true
    city?: true
    phone?: true
    capacity?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkshopCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    regionId?: true
    address?: true
    city?: true
    phone?: true
    capacity?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkshopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workshop to aggregate.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: WorkshopOrderByWithRelationInput | WorkshopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workshops
    **/
    _count?: true | WorkshopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkshopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkshopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopMaxAggregateInputType
  }

  export type GetWorkshopAggregateType<T extends WorkshopAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshop[P]>
      : GetScalarType<T[P], AggregateWorkshop[P]>
  }




  export type WorkshopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkshopWhereInput
    orderBy?: WorkshopOrderByWithAggregationInput | WorkshopOrderByWithAggregationInput[]
    by: WorkshopScalarFieldEnum[] | WorkshopScalarFieldEnum
    having?: WorkshopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopCountAggregateInputType | true
    _avg?: WorkshopAvgAggregateInputType
    _sum?: WorkshopSumAggregateInputType
    _min?: WorkshopMinAggregateInputType
    _max?: WorkshopMaxAggregateInputType
  }

  export type WorkshopGroupByOutputType = {
    id: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone: string | null
    capacity: number | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkshopCountAggregateOutputType | null
    _avg: WorkshopAvgAggregateOutputType | null
    _sum: WorkshopSumAggregateOutputType | null
    _min: WorkshopMinAggregateOutputType | null
    _max: WorkshopMaxAggregateOutputType | null
  }

  type GetWorkshopGroupByPayload<T extends WorkshopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkshopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    regionId?: boolean
    address?: boolean
    city?: boolean
    phone?: boolean
    capacity?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    users?: boolean | Workshop$usersArgs<ExtArgs>
    entries?: boolean | Workshop$entriesArgs<ExtArgs>
    workOrders?: boolean | Workshop$workOrdersArgs<ExtArgs>
    schedules?: boolean | Workshop$schedulesArgs<ExtArgs>
    _count?: boolean | WorkshopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workshop"]>

  export type WorkshopSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    regionId?: boolean
    address?: boolean
    city?: boolean
    phone?: boolean
    capacity?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workshop"]>

  export type WorkshopSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    regionId?: boolean
    address?: boolean
    city?: boolean
    phone?: boolean
    capacity?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkshopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    users?: boolean | Workshop$usersArgs<ExtArgs>
    entries?: boolean | Workshop$entriesArgs<ExtArgs>
    workOrders?: boolean | Workshop$workOrdersArgs<ExtArgs>
    schedules?: boolean | Workshop$schedulesArgs<ExtArgs>
    _count?: boolean | WorkshopCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkshopIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $WorkshopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workshop"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      entries: Prisma.$VehicleEntryPayload<ExtArgs>[]
      workOrders: Prisma.$WorkOrderPayload<ExtArgs>[]
      schedules: Prisma.$WorkshopSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      regionId: string
      address: string
      city: string
      phone: string | null
      capacity: number | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workshop"]>
    composites: {}
  }

  type WorkshopGetPayload<S extends boolean | null | undefined | WorkshopDefaultArgs> = $Result.GetResult<Prisma.$WorkshopPayload, S>

  type WorkshopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkshopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkshopCountAggregateInputType | true
    }

  export interface WorkshopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workshop'], meta: { name: 'Workshop' } }
    /**
     * Find zero or one Workshop that matches the filter.
     * @param {WorkshopFindUniqueArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkshopFindUniqueArgs>(args: SelectSubset<T, WorkshopFindUniqueArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Workshop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkshopFindUniqueOrThrowArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkshopFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkshopFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Workshop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindFirstArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkshopFindFirstArgs>(args?: SelectSubset<T, WorkshopFindFirstArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Workshop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindFirstOrThrowArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkshopFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkshopFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Workshops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workshops
     * const workshops = await prisma.workshop.findMany()
     * 
     * // Get first 10 Workshops
     * const workshops = await prisma.workshop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopWithIdOnly = await prisma.workshop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkshopFindManyArgs>(args?: SelectSubset<T, WorkshopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Workshop.
     * @param {WorkshopCreateArgs} args - Arguments to create a Workshop.
     * @example
     * // Create one Workshop
     * const Workshop = await prisma.workshop.create({
     *   data: {
     *     // ... data to create a Workshop
     *   }
     * })
     * 
     */
    create<T extends WorkshopCreateArgs>(args: SelectSubset<T, WorkshopCreateArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Workshops.
     * @param {WorkshopCreateManyArgs} args - Arguments to create many Workshops.
     * @example
     * // Create many Workshops
     * const workshop = await prisma.workshop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkshopCreateManyArgs>(args?: SelectSubset<T, WorkshopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workshops and returns the data saved in the database.
     * @param {WorkshopCreateManyAndReturnArgs} args - Arguments to create many Workshops.
     * @example
     * // Create many Workshops
     * const workshop = await prisma.workshop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workshops and only return the `id`
     * const workshopWithIdOnly = await prisma.workshop.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkshopCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkshopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Workshop.
     * @param {WorkshopDeleteArgs} args - Arguments to delete one Workshop.
     * @example
     * // Delete one Workshop
     * const Workshop = await prisma.workshop.delete({
     *   where: {
     *     // ... filter to delete one Workshop
     *   }
     * })
     * 
     */
    delete<T extends WorkshopDeleteArgs>(args: SelectSubset<T, WorkshopDeleteArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Workshop.
     * @param {WorkshopUpdateArgs} args - Arguments to update one Workshop.
     * @example
     * // Update one Workshop
     * const workshop = await prisma.workshop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkshopUpdateArgs>(args: SelectSubset<T, WorkshopUpdateArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Workshops.
     * @param {WorkshopDeleteManyArgs} args - Arguments to filter Workshops to delete.
     * @example
     * // Delete a few Workshops
     * const { count } = await prisma.workshop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkshopDeleteManyArgs>(args?: SelectSubset<T, WorkshopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workshops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workshops
     * const workshop = await prisma.workshop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkshopUpdateManyArgs>(args: SelectSubset<T, WorkshopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workshop.
     * @param {WorkshopUpsertArgs} args - Arguments to update or create a Workshop.
     * @example
     * // Update or create a Workshop
     * const workshop = await prisma.workshop.upsert({
     *   create: {
     *     // ... data to create a Workshop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workshop we want to update
     *   }
     * })
     */
    upsert<T extends WorkshopUpsertArgs>(args: SelectSubset<T, WorkshopUpsertArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Workshops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopCountArgs} args - Arguments to filter Workshops to count.
     * @example
     * // Count the number of Workshops
     * const count = await prisma.workshop.count({
     *   where: {
     *     // ... the filter for the Workshops we want to count
     *   }
     * })
    **/
    count<T extends WorkshopCountArgs>(
      args?: Subset<T, WorkshopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workshop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopAggregateArgs>(args: Subset<T, WorkshopAggregateArgs>): Prisma.PrismaPromise<GetWorkshopAggregateType<T>>

    /**
     * Group by Workshop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workshop model
   */
  readonly fields: WorkshopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workshop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkshopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends Workshop$usersArgs<ExtArgs> = {}>(args?: Subset<T, Workshop$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    entries<T extends Workshop$entriesArgs<ExtArgs> = {}>(args?: Subset<T, Workshop$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehicleEntryPayload<ExtArgs>, T, "findMany"> | Null>
    workOrders<T extends Workshop$workOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Workshop$workOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkOrderPayload<ExtArgs>, T, "findMany"> | Null>
    schedules<T extends Workshop$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Workshop$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workshop model
   */ 
  interface WorkshopFieldRefs {
    readonly id: FieldRef<"Workshop", 'String'>
    readonly code: FieldRef<"Workshop", 'String'>
    readonly name: FieldRef<"Workshop", 'String'>
    readonly regionId: FieldRef<"Workshop", 'String'>
    readonly address: FieldRef<"Workshop", 'String'>
    readonly city: FieldRef<"Workshop", 'String'>
    readonly phone: FieldRef<"Workshop", 'String'>
    readonly capacity: FieldRef<"Workshop", 'Int'>
    readonly isActive: FieldRef<"Workshop", 'Boolean'>
    readonly createdAt: FieldRef<"Workshop", 'DateTime'>
    readonly updatedAt: FieldRef<"Workshop", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workshop findUnique
   */
  export type WorkshopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter, which Workshop to fetch.
     */
    where: WorkshopWhereUniqueInput
  }

  /**
   * Workshop findUniqueOrThrow
   */
  export type WorkshopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter, which Workshop to fetch.
     */
    where: WorkshopWhereUniqueInput
  }

  /**
   * Workshop findFirst
   */
  export type WorkshopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter, which Workshop to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: WorkshopOrderByWithRelationInput | WorkshopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workshops.
     */
    distinct?: WorkshopScalarFieldEnum | WorkshopScalarFieldEnum[]
  }

  /**
   * Workshop findFirstOrThrow
   */
  export type WorkshopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter, which Workshop to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: WorkshopOrderByWithRelationInput | WorkshopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workshops.
     */
    distinct?: WorkshopScalarFieldEnum | WorkshopScalarFieldEnum[]
  }

  /**
   * Workshop findMany
   */
  export type WorkshopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter, which Workshops to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: WorkshopOrderByWithRelationInput | WorkshopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    distinct?: WorkshopScalarFieldEnum | WorkshopScalarFieldEnum[]
  }

  /**
   * Workshop create
   */
  export type WorkshopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * The data needed to create a Workshop.
     */
    data: XOR<WorkshopCreateInput, WorkshopUncheckedCreateInput>
  }

  /**
   * Workshop createMany
   */
  export type WorkshopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workshops.
     */
    data: WorkshopCreateManyInput | WorkshopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workshop createManyAndReturn
   */
  export type WorkshopCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Workshops.
     */
    data: WorkshopCreateManyInput | WorkshopCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workshop update
   */
  export type WorkshopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * The data needed to update a Workshop.
     */
    data: XOR<WorkshopUpdateInput, WorkshopUncheckedUpdateInput>
    /**
     * Choose, which Workshop to update.
     */
    where: WorkshopWhereUniqueInput
  }

  /**
   * Workshop updateMany
   */
  export type WorkshopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workshops.
     */
    data: XOR<WorkshopUpdateManyMutationInput, WorkshopUncheckedUpdateManyInput>
    /**
     * Filter which Workshops to update
     */
    where?: WorkshopWhereInput
  }

  /**
   * Workshop upsert
   */
  export type WorkshopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * The filter to search for the Workshop to update in case it exists.
     */
    where: WorkshopWhereUniqueInput
    /**
     * In case the Workshop found by the `where` argument doesn't exist, create a new Workshop with this data.
     */
    create: XOR<WorkshopCreateInput, WorkshopUncheckedCreateInput>
    /**
     * In case the Workshop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopUpdateInput, WorkshopUncheckedUpdateInput>
  }

  /**
   * Workshop delete
   */
  export type WorkshopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
    /**
     * Filter which Workshop to delete.
     */
    where: WorkshopWhereUniqueInput
  }

  /**
   * Workshop deleteMany
   */
  export type WorkshopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workshops to delete
     */
    where?: WorkshopWhereInput
  }

  /**
   * Workshop.users
   */
  export type Workshop$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Workshop.entries
   */
  export type Workshop$entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleEntry
     */
    select?: VehicleEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleEntryInclude<ExtArgs> | null
    where?: VehicleEntryWhereInput
    orderBy?: VehicleEntryOrderByWithRelationInput | VehicleEntryOrderByWithRelationInput[]
    cursor?: VehicleEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleEntryScalarFieldEnum | VehicleEntryScalarFieldEnum[]
  }

  /**
   * Workshop.workOrders
   */
  export type Workshop$workOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkOrder
     */
    select?: WorkOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkOrderInclude<ExtArgs> | null
    where?: WorkOrderWhereInput
    orderBy?: WorkOrderOrderByWithRelationInput | WorkOrderOrderByWithRelationInput[]
    cursor?: WorkOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkOrderScalarFieldEnum | WorkOrderScalarFieldEnum[]
  }

  /**
   * Workshop.schedules
   */
  export type Workshop$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    where?: WorkshopScheduleWhereInput
    orderBy?: WorkshopScheduleOrderByWithRelationInput | WorkshopScheduleOrderByWithRelationInput[]
    cursor?: WorkshopScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkshopScheduleScalarFieldEnum | WorkshopScheduleScalarFieldEnum[]
  }

  /**
   * Workshop without action
   */
  export type WorkshopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopInclude<ExtArgs> | null
  }


  /**
   * Model WorkshopSchedule
   */

  export type AggregateWorkshopSchedule = {
    _count: WorkshopScheduleCountAggregateOutputType | null
    _avg: WorkshopScheduleAvgAggregateOutputType | null
    _sum: WorkshopScheduleSumAggregateOutputType | null
    _min: WorkshopScheduleMinAggregateOutputType | null
    _max: WorkshopScheduleMaxAggregateOutputType | null
  }

  export type WorkshopScheduleAvgAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type WorkshopScheduleSumAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type WorkshopScheduleMinAggregateOutputType = {
    id: string | null
    workshopId: string | null
    dayOfWeek: number | null
    openTime: string | null
    closeTime: string | null
    isActive: boolean | null
  }

  export type WorkshopScheduleMaxAggregateOutputType = {
    id: string | null
    workshopId: string | null
    dayOfWeek: number | null
    openTime: string | null
    closeTime: string | null
    isActive: boolean | null
  }

  export type WorkshopScheduleCountAggregateOutputType = {
    id: number
    workshopId: number
    dayOfWeek: number
    openTime: number
    closeTime: number
    isActive: number
    _all: number
  }


  export type WorkshopScheduleAvgAggregateInputType = {
    dayOfWeek?: true
  }

  export type WorkshopScheduleSumAggregateInputType = {
    dayOfWeek?: true
  }

  export type WorkshopScheduleMinAggregateInputType = {
    id?: true
    workshopId?: true
    dayOfWeek?: true
    openTime?: true
    closeTime?: true
    isActive?: true
  }

  export type WorkshopScheduleMaxAggregateInputType = {
    id?: true
    workshopId?: true
    dayOfWeek?: true
    openTime?: true
    closeTime?: true
    isActive?: true
  }

  export type WorkshopScheduleCountAggregateInputType = {
    id?: true
    workshopId?: true
    dayOfWeek?: true
    openTime?: true
    closeTime?: true
    isActive?: true
    _all?: true
  }

  export type WorkshopScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkshopSchedule to aggregate.
     */
    where?: WorkshopScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSchedules to fetch.
     */
    orderBy?: WorkshopScheduleOrderByWithRelationInput | WorkshopScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkshopSchedules
    **/
    _count?: true | WorkshopScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkshopScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkshopScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopScheduleMaxAggregateInputType
  }

  export type GetWorkshopScheduleAggregateType<T extends WorkshopScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshopSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshopSchedule[P]>
      : GetScalarType<T[P], AggregateWorkshopSchedule[P]>
  }




  export type WorkshopScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkshopScheduleWhereInput
    orderBy?: WorkshopScheduleOrderByWithAggregationInput | WorkshopScheduleOrderByWithAggregationInput[]
    by: WorkshopScheduleScalarFieldEnum[] | WorkshopScheduleScalarFieldEnum
    having?: WorkshopScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopScheduleCountAggregateInputType | true
    _avg?: WorkshopScheduleAvgAggregateInputType
    _sum?: WorkshopScheduleSumAggregateInputType
    _min?: WorkshopScheduleMinAggregateInputType
    _max?: WorkshopScheduleMaxAggregateInputType
  }

  export type WorkshopScheduleGroupByOutputType = {
    id: string
    workshopId: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive: boolean
    _count: WorkshopScheduleCountAggregateOutputType | null
    _avg: WorkshopScheduleAvgAggregateOutputType | null
    _sum: WorkshopScheduleSumAggregateOutputType | null
    _min: WorkshopScheduleMinAggregateOutputType | null
    _max: WorkshopScheduleMaxAggregateOutputType | null
  }

  type GetWorkshopScheduleGroupByPayload<T extends WorkshopScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkshopScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopScheduleGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workshopId?: boolean
    dayOfWeek?: boolean
    openTime?: boolean
    closeTime?: boolean
    isActive?: boolean
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workshopSchedule"]>

  export type WorkshopScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workshopId?: boolean
    dayOfWeek?: boolean
    openTime?: boolean
    closeTime?: boolean
    isActive?: boolean
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workshopSchedule"]>

  export type WorkshopScheduleSelectScalar = {
    id?: boolean
    workshopId?: boolean
    dayOfWeek?: boolean
    openTime?: boolean
    closeTime?: boolean
    isActive?: boolean
  }

  export type WorkshopScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
  }
  export type WorkshopScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workshop?: boolean | WorkshopDefaultArgs<ExtArgs>
  }

  export type $WorkshopSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkshopSchedule"
    objects: {
      workshop: Prisma.$WorkshopPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workshopId: string
      dayOfWeek: number
      openTime: string
      closeTime: string
      isActive: boolean
    }, ExtArgs["result"]["workshopSchedule"]>
    composites: {}
  }

  type WorkshopScheduleGetPayload<S extends boolean | null | undefined | WorkshopScheduleDefaultArgs> = $Result.GetResult<Prisma.$WorkshopSchedulePayload, S>

  type WorkshopScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkshopScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkshopScheduleCountAggregateInputType | true
    }

  export interface WorkshopScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkshopSchedule'], meta: { name: 'WorkshopSchedule' } }
    /**
     * Find zero or one WorkshopSchedule that matches the filter.
     * @param {WorkshopScheduleFindUniqueArgs} args - Arguments to find a WorkshopSchedule
     * @example
     * // Get one WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkshopScheduleFindUniqueArgs>(args: SelectSubset<T, WorkshopScheduleFindUniqueArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkshopSchedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkshopScheduleFindUniqueOrThrowArgs} args - Arguments to find a WorkshopSchedule
     * @example
     * // Get one WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkshopScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkshopScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkshopSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleFindFirstArgs} args - Arguments to find a WorkshopSchedule
     * @example
     * // Get one WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkshopScheduleFindFirstArgs>(args?: SelectSubset<T, WorkshopScheduleFindFirstArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkshopSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleFindFirstOrThrowArgs} args - Arguments to find a WorkshopSchedule
     * @example
     * // Get one WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkshopScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkshopScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkshopSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkshopSchedules
     * const workshopSchedules = await prisma.workshopSchedule.findMany()
     * 
     * // Get first 10 WorkshopSchedules
     * const workshopSchedules = await prisma.workshopSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopScheduleWithIdOnly = await prisma.workshopSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkshopScheduleFindManyArgs>(args?: SelectSubset<T, WorkshopScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkshopSchedule.
     * @param {WorkshopScheduleCreateArgs} args - Arguments to create a WorkshopSchedule.
     * @example
     * // Create one WorkshopSchedule
     * const WorkshopSchedule = await prisma.workshopSchedule.create({
     *   data: {
     *     // ... data to create a WorkshopSchedule
     *   }
     * })
     * 
     */
    create<T extends WorkshopScheduleCreateArgs>(args: SelectSubset<T, WorkshopScheduleCreateArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkshopSchedules.
     * @param {WorkshopScheduleCreateManyArgs} args - Arguments to create many WorkshopSchedules.
     * @example
     * // Create many WorkshopSchedules
     * const workshopSchedule = await prisma.workshopSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkshopScheduleCreateManyArgs>(args?: SelectSubset<T, WorkshopScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkshopSchedules and returns the data saved in the database.
     * @param {WorkshopScheduleCreateManyAndReturnArgs} args - Arguments to create many WorkshopSchedules.
     * @example
     * // Create many WorkshopSchedules
     * const workshopSchedule = await prisma.workshopSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkshopSchedules and only return the `id`
     * const workshopScheduleWithIdOnly = await prisma.workshopSchedule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkshopScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkshopScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkshopSchedule.
     * @param {WorkshopScheduleDeleteArgs} args - Arguments to delete one WorkshopSchedule.
     * @example
     * // Delete one WorkshopSchedule
     * const WorkshopSchedule = await prisma.workshopSchedule.delete({
     *   where: {
     *     // ... filter to delete one WorkshopSchedule
     *   }
     * })
     * 
     */
    delete<T extends WorkshopScheduleDeleteArgs>(args: SelectSubset<T, WorkshopScheduleDeleteArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkshopSchedule.
     * @param {WorkshopScheduleUpdateArgs} args - Arguments to update one WorkshopSchedule.
     * @example
     * // Update one WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkshopScheduleUpdateArgs>(args: SelectSubset<T, WorkshopScheduleUpdateArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkshopSchedules.
     * @param {WorkshopScheduleDeleteManyArgs} args - Arguments to filter WorkshopSchedules to delete.
     * @example
     * // Delete a few WorkshopSchedules
     * const { count } = await prisma.workshopSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkshopScheduleDeleteManyArgs>(args?: SelectSubset<T, WorkshopScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkshopSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkshopSchedules
     * const workshopSchedule = await prisma.workshopSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkshopScheduleUpdateManyArgs>(args: SelectSubset<T, WorkshopScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkshopSchedule.
     * @param {WorkshopScheduleUpsertArgs} args - Arguments to update or create a WorkshopSchedule.
     * @example
     * // Update or create a WorkshopSchedule
     * const workshopSchedule = await prisma.workshopSchedule.upsert({
     *   create: {
     *     // ... data to create a WorkshopSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkshopSchedule we want to update
     *   }
     * })
     */
    upsert<T extends WorkshopScheduleUpsertArgs>(args: SelectSubset<T, WorkshopScheduleUpsertArgs<ExtArgs>>): Prisma__WorkshopScheduleClient<$Result.GetResult<Prisma.$WorkshopSchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkshopSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleCountArgs} args - Arguments to filter WorkshopSchedules to count.
     * @example
     * // Count the number of WorkshopSchedules
     * const count = await prisma.workshopSchedule.count({
     *   where: {
     *     // ... the filter for the WorkshopSchedules we want to count
     *   }
     * })
    **/
    count<T extends WorkshopScheduleCountArgs>(
      args?: Subset<T, WorkshopScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkshopSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopScheduleAggregateArgs>(args: Subset<T, WorkshopScheduleAggregateArgs>): Prisma.PrismaPromise<GetWorkshopScheduleAggregateType<T>>

    /**
     * Group by WorkshopSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopScheduleGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkshopSchedule model
   */
  readonly fields: WorkshopScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkshopSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkshopScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workshop<T extends WorkshopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkshopDefaultArgs<ExtArgs>>): Prisma__WorkshopClient<$Result.GetResult<Prisma.$WorkshopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkshopSchedule model
   */ 
  interface WorkshopScheduleFieldRefs {
    readonly id: FieldRef<"WorkshopSchedule", 'String'>
    readonly workshopId: FieldRef<"WorkshopSchedule", 'String'>
    readonly dayOfWeek: FieldRef<"WorkshopSchedule", 'Int'>
    readonly openTime: FieldRef<"WorkshopSchedule", 'String'>
    readonly closeTime: FieldRef<"WorkshopSchedule", 'String'>
    readonly isActive: FieldRef<"WorkshopSchedule", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * WorkshopSchedule findUnique
   */
  export type WorkshopScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WorkshopSchedule to fetch.
     */
    where: WorkshopScheduleWhereUniqueInput
  }

  /**
   * WorkshopSchedule findUniqueOrThrow
   */
  export type WorkshopScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WorkshopSchedule to fetch.
     */
    where: WorkshopScheduleWhereUniqueInput
  }

  /**
   * WorkshopSchedule findFirst
   */
  export type WorkshopScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WorkshopSchedule to fetch.
     */
    where?: WorkshopScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSchedules to fetch.
     */
    orderBy?: WorkshopScheduleOrderByWithRelationInput | WorkshopScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopSchedules.
     */
    cursor?: WorkshopScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopSchedules.
     */
    distinct?: WorkshopScheduleScalarFieldEnum | WorkshopScheduleScalarFieldEnum[]
  }

  /**
   * WorkshopSchedule findFirstOrThrow
   */
  export type WorkshopScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WorkshopSchedule to fetch.
     */
    where?: WorkshopScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSchedules to fetch.
     */
    orderBy?: WorkshopScheduleOrderByWithRelationInput | WorkshopScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopSchedules.
     */
    cursor?: WorkshopScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopSchedules.
     */
    distinct?: WorkshopScheduleScalarFieldEnum | WorkshopScheduleScalarFieldEnum[]
  }

  /**
   * WorkshopSchedule findMany
   */
  export type WorkshopScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WorkshopSchedules to fetch.
     */
    where?: WorkshopScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSchedules to fetch.
     */
    orderBy?: WorkshopScheduleOrderByWithRelationInput | WorkshopScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkshopSchedules.
     */
    cursor?: WorkshopScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSchedules.
     */
    skip?: number
    distinct?: WorkshopScheduleScalarFieldEnum | WorkshopScheduleScalarFieldEnum[]
  }

  /**
   * WorkshopSchedule create
   */
  export type WorkshopScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkshopSchedule.
     */
    data: XOR<WorkshopScheduleCreateInput, WorkshopScheduleUncheckedCreateInput>
  }

  /**
   * WorkshopSchedule createMany
   */
  export type WorkshopScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkshopSchedules.
     */
    data: WorkshopScheduleCreateManyInput | WorkshopScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkshopSchedule createManyAndReturn
   */
  export type WorkshopScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkshopSchedules.
     */
    data: WorkshopScheduleCreateManyInput | WorkshopScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkshopSchedule update
   */
  export type WorkshopScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkshopSchedule.
     */
    data: XOR<WorkshopScheduleUpdateInput, WorkshopScheduleUncheckedUpdateInput>
    /**
     * Choose, which WorkshopSchedule to update.
     */
    where: WorkshopScheduleWhereUniqueInput
  }

  /**
   * WorkshopSchedule updateMany
   */
  export type WorkshopScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkshopSchedules.
     */
    data: XOR<WorkshopScheduleUpdateManyMutationInput, WorkshopScheduleUncheckedUpdateManyInput>
    /**
     * Filter which WorkshopSchedules to update
     */
    where?: WorkshopScheduleWhereInput
  }

  /**
   * WorkshopSchedule upsert
   */
  export type WorkshopScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkshopSchedule to update in case it exists.
     */
    where: WorkshopScheduleWhereUniqueInput
    /**
     * In case the WorkshopSchedule found by the `where` argument doesn't exist, create a new WorkshopSchedule with this data.
     */
    create: XOR<WorkshopScheduleCreateInput, WorkshopScheduleUncheckedCreateInput>
    /**
     * In case the WorkshopSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopScheduleUpdateInput, WorkshopScheduleUncheckedUpdateInput>
  }

  /**
   * WorkshopSchedule delete
   */
  export type WorkshopScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
    /**
     * Filter which WorkshopSchedule to delete.
     */
    where: WorkshopScheduleWhereUniqueInput
  }

  /**
   * WorkshopSchedule deleteMany
   */
  export type WorkshopScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkshopSchedules to delete
     */
    where?: WorkshopScheduleWhereInput
  }

  /**
   * WorkshopSchedule without action
   */
  export type WorkshopScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkshopSchedule
     */
    select?: WorkshopScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkshopScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    url: string | null
    relatedTo: string | null
    relatedId: string | null
    uploadedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    url: string | null
    relatedTo: string | null
    relatedId: string | null
    uploadedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    type: number
    url: number
    relatedTo: number
    relatedId: number
    uploadedAt: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    relatedTo?: true
    relatedId?: true
    uploadedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    relatedTo?: true
    relatedId?: true
    uploadedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    url?: true
    relatedTo?: true
    relatedId?: true
    uploadedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    name: string
    type: string
    url: string
    relatedTo: string
    relatedId: string
    uploadedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    uploadedAt?: boolean
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    uploadedAt?: boolean
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    url?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    uploadedAt?: boolean
  }


  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      url: string
      relatedTo: string
      relatedId: string
      uploadedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly name: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'String'>
    readonly url: FieldRef<"Document", 'String'>
    readonly relatedTo: FieldRef<"Document", 'String'>
    readonly relatedId: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    relatedTo: string | null
    relatedId: string | null
    isRead: boolean | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    relatedTo: string | null
    relatedId: string | null
    isRead: boolean | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    relatedTo: number
    relatedId: number
    isRead: number
    readAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    relatedTo?: true
    relatedId?: true
    isRead?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    relatedTo?: true
    relatedId?: true
    isRead?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    relatedTo?: true
    relatedId?: true
    isRead?: true
    readAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    type: string
    relatedTo: string | null
    relatedId: string | null
    isRead: boolean
    readAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    relatedTo?: boolean
    relatedId?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      type: string
      relatedTo: string | null
      relatedId: string | null
      isRead: boolean
      readAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly relatedTo: FieldRef<"Notification", 'String'>
    readonly relatedId: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    rut: 'rut',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    phone: 'phone',
    roleId: 'roleId',
    workshopId: 'workshopId',
    isActive: 'isActive',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    resource: 'resource',
    action: 'action',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    roleId: 'roleId',
    permissionId: 'permissionId',
    createdAt: 'createdAt'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const VehicleScalarFieldEnum: {
    id: 'id',
    licensePlate: 'licensePlate',
    vehicleType: 'vehicleType',
    brand: 'brand',
    model: 'model',
    year: 'year',
    vin: 'vin',
    fleetNumber: 'fleetNumber',
    regionId: 'regionId',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VehicleScalarFieldEnum = (typeof VehicleScalarFieldEnum)[keyof typeof VehicleScalarFieldEnum]


  export const VehicleEntryScalarFieldEnum: {
    id: 'id',
    entryCode: 'entryCode',
    vehicleId: 'vehicleId',
    workshopId: 'workshopId',
    driverRut: 'driverRut',
    driverName: 'driverName',
    driverPhone: 'driverPhone',
    entryDate: 'entryDate',
    exitDate: 'exitDate',
    entryKm: 'entryKm',
    exitKm: 'exitKm',
    fuelLevel: 'fuelLevel',
    hasKeys: 'hasKeys',
    observations: 'observations',
    photos: 'photos',
    status: 'status',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VehicleEntryScalarFieldEnum = (typeof VehicleEntryScalarFieldEnum)[keyof typeof VehicleEntryScalarFieldEnum]


  export const KeyControlScalarFieldEnum: {
    id: 'id',
    entryId: 'entryId',
    keyLocation: 'keyLocation',
    deliveredTo: 'deliveredTo',
    deliveredAt: 'deliveredAt',
    returnedBy: 'returnedBy',
    returnedAt: 'returnedAt',
    observations: 'observations',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KeyControlScalarFieldEnum = (typeof KeyControlScalarFieldEnum)[keyof typeof KeyControlScalarFieldEnum]


  export const WorkOrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    vehicleId: 'vehicleId',
    entryId: 'entryId',
    workshopId: 'workshopId',
    workType: 'workType',
    priority: 'priority',
    description: 'description',
    estimatedHours: 'estimatedHours',
    assignedToId: 'assignedToId',
    currentStatus: 'currentStatus',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    totalHours: 'totalHours',
    observations: 'observations',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkOrderScalarFieldEnum = (typeof WorkOrderScalarFieldEnum)[keyof typeof WorkOrderScalarFieldEnum]


  export const WorkOrderStatusScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    status: 'status',
    observations: 'observations',
    changedById: 'changedById',
    changedAt: 'changedAt'
  };

  export type WorkOrderStatusScalarFieldEnum = (typeof WorkOrderStatusScalarFieldEnum)[keyof typeof WorkOrderStatusScalarFieldEnum]


  export const WorkOrderPhotoScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    url: 'url',
    description: 'description',
    photoType: 'photoType',
    uploadedAt: 'uploadedAt'
  };

  export type WorkOrderPhotoScalarFieldEnum = (typeof WorkOrderPhotoScalarFieldEnum)[keyof typeof WorkOrderPhotoScalarFieldEnum]


  export const WorkPauseScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    reason: 'reason',
    pausedAt: 'pausedAt',
    resumedAt: 'resumedAt',
    duration: 'duration',
    observations: 'observations'
  };

  export type WorkPauseScalarFieldEnum = (typeof WorkPauseScalarFieldEnum)[keyof typeof WorkPauseScalarFieldEnum]


  export const SparePartScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    category: 'category',
    unitOfMeasure: 'unitOfMeasure',
    unitPrice: 'unitPrice',
    currentStock: 'currentStock',
    minStock: 'minStock',
    maxStock: 'maxStock',
    location: 'location',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SparePartScalarFieldEnum = (typeof SparePartScalarFieldEnum)[keyof typeof SparePartScalarFieldEnum]


  export const WorkOrderSparePartScalarFieldEnum: {
    id: 'id',
    workOrderId: 'workOrderId',
    sparePartId: 'sparePartId',
    quantityRequested: 'quantityRequested',
    quantityDelivered: 'quantityDelivered',
    status: 'status',
    requestedAt: 'requestedAt',
    deliveredAt: 'deliveredAt',
    observations: 'observations'
  };

  export type WorkOrderSparePartScalarFieldEnum = (typeof WorkOrderSparePartScalarFieldEnum)[keyof typeof WorkOrderSparePartScalarFieldEnum]


  export const SparePartMovementScalarFieldEnum: {
    id: 'id',
    sparePartId: 'sparePartId',
    movementType: 'movementType',
    quantity: 'quantity',
    previousStock: 'previousStock',
    newStock: 'newStock',
    reason: 'reason',
    reference: 'reference',
    createdAt: 'createdAt'
  };

  export type SparePartMovementScalarFieldEnum = (typeof SparePartMovementScalarFieldEnum)[keyof typeof SparePartMovementScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const WorkshopScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    regionId: 'regionId',
    address: 'address',
    city: 'city',
    phone: 'phone',
    capacity: 'capacity',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkshopScalarFieldEnum = (typeof WorkshopScalarFieldEnum)[keyof typeof WorkshopScalarFieldEnum]


  export const WorkshopScheduleScalarFieldEnum: {
    id: 'id',
    workshopId: 'workshopId',
    dayOfWeek: 'dayOfWeek',
    openTime: 'openTime',
    closeTime: 'closeTime',
    isActive: 'isActive'
  };

  export type WorkshopScheduleScalarFieldEnum = (typeof WorkshopScheduleScalarFieldEnum)[keyof typeof WorkshopScheduleScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    url: 'url',
    relatedTo: 'relatedTo',
    relatedId: 'relatedId',
    uploadedAt: 'uploadedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    relatedTo: 'relatedTo',
    relatedId: 'relatedId',
    isRead: 'isRead',
    readAt: 'readAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    rut?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    workshopId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    workshop?: XOR<WorkshopNullableRelationFilter, WorkshopWhereInput> | null
    createdWorkOrders?: WorkOrderListRelationFilter
    assignedWorkOrders?: WorkOrderListRelationFilter
    vehicleEntries?: VehicleEntryListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    rut?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrderInput | SortOrder
    roleId?: SortOrder
    workshopId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    workshop?: WorkshopOrderByWithRelationInput
    createdWorkOrders?: WorkOrderOrderByRelationAggregateInput
    assignedWorkOrders?: WorkOrderOrderByRelationAggregateInput
    vehicleEntries?: VehicleEntryOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rut?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    workshopId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    workshop?: XOR<WorkshopNullableRelationFilter, WorkshopWhereInput> | null
    createdWorkOrders?: WorkOrderListRelationFilter
    assignedWorkOrders?: WorkOrderListRelationFilter
    vehicleEntries?: VehicleEntryListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "rut" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    rut?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrderInput | SortOrder
    roleId?: SortOrder
    workshopId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    rut?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    roleId?: StringWithAggregatesFilter<"User"> | string
    workshopId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    permissions?: RolePermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    roles?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    roles?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    resource_action?: PermissionResourceActionCompoundUniqueInput
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    roles?: RolePermissionListRelationFilter
  }, "id" | "resource_action">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    resourceId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type VehicleWhereInput = {
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    id?: StringFilter<"Vehicle"> | string
    licensePlate?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    brand?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    vin?: StringNullableFilter<"Vehicle"> | string | null
    fleetNumber?: StringNullableFilter<"Vehicle"> | string | null
    regionId?: StringFilter<"Vehicle"> | string
    status?: StringFilter<"Vehicle"> | string
    isActive?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    entries?: VehicleEntryListRelationFilter
    workOrders?: WorkOrderListRelationFilter
  }

  export type VehicleOrderByWithRelationInput = {
    id?: SortOrder
    licensePlate?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    vin?: SortOrderInput | SortOrder
    fleetNumber?: SortOrderInput | SortOrder
    regionId?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    entries?: VehicleEntryOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
  }

  export type VehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    licensePlate?: string
    vin?: string
    fleetNumber?: string
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    vehicleType?: StringFilter<"Vehicle"> | string
    brand?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    regionId?: StringFilter<"Vehicle"> | string
    status?: StringFilter<"Vehicle"> | string
    isActive?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    entries?: VehicleEntryListRelationFilter
    workOrders?: WorkOrderListRelationFilter
  }, "id" | "licensePlate" | "vin" | "fleetNumber">

  export type VehicleOrderByWithAggregationInput = {
    id?: SortOrder
    licensePlate?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    vin?: SortOrderInput | SortOrder
    fleetNumber?: SortOrderInput | SortOrder
    regionId?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VehicleCountOrderByAggregateInput
    _avg?: VehicleAvgOrderByAggregateInput
    _max?: VehicleMaxOrderByAggregateInput
    _min?: VehicleMinOrderByAggregateInput
    _sum?: VehicleSumOrderByAggregateInput
  }

  export type VehicleScalarWhereWithAggregatesInput = {
    AND?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    OR?: VehicleScalarWhereWithAggregatesInput[]
    NOT?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vehicle"> | string
    licensePlate?: StringWithAggregatesFilter<"Vehicle"> | string
    vehicleType?: StringWithAggregatesFilter<"Vehicle"> | string
    brand?: StringWithAggregatesFilter<"Vehicle"> | string
    model?: StringWithAggregatesFilter<"Vehicle"> | string
    year?: IntWithAggregatesFilter<"Vehicle"> | number
    vin?: StringNullableWithAggregatesFilter<"Vehicle"> | string | null
    fleetNumber?: StringNullableWithAggregatesFilter<"Vehicle"> | string | null
    regionId?: StringWithAggregatesFilter<"Vehicle"> | string
    status?: StringWithAggregatesFilter<"Vehicle"> | string
    isActive?: BoolWithAggregatesFilter<"Vehicle"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
  }

  export type VehicleEntryWhereInput = {
    AND?: VehicleEntryWhereInput | VehicleEntryWhereInput[]
    OR?: VehicleEntryWhereInput[]
    NOT?: VehicleEntryWhereInput | VehicleEntryWhereInput[]
    id?: StringFilter<"VehicleEntry"> | string
    entryCode?: StringFilter<"VehicleEntry"> | string
    vehicleId?: StringFilter<"VehicleEntry"> | string
    workshopId?: StringFilter<"VehicleEntry"> | string
    driverRut?: StringFilter<"VehicleEntry"> | string
    driverName?: StringFilter<"VehicleEntry"> | string
    driverPhone?: StringNullableFilter<"VehicleEntry"> | string | null
    entryDate?: DateTimeFilter<"VehicleEntry"> | Date | string
    exitDate?: DateTimeNullableFilter<"VehicleEntry"> | Date | string | null
    entryKm?: IntFilter<"VehicleEntry"> | number
    exitKm?: IntNullableFilter<"VehicleEntry"> | number | null
    fuelLevel?: StringFilter<"VehicleEntry"> | string
    hasKeys?: BoolFilter<"VehicleEntry"> | boolean
    observations?: StringNullableFilter<"VehicleEntry"> | string | null
    photos?: JsonNullableFilter<"VehicleEntry">
    status?: StringFilter<"VehicleEntry"> | string
    createdById?: StringFilter<"VehicleEntry"> | string
    createdAt?: DateTimeFilter<"VehicleEntry"> | Date | string
    updatedAt?: DateTimeFilter<"VehicleEntry"> | Date | string
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    workOrders?: WorkOrderListRelationFilter
    keyControl?: XOR<KeyControlNullableRelationFilter, KeyControlWhereInput> | null
  }

  export type VehicleEntryOrderByWithRelationInput = {
    id?: SortOrder
    entryCode?: SortOrder
    vehicleId?: SortOrder
    workshopId?: SortOrder
    driverRut?: SortOrder
    driverName?: SortOrder
    driverPhone?: SortOrderInput | SortOrder
    entryDate?: SortOrder
    exitDate?: SortOrderInput | SortOrder
    entryKm?: SortOrder
    exitKm?: SortOrderInput | SortOrder
    fuelLevel?: SortOrder
    hasKeys?: SortOrder
    observations?: SortOrderInput | SortOrder
    photos?: SortOrderInput | SortOrder
    status?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vehicle?: VehicleOrderByWithRelationInput
    workshop?: WorkshopOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
    keyControl?: KeyControlOrderByWithRelationInput
  }

  export type VehicleEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entryCode?: string
    AND?: VehicleEntryWhereInput | VehicleEntryWhereInput[]
    OR?: VehicleEntryWhereInput[]
    NOT?: VehicleEntryWhereInput | VehicleEntryWhereInput[]
    vehicleId?: StringFilter<"VehicleEntry"> | string
    workshopId?: StringFilter<"VehicleEntry"> | string
    driverRut?: StringFilter<"VehicleEntry"> | string
    driverName?: StringFilter<"VehicleEntry"> | string
    driverPhone?: StringNullableFilter<"VehicleEntry"> | string | null
    entryDate?: DateTimeFilter<"VehicleEntry"> | Date | string
    exitDate?: DateTimeNullableFilter<"VehicleEntry"> | Date | string | null
    entryKm?: IntFilter<"VehicleEntry"> | number
    exitKm?: IntNullableFilter<"VehicleEntry"> | number | null
    fuelLevel?: StringFilter<"VehicleEntry"> | string
    hasKeys?: BoolFilter<"VehicleEntry"> | boolean
    observations?: StringNullableFilter<"VehicleEntry"> | string | null
    photos?: JsonNullableFilter<"VehicleEntry">
    status?: StringFilter<"VehicleEntry"> | string
    createdById?: StringFilter<"VehicleEntry"> | string
    createdAt?: DateTimeFilter<"VehicleEntry"> | Date | string
    updatedAt?: DateTimeFilter<"VehicleEntry"> | Date | string
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    workOrders?: WorkOrderListRelationFilter
    keyControl?: XOR<KeyControlNullableRelationFilter, KeyControlWhereInput> | null
  }, "id" | "entryCode">

  export type VehicleEntryOrderByWithAggregationInput = {
    id?: SortOrder
    entryCode?: SortOrder
    vehicleId?: SortOrder
    workshopId?: SortOrder
    driverRut?: SortOrder
    driverName?: SortOrder
    driverPhone?: SortOrderInput | SortOrder
    entryDate?: SortOrder
    exitDate?: SortOrderInput | SortOrder
    entryKm?: SortOrder
    exitKm?: SortOrderInput | SortOrder
    fuelLevel?: SortOrder
    hasKeys?: SortOrder
    observations?: SortOrderInput | SortOrder
    photos?: SortOrderInput | SortOrder
    status?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VehicleEntryCountOrderByAggregateInput
    _avg?: VehicleEntryAvgOrderByAggregateInput
    _max?: VehicleEntryMaxOrderByAggregateInput
    _min?: VehicleEntryMinOrderByAggregateInput
    _sum?: VehicleEntrySumOrderByAggregateInput
  }

  export type VehicleEntryScalarWhereWithAggregatesInput = {
    AND?: VehicleEntryScalarWhereWithAggregatesInput | VehicleEntryScalarWhereWithAggregatesInput[]
    OR?: VehicleEntryScalarWhereWithAggregatesInput[]
    NOT?: VehicleEntryScalarWhereWithAggregatesInput | VehicleEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VehicleEntry"> | string
    entryCode?: StringWithAggregatesFilter<"VehicleEntry"> | string
    vehicleId?: StringWithAggregatesFilter<"VehicleEntry"> | string
    workshopId?: StringWithAggregatesFilter<"VehicleEntry"> | string
    driverRut?: StringWithAggregatesFilter<"VehicleEntry"> | string
    driverName?: StringWithAggregatesFilter<"VehicleEntry"> | string
    driverPhone?: StringNullableWithAggregatesFilter<"VehicleEntry"> | string | null
    entryDate?: DateTimeWithAggregatesFilter<"VehicleEntry"> | Date | string
    exitDate?: DateTimeNullableWithAggregatesFilter<"VehicleEntry"> | Date | string | null
    entryKm?: IntWithAggregatesFilter<"VehicleEntry"> | number
    exitKm?: IntNullableWithAggregatesFilter<"VehicleEntry"> | number | null
    fuelLevel?: StringWithAggregatesFilter<"VehicleEntry"> | string
    hasKeys?: BoolWithAggregatesFilter<"VehicleEntry"> | boolean
    observations?: StringNullableWithAggregatesFilter<"VehicleEntry"> | string | null
    photos?: JsonNullableWithAggregatesFilter<"VehicleEntry">
    status?: StringWithAggregatesFilter<"VehicleEntry"> | string
    createdById?: StringWithAggregatesFilter<"VehicleEntry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VehicleEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VehicleEntry"> | Date | string
  }

  export type KeyControlWhereInput = {
    AND?: KeyControlWhereInput | KeyControlWhereInput[]
    OR?: KeyControlWhereInput[]
    NOT?: KeyControlWhereInput | KeyControlWhereInput[]
    id?: StringFilter<"KeyControl"> | string
    entryId?: StringFilter<"KeyControl"> | string
    keyLocation?: StringFilter<"KeyControl"> | string
    deliveredTo?: StringNullableFilter<"KeyControl"> | string | null
    deliveredAt?: DateTimeNullableFilter<"KeyControl"> | Date | string | null
    returnedBy?: StringNullableFilter<"KeyControl"> | string | null
    returnedAt?: DateTimeNullableFilter<"KeyControl"> | Date | string | null
    observations?: StringNullableFilter<"KeyControl"> | string | null
    createdAt?: DateTimeFilter<"KeyControl"> | Date | string
    updatedAt?: DateTimeFilter<"KeyControl"> | Date | string
    entry?: XOR<VehicleEntryRelationFilter, VehicleEntryWhereInput>
  }

  export type KeyControlOrderByWithRelationInput = {
    id?: SortOrder
    entryId?: SortOrder
    keyLocation?: SortOrder
    deliveredTo?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    returnedBy?: SortOrderInput | SortOrder
    returnedAt?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entry?: VehicleEntryOrderByWithRelationInput
  }

  export type KeyControlWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entryId?: string
    AND?: KeyControlWhereInput | KeyControlWhereInput[]
    OR?: KeyControlWhereInput[]
    NOT?: KeyControlWhereInput | KeyControlWhereInput[]
    keyLocation?: StringFilter<"KeyControl"> | string
    deliveredTo?: StringNullableFilter<"KeyControl"> | string | null
    deliveredAt?: DateTimeNullableFilter<"KeyControl"> | Date | string | null
    returnedBy?: StringNullableFilter<"KeyControl"> | string | null
    returnedAt?: DateTimeNullableFilter<"KeyControl"> | Date | string | null
    observations?: StringNullableFilter<"KeyControl"> | string | null
    createdAt?: DateTimeFilter<"KeyControl"> | Date | string
    updatedAt?: DateTimeFilter<"KeyControl"> | Date | string
    entry?: XOR<VehicleEntryRelationFilter, VehicleEntryWhereInput>
  }, "id" | "entryId">

  export type KeyControlOrderByWithAggregationInput = {
    id?: SortOrder
    entryId?: SortOrder
    keyLocation?: SortOrder
    deliveredTo?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    returnedBy?: SortOrderInput | SortOrder
    returnedAt?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KeyControlCountOrderByAggregateInput
    _max?: KeyControlMaxOrderByAggregateInput
    _min?: KeyControlMinOrderByAggregateInput
  }

  export type KeyControlScalarWhereWithAggregatesInput = {
    AND?: KeyControlScalarWhereWithAggregatesInput | KeyControlScalarWhereWithAggregatesInput[]
    OR?: KeyControlScalarWhereWithAggregatesInput[]
    NOT?: KeyControlScalarWhereWithAggregatesInput | KeyControlScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KeyControl"> | string
    entryId?: StringWithAggregatesFilter<"KeyControl"> | string
    keyLocation?: StringWithAggregatesFilter<"KeyControl"> | string
    deliveredTo?: StringNullableWithAggregatesFilter<"KeyControl"> | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"KeyControl"> | Date | string | null
    returnedBy?: StringNullableWithAggregatesFilter<"KeyControl"> | string | null
    returnedAt?: DateTimeNullableWithAggregatesFilter<"KeyControl"> | Date | string | null
    observations?: StringNullableWithAggregatesFilter<"KeyControl"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KeyControl"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KeyControl"> | Date | string
  }

  export type WorkOrderWhereInput = {
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    orderNumber?: StringFilter<"WorkOrder"> | string
    vehicleId?: StringFilter<"WorkOrder"> | string
    entryId?: StringFilter<"WorkOrder"> | string
    workshopId?: StringFilter<"WorkOrder"> | string
    workType?: StringFilter<"WorkOrder"> | string
    priority?: StringFilter<"WorkOrder"> | string
    description?: StringFilter<"WorkOrder"> | string
    estimatedHours?: FloatNullableFilter<"WorkOrder"> | number | null
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    currentStatus?: StringFilter<"WorkOrder"> | string
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    totalHours?: FloatNullableFilter<"WorkOrder"> | number | null
    observations?: StringNullableFilter<"WorkOrder"> | string | null
    createdById?: StringFilter<"WorkOrder"> | string
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
    entry?: XOR<VehicleEntryRelationFilter, VehicleEntryWhereInput>
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    statuses?: WorkOrderStatusListRelationFilter
    photos?: WorkOrderPhotoListRelationFilter
    spareParts?: WorkOrderSparePartListRelationFilter
    pauses?: WorkPauseListRelationFilter
  }

  export type WorkOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    vehicleId?: SortOrder
    entryId?: SortOrder
    workshopId?: SortOrder
    workType?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    currentStatus?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    totalHours?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vehicle?: VehicleOrderByWithRelationInput
    entry?: VehicleEntryOrderByWithRelationInput
    workshop?: WorkshopOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    statuses?: WorkOrderStatusOrderByRelationAggregateInput
    photos?: WorkOrderPhotoOrderByRelationAggregateInput
    spareParts?: WorkOrderSparePartOrderByRelationAggregateInput
    pauses?: WorkPauseOrderByRelationAggregateInput
  }

  export type WorkOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderNumber?: string
    AND?: WorkOrderWhereInput | WorkOrderWhereInput[]
    OR?: WorkOrderWhereInput[]
    NOT?: WorkOrderWhereInput | WorkOrderWhereInput[]
    vehicleId?: StringFilter<"WorkOrder"> | string
    entryId?: StringFilter<"WorkOrder"> | string
    workshopId?: StringFilter<"WorkOrder"> | string
    workType?: StringFilter<"WorkOrder"> | string
    priority?: StringFilter<"WorkOrder"> | string
    description?: StringFilter<"WorkOrder"> | string
    estimatedHours?: FloatNullableFilter<"WorkOrder"> | number | null
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    currentStatus?: StringFilter<"WorkOrder"> | string
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    totalHours?: FloatNullableFilter<"WorkOrder"> | number | null
    observations?: StringNullableFilter<"WorkOrder"> | string | null
    createdById?: StringFilter<"WorkOrder"> | string
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
    entry?: XOR<VehicleEntryRelationFilter, VehicleEntryWhereInput>
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    statuses?: WorkOrderStatusListRelationFilter
    photos?: WorkOrderPhotoListRelationFilter
    spareParts?: WorkOrderSparePartListRelationFilter
    pauses?: WorkPauseListRelationFilter
  }, "id" | "orderNumber">

  export type WorkOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    vehicleId?: SortOrder
    entryId?: SortOrder
    workshopId?: SortOrder
    workType?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    currentStatus?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    totalHours?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkOrderCountOrderByAggregateInput
    _avg?: WorkOrderAvgOrderByAggregateInput
    _max?: WorkOrderMaxOrderByAggregateInput
    _min?: WorkOrderMinOrderByAggregateInput
    _sum?: WorkOrderSumOrderByAggregateInput
  }

  export type WorkOrderScalarWhereWithAggregatesInput = {
    AND?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    OR?: WorkOrderScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderScalarWhereWithAggregatesInput | WorkOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrder"> | string
    orderNumber?: StringWithAggregatesFilter<"WorkOrder"> | string
    vehicleId?: StringWithAggregatesFilter<"WorkOrder"> | string
    entryId?: StringWithAggregatesFilter<"WorkOrder"> | string
    workshopId?: StringWithAggregatesFilter<"WorkOrder"> | string
    workType?: StringWithAggregatesFilter<"WorkOrder"> | string
    priority?: StringWithAggregatesFilter<"WorkOrder"> | string
    description?: StringWithAggregatesFilter<"WorkOrder"> | string
    estimatedHours?: FloatNullableWithAggregatesFilter<"WorkOrder"> | number | null
    assignedToId?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    currentStatus?: StringWithAggregatesFilter<"WorkOrder"> | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"WorkOrder"> | Date | string | null
    totalHours?: FloatNullableWithAggregatesFilter<"WorkOrder"> | number | null
    observations?: StringNullableWithAggregatesFilter<"WorkOrder"> | string | null
    createdById?: StringWithAggregatesFilter<"WorkOrder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkOrder"> | Date | string
  }

  export type WorkOrderStatusWhereInput = {
    AND?: WorkOrderStatusWhereInput | WorkOrderStatusWhereInput[]
    OR?: WorkOrderStatusWhereInput[]
    NOT?: WorkOrderStatusWhereInput | WorkOrderStatusWhereInput[]
    id?: StringFilter<"WorkOrderStatus"> | string
    workOrderId?: StringFilter<"WorkOrderStatus"> | string
    status?: StringFilter<"WorkOrderStatus"> | string
    observations?: StringNullableFilter<"WorkOrderStatus"> | string | null
    changedById?: StringFilter<"WorkOrderStatus"> | string
    changedAt?: DateTimeFilter<"WorkOrderStatus"> | Date | string
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }

  export type WorkOrderStatusOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    status?: SortOrder
    observations?: SortOrderInput | SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
  }

  export type WorkOrderStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderStatusWhereInput | WorkOrderStatusWhereInput[]
    OR?: WorkOrderStatusWhereInput[]
    NOT?: WorkOrderStatusWhereInput | WorkOrderStatusWhereInput[]
    workOrderId?: StringFilter<"WorkOrderStatus"> | string
    status?: StringFilter<"WorkOrderStatus"> | string
    observations?: StringNullableFilter<"WorkOrderStatus"> | string | null
    changedById?: StringFilter<"WorkOrderStatus"> | string
    changedAt?: DateTimeFilter<"WorkOrderStatus"> | Date | string
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }, "id">

  export type WorkOrderStatusOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    status?: SortOrder
    observations?: SortOrderInput | SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    _count?: WorkOrderStatusCountOrderByAggregateInput
    _max?: WorkOrderStatusMaxOrderByAggregateInput
    _min?: WorkOrderStatusMinOrderByAggregateInput
  }

  export type WorkOrderStatusScalarWhereWithAggregatesInput = {
    AND?: WorkOrderStatusScalarWhereWithAggregatesInput | WorkOrderStatusScalarWhereWithAggregatesInput[]
    OR?: WorkOrderStatusScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderStatusScalarWhereWithAggregatesInput | WorkOrderStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrderStatus"> | string
    workOrderId?: StringWithAggregatesFilter<"WorkOrderStatus"> | string
    status?: StringWithAggregatesFilter<"WorkOrderStatus"> | string
    observations?: StringNullableWithAggregatesFilter<"WorkOrderStatus"> | string | null
    changedById?: StringWithAggregatesFilter<"WorkOrderStatus"> | string
    changedAt?: DateTimeWithAggregatesFilter<"WorkOrderStatus"> | Date | string
  }

  export type WorkOrderPhotoWhereInput = {
    AND?: WorkOrderPhotoWhereInput | WorkOrderPhotoWhereInput[]
    OR?: WorkOrderPhotoWhereInput[]
    NOT?: WorkOrderPhotoWhereInput | WorkOrderPhotoWhereInput[]
    id?: StringFilter<"WorkOrderPhoto"> | string
    workOrderId?: StringFilter<"WorkOrderPhoto"> | string
    url?: StringFilter<"WorkOrderPhoto"> | string
    description?: StringNullableFilter<"WorkOrderPhoto"> | string | null
    photoType?: StringFilter<"WorkOrderPhoto"> | string
    uploadedAt?: DateTimeFilter<"WorkOrderPhoto"> | Date | string
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }

  export type WorkOrderPhotoOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    url?: SortOrder
    description?: SortOrderInput | SortOrder
    photoType?: SortOrder
    uploadedAt?: SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
  }

  export type WorkOrderPhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderPhotoWhereInput | WorkOrderPhotoWhereInput[]
    OR?: WorkOrderPhotoWhereInput[]
    NOT?: WorkOrderPhotoWhereInput | WorkOrderPhotoWhereInput[]
    workOrderId?: StringFilter<"WorkOrderPhoto"> | string
    url?: StringFilter<"WorkOrderPhoto"> | string
    description?: StringNullableFilter<"WorkOrderPhoto"> | string | null
    photoType?: StringFilter<"WorkOrderPhoto"> | string
    uploadedAt?: DateTimeFilter<"WorkOrderPhoto"> | Date | string
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }, "id">

  export type WorkOrderPhotoOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    url?: SortOrder
    description?: SortOrderInput | SortOrder
    photoType?: SortOrder
    uploadedAt?: SortOrder
    _count?: WorkOrderPhotoCountOrderByAggregateInput
    _max?: WorkOrderPhotoMaxOrderByAggregateInput
    _min?: WorkOrderPhotoMinOrderByAggregateInput
  }

  export type WorkOrderPhotoScalarWhereWithAggregatesInput = {
    AND?: WorkOrderPhotoScalarWhereWithAggregatesInput | WorkOrderPhotoScalarWhereWithAggregatesInput[]
    OR?: WorkOrderPhotoScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderPhotoScalarWhereWithAggregatesInput | WorkOrderPhotoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrderPhoto"> | string
    workOrderId?: StringWithAggregatesFilter<"WorkOrderPhoto"> | string
    url?: StringWithAggregatesFilter<"WorkOrderPhoto"> | string
    description?: StringNullableWithAggregatesFilter<"WorkOrderPhoto"> | string | null
    photoType?: StringWithAggregatesFilter<"WorkOrderPhoto"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"WorkOrderPhoto"> | Date | string
  }

  export type WorkPauseWhereInput = {
    AND?: WorkPauseWhereInput | WorkPauseWhereInput[]
    OR?: WorkPauseWhereInput[]
    NOT?: WorkPauseWhereInput | WorkPauseWhereInput[]
    id?: StringFilter<"WorkPause"> | string
    workOrderId?: StringFilter<"WorkPause"> | string
    reason?: StringFilter<"WorkPause"> | string
    pausedAt?: DateTimeFilter<"WorkPause"> | Date | string
    resumedAt?: DateTimeNullableFilter<"WorkPause"> | Date | string | null
    duration?: IntNullableFilter<"WorkPause"> | number | null
    observations?: StringNullableFilter<"WorkPause"> | string | null
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }

  export type WorkPauseOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    reason?: SortOrder
    pausedAt?: SortOrder
    resumedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
  }

  export type WorkPauseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkPauseWhereInput | WorkPauseWhereInput[]
    OR?: WorkPauseWhereInput[]
    NOT?: WorkPauseWhereInput | WorkPauseWhereInput[]
    workOrderId?: StringFilter<"WorkPause"> | string
    reason?: StringFilter<"WorkPause"> | string
    pausedAt?: DateTimeFilter<"WorkPause"> | Date | string
    resumedAt?: DateTimeNullableFilter<"WorkPause"> | Date | string | null
    duration?: IntNullableFilter<"WorkPause"> | number | null
    observations?: StringNullableFilter<"WorkPause"> | string | null
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
  }, "id">

  export type WorkPauseOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    reason?: SortOrder
    pausedAt?: SortOrder
    resumedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    _count?: WorkPauseCountOrderByAggregateInput
    _avg?: WorkPauseAvgOrderByAggregateInput
    _max?: WorkPauseMaxOrderByAggregateInput
    _min?: WorkPauseMinOrderByAggregateInput
    _sum?: WorkPauseSumOrderByAggregateInput
  }

  export type WorkPauseScalarWhereWithAggregatesInput = {
    AND?: WorkPauseScalarWhereWithAggregatesInput | WorkPauseScalarWhereWithAggregatesInput[]
    OR?: WorkPauseScalarWhereWithAggregatesInput[]
    NOT?: WorkPauseScalarWhereWithAggregatesInput | WorkPauseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkPause"> | string
    workOrderId?: StringWithAggregatesFilter<"WorkPause"> | string
    reason?: StringWithAggregatesFilter<"WorkPause"> | string
    pausedAt?: DateTimeWithAggregatesFilter<"WorkPause"> | Date | string
    resumedAt?: DateTimeNullableWithAggregatesFilter<"WorkPause"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"WorkPause"> | number | null
    observations?: StringNullableWithAggregatesFilter<"WorkPause"> | string | null
  }

  export type SparePartWhereInput = {
    AND?: SparePartWhereInput | SparePartWhereInput[]
    OR?: SparePartWhereInput[]
    NOT?: SparePartWhereInput | SparePartWhereInput[]
    id?: StringFilter<"SparePart"> | string
    code?: StringFilter<"SparePart"> | string
    name?: StringFilter<"SparePart"> | string
    description?: StringNullableFilter<"SparePart"> | string | null
    category?: StringFilter<"SparePart"> | string
    unitOfMeasure?: StringFilter<"SparePart"> | string
    unitPrice?: FloatFilter<"SparePart"> | number
    currentStock?: IntFilter<"SparePart"> | number
    minStock?: IntFilter<"SparePart"> | number
    maxStock?: IntFilter<"SparePart"> | number
    location?: StringNullableFilter<"SparePart"> | string | null
    isActive?: BoolFilter<"SparePart"> | boolean
    createdAt?: DateTimeFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeFilter<"SparePart"> | Date | string
    workOrders?: WorkOrderSparePartListRelationFilter
    movements?: SparePartMovementListRelationFilter
  }

  export type SparePartOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    unitOfMeasure?: SortOrder
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    location?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workOrders?: WorkOrderSparePartOrderByRelationAggregateInput
    movements?: SparePartMovementOrderByRelationAggregateInput
  }

  export type SparePartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: SparePartWhereInput | SparePartWhereInput[]
    OR?: SparePartWhereInput[]
    NOT?: SparePartWhereInput | SparePartWhereInput[]
    name?: StringFilter<"SparePart"> | string
    description?: StringNullableFilter<"SparePart"> | string | null
    category?: StringFilter<"SparePart"> | string
    unitOfMeasure?: StringFilter<"SparePart"> | string
    unitPrice?: FloatFilter<"SparePart"> | number
    currentStock?: IntFilter<"SparePart"> | number
    minStock?: IntFilter<"SparePart"> | number
    maxStock?: IntFilter<"SparePart"> | number
    location?: StringNullableFilter<"SparePart"> | string | null
    isActive?: BoolFilter<"SparePart"> | boolean
    createdAt?: DateTimeFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeFilter<"SparePart"> | Date | string
    workOrders?: WorkOrderSparePartListRelationFilter
    movements?: SparePartMovementListRelationFilter
  }, "id" | "code">

  export type SparePartOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    unitOfMeasure?: SortOrder
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    location?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SparePartCountOrderByAggregateInput
    _avg?: SparePartAvgOrderByAggregateInput
    _max?: SparePartMaxOrderByAggregateInput
    _min?: SparePartMinOrderByAggregateInput
    _sum?: SparePartSumOrderByAggregateInput
  }

  export type SparePartScalarWhereWithAggregatesInput = {
    AND?: SparePartScalarWhereWithAggregatesInput | SparePartScalarWhereWithAggregatesInput[]
    OR?: SparePartScalarWhereWithAggregatesInput[]
    NOT?: SparePartScalarWhereWithAggregatesInput | SparePartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SparePart"> | string
    code?: StringWithAggregatesFilter<"SparePart"> | string
    name?: StringWithAggregatesFilter<"SparePart"> | string
    description?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    category?: StringWithAggregatesFilter<"SparePart"> | string
    unitOfMeasure?: StringWithAggregatesFilter<"SparePart"> | string
    unitPrice?: FloatWithAggregatesFilter<"SparePart"> | number
    currentStock?: IntWithAggregatesFilter<"SparePart"> | number
    minStock?: IntWithAggregatesFilter<"SparePart"> | number
    maxStock?: IntWithAggregatesFilter<"SparePart"> | number
    location?: StringNullableWithAggregatesFilter<"SparePart"> | string | null
    isActive?: BoolWithAggregatesFilter<"SparePart"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SparePart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SparePart"> | Date | string
  }

  export type WorkOrderSparePartWhereInput = {
    AND?: WorkOrderSparePartWhereInput | WorkOrderSparePartWhereInput[]
    OR?: WorkOrderSparePartWhereInput[]
    NOT?: WorkOrderSparePartWhereInput | WorkOrderSparePartWhereInput[]
    id?: StringFilter<"WorkOrderSparePart"> | string
    workOrderId?: StringFilter<"WorkOrderSparePart"> | string
    sparePartId?: StringFilter<"WorkOrderSparePart"> | string
    quantityRequested?: IntFilter<"WorkOrderSparePart"> | number
    quantityDelivered?: IntNullableFilter<"WorkOrderSparePart"> | number | null
    status?: StringFilter<"WorkOrderSparePart"> | string
    requestedAt?: DateTimeFilter<"WorkOrderSparePart"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"WorkOrderSparePart"> | Date | string | null
    observations?: StringNullableFilter<"WorkOrderSparePart"> | string | null
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
    sparePart?: XOR<SparePartRelationFilter, SparePartWhereInput>
  }

  export type WorkOrderSparePartOrderByWithRelationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    sparePartId?: SortOrder
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrderInput | SortOrder
    status?: SortOrder
    requestedAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    workOrder?: WorkOrderOrderByWithRelationInput
    sparePart?: SparePartOrderByWithRelationInput
  }

  export type WorkOrderSparePartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkOrderSparePartWhereInput | WorkOrderSparePartWhereInput[]
    OR?: WorkOrderSparePartWhereInput[]
    NOT?: WorkOrderSparePartWhereInput | WorkOrderSparePartWhereInput[]
    workOrderId?: StringFilter<"WorkOrderSparePart"> | string
    sparePartId?: StringFilter<"WorkOrderSparePart"> | string
    quantityRequested?: IntFilter<"WorkOrderSparePart"> | number
    quantityDelivered?: IntNullableFilter<"WorkOrderSparePart"> | number | null
    status?: StringFilter<"WorkOrderSparePart"> | string
    requestedAt?: DateTimeFilter<"WorkOrderSparePart"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"WorkOrderSparePart"> | Date | string | null
    observations?: StringNullableFilter<"WorkOrderSparePart"> | string | null
    workOrder?: XOR<WorkOrderRelationFilter, WorkOrderWhereInput>
    sparePart?: XOR<SparePartRelationFilter, SparePartWhereInput>
  }, "id">

  export type WorkOrderSparePartOrderByWithAggregationInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    sparePartId?: SortOrder
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrderInput | SortOrder
    status?: SortOrder
    requestedAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    _count?: WorkOrderSparePartCountOrderByAggregateInput
    _avg?: WorkOrderSparePartAvgOrderByAggregateInput
    _max?: WorkOrderSparePartMaxOrderByAggregateInput
    _min?: WorkOrderSparePartMinOrderByAggregateInput
    _sum?: WorkOrderSparePartSumOrderByAggregateInput
  }

  export type WorkOrderSparePartScalarWhereWithAggregatesInput = {
    AND?: WorkOrderSparePartScalarWhereWithAggregatesInput | WorkOrderSparePartScalarWhereWithAggregatesInput[]
    OR?: WorkOrderSparePartScalarWhereWithAggregatesInput[]
    NOT?: WorkOrderSparePartScalarWhereWithAggregatesInput | WorkOrderSparePartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkOrderSparePart"> | string
    workOrderId?: StringWithAggregatesFilter<"WorkOrderSparePart"> | string
    sparePartId?: StringWithAggregatesFilter<"WorkOrderSparePart"> | string
    quantityRequested?: IntWithAggregatesFilter<"WorkOrderSparePart"> | number
    quantityDelivered?: IntNullableWithAggregatesFilter<"WorkOrderSparePart"> | number | null
    status?: StringWithAggregatesFilter<"WorkOrderSparePart"> | string
    requestedAt?: DateTimeWithAggregatesFilter<"WorkOrderSparePart"> | Date | string
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"WorkOrderSparePart"> | Date | string | null
    observations?: StringNullableWithAggregatesFilter<"WorkOrderSparePart"> | string | null
  }

  export type SparePartMovementWhereInput = {
    AND?: SparePartMovementWhereInput | SparePartMovementWhereInput[]
    OR?: SparePartMovementWhereInput[]
    NOT?: SparePartMovementWhereInput | SparePartMovementWhereInput[]
    id?: StringFilter<"SparePartMovement"> | string
    sparePartId?: StringFilter<"SparePartMovement"> | string
    movementType?: StringFilter<"SparePartMovement"> | string
    quantity?: IntFilter<"SparePartMovement"> | number
    previousStock?: IntFilter<"SparePartMovement"> | number
    newStock?: IntFilter<"SparePartMovement"> | number
    reason?: StringFilter<"SparePartMovement"> | string
    reference?: StringNullableFilter<"SparePartMovement"> | string | null
    createdAt?: DateTimeFilter<"SparePartMovement"> | Date | string
    sparePart?: XOR<SparePartRelationFilter, SparePartWhereInput>
  }

  export type SparePartMovementOrderByWithRelationInput = {
    id?: SortOrder
    sparePartId?: SortOrder
    movementType?: SortOrder
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
    reason?: SortOrder
    reference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sparePart?: SparePartOrderByWithRelationInput
  }

  export type SparePartMovementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SparePartMovementWhereInput | SparePartMovementWhereInput[]
    OR?: SparePartMovementWhereInput[]
    NOT?: SparePartMovementWhereInput | SparePartMovementWhereInput[]
    sparePartId?: StringFilter<"SparePartMovement"> | string
    movementType?: StringFilter<"SparePartMovement"> | string
    quantity?: IntFilter<"SparePartMovement"> | number
    previousStock?: IntFilter<"SparePartMovement"> | number
    newStock?: IntFilter<"SparePartMovement"> | number
    reason?: StringFilter<"SparePartMovement"> | string
    reference?: StringNullableFilter<"SparePartMovement"> | string | null
    createdAt?: DateTimeFilter<"SparePartMovement"> | Date | string
    sparePart?: XOR<SparePartRelationFilter, SparePartWhereInput>
  }, "id">

  export type SparePartMovementOrderByWithAggregationInput = {
    id?: SortOrder
    sparePartId?: SortOrder
    movementType?: SortOrder
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
    reason?: SortOrder
    reference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SparePartMovementCountOrderByAggregateInput
    _avg?: SparePartMovementAvgOrderByAggregateInput
    _max?: SparePartMovementMaxOrderByAggregateInput
    _min?: SparePartMovementMinOrderByAggregateInput
    _sum?: SparePartMovementSumOrderByAggregateInput
  }

  export type SparePartMovementScalarWhereWithAggregatesInput = {
    AND?: SparePartMovementScalarWhereWithAggregatesInput | SparePartMovementScalarWhereWithAggregatesInput[]
    OR?: SparePartMovementScalarWhereWithAggregatesInput[]
    NOT?: SparePartMovementScalarWhereWithAggregatesInput | SparePartMovementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SparePartMovement"> | string
    sparePartId?: StringWithAggregatesFilter<"SparePartMovement"> | string
    movementType?: StringWithAggregatesFilter<"SparePartMovement"> | string
    quantity?: IntWithAggregatesFilter<"SparePartMovement"> | number
    previousStock?: IntWithAggregatesFilter<"SparePartMovement"> | number
    newStock?: IntWithAggregatesFilter<"SparePartMovement"> | number
    reason?: StringWithAggregatesFilter<"SparePartMovement"> | string
    reference?: StringNullableWithAggregatesFilter<"SparePartMovement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SparePartMovement"> | Date | string
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    code?: StringFilter<"Region"> | string
    name?: StringFilter<"Region"> | string
    isActive?: BoolFilter<"Region"> | boolean
    createdAt?: DateTimeFilter<"Region"> | Date | string
    workshops?: WorkshopListRelationFilter
    vehicles?: VehicleListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    workshops?: WorkshopOrderByRelationAggregateInput
    vehicles?: VehicleOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    name?: StringFilter<"Region"> | string
    isActive?: BoolFilter<"Region"> | boolean
    createdAt?: DateTimeFilter<"Region"> | Date | string
    workshops?: WorkshopListRelationFilter
    vehicles?: VehicleListRelationFilter
  }, "id" | "code">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    code?: StringWithAggregatesFilter<"Region"> | string
    name?: StringWithAggregatesFilter<"Region"> | string
    isActive?: BoolWithAggregatesFilter<"Region"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type WorkshopWhereInput = {
    AND?: WorkshopWhereInput | WorkshopWhereInput[]
    OR?: WorkshopWhereInput[]
    NOT?: WorkshopWhereInput | WorkshopWhereInput[]
    id?: StringFilter<"Workshop"> | string
    code?: StringFilter<"Workshop"> | string
    name?: StringFilter<"Workshop"> | string
    regionId?: StringFilter<"Workshop"> | string
    address?: StringFilter<"Workshop"> | string
    city?: StringFilter<"Workshop"> | string
    phone?: StringNullableFilter<"Workshop"> | string | null
    capacity?: IntNullableFilter<"Workshop"> | number | null
    isActive?: BoolFilter<"Workshop"> | boolean
    createdAt?: DateTimeFilter<"Workshop"> | Date | string
    updatedAt?: DateTimeFilter<"Workshop"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    users?: UserListRelationFilter
    entries?: VehicleEntryListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    schedules?: WorkshopScheduleListRelationFilter
  }

  export type WorkshopOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    phone?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    entries?: VehicleEntryOrderByRelationAggregateInput
    workOrders?: WorkOrderOrderByRelationAggregateInput
    schedules?: WorkshopScheduleOrderByRelationAggregateInput
  }

  export type WorkshopWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WorkshopWhereInput | WorkshopWhereInput[]
    OR?: WorkshopWhereInput[]
    NOT?: WorkshopWhereInput | WorkshopWhereInput[]
    name?: StringFilter<"Workshop"> | string
    regionId?: StringFilter<"Workshop"> | string
    address?: StringFilter<"Workshop"> | string
    city?: StringFilter<"Workshop"> | string
    phone?: StringNullableFilter<"Workshop"> | string | null
    capacity?: IntNullableFilter<"Workshop"> | number | null
    isActive?: BoolFilter<"Workshop"> | boolean
    createdAt?: DateTimeFilter<"Workshop"> | Date | string
    updatedAt?: DateTimeFilter<"Workshop"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    users?: UserListRelationFilter
    entries?: VehicleEntryListRelationFilter
    workOrders?: WorkOrderListRelationFilter
    schedules?: WorkshopScheduleListRelationFilter
  }, "id" | "code">

  export type WorkshopOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    phone?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkshopCountOrderByAggregateInput
    _avg?: WorkshopAvgOrderByAggregateInput
    _max?: WorkshopMaxOrderByAggregateInput
    _min?: WorkshopMinOrderByAggregateInput
    _sum?: WorkshopSumOrderByAggregateInput
  }

  export type WorkshopScalarWhereWithAggregatesInput = {
    AND?: WorkshopScalarWhereWithAggregatesInput | WorkshopScalarWhereWithAggregatesInput[]
    OR?: WorkshopScalarWhereWithAggregatesInput[]
    NOT?: WorkshopScalarWhereWithAggregatesInput | WorkshopScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workshop"> | string
    code?: StringWithAggregatesFilter<"Workshop"> | string
    name?: StringWithAggregatesFilter<"Workshop"> | string
    regionId?: StringWithAggregatesFilter<"Workshop"> | string
    address?: StringWithAggregatesFilter<"Workshop"> | string
    city?: StringWithAggregatesFilter<"Workshop"> | string
    phone?: StringNullableWithAggregatesFilter<"Workshop"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"Workshop"> | number | null
    isActive?: BoolWithAggregatesFilter<"Workshop"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Workshop"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workshop"> | Date | string
  }

  export type WorkshopScheduleWhereInput = {
    AND?: WorkshopScheduleWhereInput | WorkshopScheduleWhereInput[]
    OR?: WorkshopScheduleWhereInput[]
    NOT?: WorkshopScheduleWhereInput | WorkshopScheduleWhereInput[]
    id?: StringFilter<"WorkshopSchedule"> | string
    workshopId?: StringFilter<"WorkshopSchedule"> | string
    dayOfWeek?: IntFilter<"WorkshopSchedule"> | number
    openTime?: StringFilter<"WorkshopSchedule"> | string
    closeTime?: StringFilter<"WorkshopSchedule"> | string
    isActive?: BoolFilter<"WorkshopSchedule"> | boolean
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
  }

  export type WorkshopScheduleOrderByWithRelationInput = {
    id?: SortOrder
    workshopId?: SortOrder
    dayOfWeek?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    isActive?: SortOrder
    workshop?: WorkshopOrderByWithRelationInput
  }

  export type WorkshopScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkshopScheduleWhereInput | WorkshopScheduleWhereInput[]
    OR?: WorkshopScheduleWhereInput[]
    NOT?: WorkshopScheduleWhereInput | WorkshopScheduleWhereInput[]
    workshopId?: StringFilter<"WorkshopSchedule"> | string
    dayOfWeek?: IntFilter<"WorkshopSchedule"> | number
    openTime?: StringFilter<"WorkshopSchedule"> | string
    closeTime?: StringFilter<"WorkshopSchedule"> | string
    isActive?: BoolFilter<"WorkshopSchedule"> | boolean
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
  }, "id">

  export type WorkshopScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    workshopId?: SortOrder
    dayOfWeek?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    isActive?: SortOrder
    _count?: WorkshopScheduleCountOrderByAggregateInput
    _avg?: WorkshopScheduleAvgOrderByAggregateInput
    _max?: WorkshopScheduleMaxOrderByAggregateInput
    _min?: WorkshopScheduleMinOrderByAggregateInput
    _sum?: WorkshopScheduleSumOrderByAggregateInput
  }

  export type WorkshopScheduleScalarWhereWithAggregatesInput = {
    AND?: WorkshopScheduleScalarWhereWithAggregatesInput | WorkshopScheduleScalarWhereWithAggregatesInput[]
    OR?: WorkshopScheduleScalarWhereWithAggregatesInput[]
    NOT?: WorkshopScheduleScalarWhereWithAggregatesInput | WorkshopScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkshopSchedule"> | string
    workshopId?: StringWithAggregatesFilter<"WorkshopSchedule"> | string
    dayOfWeek?: IntWithAggregatesFilter<"WorkshopSchedule"> | number
    openTime?: StringWithAggregatesFilter<"WorkshopSchedule"> | string
    closeTime?: StringWithAggregatesFilter<"WorkshopSchedule"> | string
    isActive?: BoolWithAggregatesFilter<"WorkshopSchedule"> | boolean
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    relatedTo?: StringFilter<"Document"> | string
    relatedId?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    name?: StringFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    url?: StringFilter<"Document"> | string
    relatedTo?: StringFilter<"Document"> | string
    relatedId?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    uploadedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    name?: StringWithAggregatesFilter<"Document"> | string
    type?: StringWithAggregatesFilter<"Document"> | string
    url?: StringWithAggregatesFilter<"Document"> | string
    relatedTo?: StringWithAggregatesFilter<"Document"> | string
    relatedId?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    relatedTo?: StringNullableFilter<"Notification"> | string | null
    relatedId?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    relatedTo?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    relatedTo?: StringNullableFilter<"Notification"> | string | null
    relatedId?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    relatedTo?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    relatedTo?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    relatedId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    createdAt?: Date | string
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateInput = {
    roleId: string
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyInput = {
    roleId: string
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleCreateInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutVehiclesInput
    entries?: VehicleEntryCreateNestedManyWithoutVehicleInput
    workOrders?: WorkOrderCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    regionId: string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutVehicleInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutVehiclesNestedInput
    entries?: VehicleEntryUpdateManyWithoutVehicleNestedInput
    workOrders?: WorkOrderUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: VehicleEntryUncheckedUpdateManyWithoutVehicleNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleCreateManyInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    regionId: string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryCreateInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutEntriesInput
    workshop: WorkshopCreateNestedOneWithoutEntriesInput
    createdBy: UserCreateNestedOneWithoutVehicleEntriesInput
    workOrders?: WorkOrderCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlUncheckedCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutEntriesNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutVehicleEntriesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUncheckedUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryCreateManyInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyControlCreateInput = {
    id?: string
    keyLocation: string
    deliveredTo?: string | null
    deliveredAt?: Date | string | null
    returnedBy?: string | null
    returnedAt?: Date | string | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entry: VehicleEntryCreateNestedOneWithoutKeyControlInput
  }

  export type KeyControlUncheckedCreateInput = {
    id?: string
    entryId: string
    keyLocation: string
    deliveredTo?: string | null
    deliveredAt?: Date | string | null
    returnedBy?: string | null
    returnedAt?: Date | string | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeyControlUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entry?: VehicleEntryUpdateOneRequiredWithoutKeyControlNestedInput
  }

  export type KeyControlUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyControlCreateManyInput = {
    id?: string
    entryId: string
    keyLocation: string
    deliveredTo?: string | null
    deliveredAt?: Date | string | null
    returnedBy?: string | null
    returnedAt?: Date | string | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeyControlUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyControlUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderCreateManyInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusCreateInput = {
    id?: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutStatusesInput
  }

  export type WorkOrderStatusUncheckedCreateInput = {
    id?: string
    workOrderId: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
  }

  export type WorkOrderStatusUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutStatusesNestedInput
  }

  export type WorkOrderStatusUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusCreateManyInput = {
    id?: string
    workOrderId: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
  }

  export type WorkOrderStatusUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoCreateInput = {
    id?: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
    workOrder: WorkOrderCreateNestedOneWithoutPhotosInput
  }

  export type WorkOrderPhotoUncheckedCreateInput = {
    id?: string
    workOrderId: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
  }

  export type WorkOrderPhotoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrder?: WorkOrderUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type WorkOrderPhotoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoCreateManyInput = {
    id?: string
    workOrderId: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
  }

  export type WorkOrderPhotoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkPauseCreateInput = {
    id?: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
    workOrder: WorkOrderCreateNestedOneWithoutPausesInput
  }

  export type WorkPauseUncheckedCreateInput = {
    id?: string
    workOrderId: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
  }

  export type WorkPauseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    workOrder?: WorkOrderUpdateOneRequiredWithoutPausesNestedInput
  }

  export type WorkPauseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkPauseCreateManyInput = {
    id?: string
    workOrderId: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
  }

  export type WorkPauseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkPauseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SparePartCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderSparePartCreateNestedManyWithoutSparePartInput
    movements?: SparePartMovementCreateNestedManyWithoutSparePartInput
  }

  export type SparePartUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderSparePartUncheckedCreateNestedManyWithoutSparePartInput
    movements?: SparePartMovementUncheckedCreateNestedManyWithoutSparePartInput
  }

  export type SparePartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderSparePartUpdateManyWithoutSparePartNestedInput
    movements?: SparePartMovementUpdateManyWithoutSparePartNestedInput
  }

  export type SparePartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderSparePartUncheckedUpdateManyWithoutSparePartNestedInput
    movements?: SparePartMovementUncheckedUpdateManyWithoutSparePartNestedInput
  }

  export type SparePartCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SparePartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderSparePartCreateInput = {
    id?: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
    workOrder: WorkOrderCreateNestedOneWithoutSparePartsInput
    sparePart: SparePartCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderSparePartUncheckedCreateInput = {
    id?: string
    workOrderId: string
    sparePartId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type WorkOrderSparePartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    workOrder?: WorkOrderUpdateOneRequiredWithoutSparePartsNestedInput
    sparePart?: SparePartUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderSparePartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderSparePartCreateManyInput = {
    id?: string
    workOrderId: string
    sparePartId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type WorkOrderSparePartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderSparePartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SparePartMovementCreateInput = {
    id?: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
    sparePart: SparePartCreateNestedOneWithoutMovementsInput
  }

  export type SparePartMovementUncheckedCreateInput = {
    id?: string
    sparePartId: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
  }

  export type SparePartMovementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sparePart?: SparePartUpdateOneRequiredWithoutMovementsNestedInput
  }

  export type SparePartMovementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartMovementCreateManyInput = {
    id?: string
    sparePartId: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
  }

  export type SparePartMovementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartMovementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionCreateInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    workshops?: WorkshopCreateNestedManyWithoutRegionInput
    vehicles?: VehicleCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    workshops?: WorkshopUncheckedCreateNestedManyWithoutRegionInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshops?: WorkshopUpdateManyWithoutRegionNestedInput
    vehicles?: VehicleUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshops?: WorkshopUncheckedUpdateManyWithoutRegionNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopCreateInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutWorkshopsInput
    users?: UserCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkshopsNestedInput
    users?: UserUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopCreateManyInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkshopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopScheduleCreateInput = {
    id?: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
    workshop: WorkshopCreateNestedOneWithoutSchedulesInput
  }

  export type WorkshopScheduleUncheckedCreateInput = {
    id?: string
    workshopId: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
  }

  export type WorkshopScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    workshop?: WorkshopUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type WorkshopScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkshopScheduleCreateManyInput = {
    id?: string
    workshopId: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
  }

  export type WorkshopScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkshopScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentCreateInput = {
    id?: string
    name: string
    type: string
    url: string
    relatedTo: string
    relatedId: string
    uploadedAt?: Date | string
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    url: string
    relatedTo: string
    relatedId: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    relatedTo?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    relatedTo?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    name: string
    type: string
    url: string
    relatedTo: string
    relatedId: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    relatedTo?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    relatedTo?: StringFieldUpdateOperationsInput | string
    relatedId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type WorkshopNullableRelationFilter = {
    is?: WorkshopWhereInput | null
    isNot?: WorkshopWhereInput | null
  }

  export type WorkOrderListRelationFilter = {
    every?: WorkOrderWhereInput
    some?: WorkOrderWhereInput
    none?: WorkOrderWhereInput
  }

  export type VehicleEntryListRelationFilter = {
    every?: VehicleEntryWhereInput
    some?: VehicleEntryWhereInput
    none?: VehicleEntryWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehicleEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    roleId?: SortOrder
    workshopId?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    roleId?: SortOrder
    workshopId?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    rut?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    roleId?: SortOrder
    workshopId?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionResourceActionCompoundUniqueInput = {
    resource: string
    action: string
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type VehicleCountOrderByAggregateInput = {
    id?: SortOrder
    licensePlate?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    fleetNumber?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type VehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    licensePlate?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    fleetNumber?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleMinOrderByAggregateInput = {
    id?: SortOrder
    licensePlate?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    fleetNumber?: SortOrder
    regionId?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type VehicleRelationFilter = {
    is?: VehicleWhereInput
    isNot?: VehicleWhereInput
  }

  export type WorkshopRelationFilter = {
    is?: WorkshopWhereInput
    isNot?: WorkshopWhereInput
  }

  export type KeyControlNullableRelationFilter = {
    is?: KeyControlWhereInput | null
    isNot?: KeyControlWhereInput | null
  }

  export type VehicleEntryCountOrderByAggregateInput = {
    id?: SortOrder
    entryCode?: SortOrder
    vehicleId?: SortOrder
    workshopId?: SortOrder
    driverRut?: SortOrder
    driverName?: SortOrder
    driverPhone?: SortOrder
    entryDate?: SortOrder
    exitDate?: SortOrder
    entryKm?: SortOrder
    exitKm?: SortOrder
    fuelLevel?: SortOrder
    hasKeys?: SortOrder
    observations?: SortOrder
    photos?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleEntryAvgOrderByAggregateInput = {
    entryKm?: SortOrder
    exitKm?: SortOrder
  }

  export type VehicleEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    entryCode?: SortOrder
    vehicleId?: SortOrder
    workshopId?: SortOrder
    driverRut?: SortOrder
    driverName?: SortOrder
    driverPhone?: SortOrder
    entryDate?: SortOrder
    exitDate?: SortOrder
    entryKm?: SortOrder
    exitKm?: SortOrder
    fuelLevel?: SortOrder
    hasKeys?: SortOrder
    observations?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleEntryMinOrderByAggregateInput = {
    id?: SortOrder
    entryCode?: SortOrder
    vehicleId?: SortOrder
    workshopId?: SortOrder
    driverRut?: SortOrder
    driverName?: SortOrder
    driverPhone?: SortOrder
    entryDate?: SortOrder
    exitDate?: SortOrder
    entryKm?: SortOrder
    exitKm?: SortOrder
    fuelLevel?: SortOrder
    hasKeys?: SortOrder
    observations?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleEntrySumOrderByAggregateInput = {
    entryKm?: SortOrder
    exitKm?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type VehicleEntryRelationFilter = {
    is?: VehicleEntryWhereInput
    isNot?: VehicleEntryWhereInput
  }

  export type KeyControlCountOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    keyLocation?: SortOrder
    deliveredTo?: SortOrder
    deliveredAt?: SortOrder
    returnedBy?: SortOrder
    returnedAt?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeyControlMaxOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    keyLocation?: SortOrder
    deliveredTo?: SortOrder
    deliveredAt?: SortOrder
    returnedBy?: SortOrder
    returnedAt?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeyControlMinOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    keyLocation?: SortOrder
    deliveredTo?: SortOrder
    deliveredAt?: SortOrder
    returnedBy?: SortOrder
    returnedAt?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WorkOrderStatusListRelationFilter = {
    every?: WorkOrderStatusWhereInput
    some?: WorkOrderStatusWhereInput
    none?: WorkOrderStatusWhereInput
  }

  export type WorkOrderPhotoListRelationFilter = {
    every?: WorkOrderPhotoWhereInput
    some?: WorkOrderPhotoWhereInput
    none?: WorkOrderPhotoWhereInput
  }

  export type WorkOrderSparePartListRelationFilter = {
    every?: WorkOrderSparePartWhereInput
    some?: WorkOrderSparePartWhereInput
    none?: WorkOrderSparePartWhereInput
  }

  export type WorkPauseListRelationFilter = {
    every?: WorkPauseWhereInput
    some?: WorkPauseWhereInput
    none?: WorkPauseWhereInput
  }

  export type WorkOrderStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderPhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderSparePartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkPauseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    vehicleId?: SortOrder
    entryId?: SortOrder
    workshopId?: SortOrder
    workType?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    estimatedHours?: SortOrder
    assignedToId?: SortOrder
    currentStatus?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    totalHours?: SortOrder
    observations?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderAvgOrderByAggregateInput = {
    estimatedHours?: SortOrder
    totalHours?: SortOrder
  }

  export type WorkOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    vehicleId?: SortOrder
    entryId?: SortOrder
    workshopId?: SortOrder
    workType?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    estimatedHours?: SortOrder
    assignedToId?: SortOrder
    currentStatus?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    totalHours?: SortOrder
    observations?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    vehicleId?: SortOrder
    entryId?: SortOrder
    workshopId?: SortOrder
    workType?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    estimatedHours?: SortOrder
    assignedToId?: SortOrder
    currentStatus?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    totalHours?: SortOrder
    observations?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkOrderSumOrderByAggregateInput = {
    estimatedHours?: SortOrder
    totalHours?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type WorkOrderRelationFilter = {
    is?: WorkOrderWhereInput
    isNot?: WorkOrderWhereInput
  }

  export type WorkOrderStatusCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    status?: SortOrder
    observations?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
  }

  export type WorkOrderStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    status?: SortOrder
    observations?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
  }

  export type WorkOrderStatusMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    status?: SortOrder
    observations?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
  }

  export type WorkOrderPhotoCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    url?: SortOrder
    description?: SortOrder
    photoType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type WorkOrderPhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    url?: SortOrder
    description?: SortOrder
    photoType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type WorkOrderPhotoMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    url?: SortOrder
    description?: SortOrder
    photoType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type WorkPauseCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    reason?: SortOrder
    pausedAt?: SortOrder
    resumedAt?: SortOrder
    duration?: SortOrder
    observations?: SortOrder
  }

  export type WorkPauseAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type WorkPauseMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    reason?: SortOrder
    pausedAt?: SortOrder
    resumedAt?: SortOrder
    duration?: SortOrder
    observations?: SortOrder
  }

  export type WorkPauseMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    reason?: SortOrder
    pausedAt?: SortOrder
    resumedAt?: SortOrder
    duration?: SortOrder
    observations?: SortOrder
  }

  export type WorkPauseSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SparePartMovementListRelationFilter = {
    every?: SparePartMovementWhereInput
    some?: SparePartMovementWhereInput
    none?: SparePartMovementWhereInput
  }

  export type SparePartMovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SparePartCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitOfMeasure?: SortOrder
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    location?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartAvgOrderByAggregateInput = {
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
  }

  export type SparePartMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitOfMeasure?: SortOrder
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    location?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    unitOfMeasure?: SortOrder
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
    location?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SparePartSumOrderByAggregateInput = {
    unitPrice?: SortOrder
    currentStock?: SortOrder
    minStock?: SortOrder
    maxStock?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SparePartRelationFilter = {
    is?: SparePartWhereInput
    isNot?: SparePartWhereInput
  }

  export type WorkOrderSparePartCountOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    sparePartId?: SortOrder
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrder
    status?: SortOrder
    requestedAt?: SortOrder
    deliveredAt?: SortOrder
    observations?: SortOrder
  }

  export type WorkOrderSparePartAvgOrderByAggregateInput = {
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrder
  }

  export type WorkOrderSparePartMaxOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    sparePartId?: SortOrder
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrder
    status?: SortOrder
    requestedAt?: SortOrder
    deliveredAt?: SortOrder
    observations?: SortOrder
  }

  export type WorkOrderSparePartMinOrderByAggregateInput = {
    id?: SortOrder
    workOrderId?: SortOrder
    sparePartId?: SortOrder
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrder
    status?: SortOrder
    requestedAt?: SortOrder
    deliveredAt?: SortOrder
    observations?: SortOrder
  }

  export type WorkOrderSparePartSumOrderByAggregateInput = {
    quantityRequested?: SortOrder
    quantityDelivered?: SortOrder
  }

  export type SparePartMovementCountOrderByAggregateInput = {
    id?: SortOrder
    sparePartId?: SortOrder
    movementType?: SortOrder
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
    reason?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
  }

  export type SparePartMovementAvgOrderByAggregateInput = {
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
  }

  export type SparePartMovementMaxOrderByAggregateInput = {
    id?: SortOrder
    sparePartId?: SortOrder
    movementType?: SortOrder
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
    reason?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
  }

  export type SparePartMovementMinOrderByAggregateInput = {
    id?: SortOrder
    sparePartId?: SortOrder
    movementType?: SortOrder
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
    reason?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
  }

  export type SparePartMovementSumOrderByAggregateInput = {
    quantity?: SortOrder
    previousStock?: SortOrder
    newStock?: SortOrder
  }

  export type WorkshopListRelationFilter = {
    every?: WorkshopWhereInput
    some?: WorkshopWhereInput
    none?: WorkshopWhereInput
  }

  export type VehicleListRelationFilter = {
    every?: VehicleWhereInput
    some?: VehicleWhereInput
    none?: VehicleWhereInput
  }

  export type WorkshopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkshopScheduleListRelationFilter = {
    every?: WorkshopScheduleWhereInput
    some?: WorkshopScheduleWhereInput
    none?: WorkshopScheduleWhereInput
  }

  export type WorkshopScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkshopCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkshopAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type WorkshopMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkshopMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    phone?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkshopSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type WorkshopScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    dayOfWeek?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    isActive?: SortOrder
  }

  export type WorkshopScheduleAvgOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type WorkshopScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    dayOfWeek?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    isActive?: SortOrder
  }

  export type WorkshopScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    dayOfWeek?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    isActive?: SortOrder
  }

  export type WorkshopScheduleSumOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    url?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    relatedTo?: SortOrder
    relatedId?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type WorkshopCreateNestedOneWithoutUsersInput = {
    create?: XOR<WorkshopCreateWithoutUsersInput, WorkshopUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutUsersInput
    connect?: WorkshopWhereUniqueInput
  }

  export type WorkOrderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput> | WorkOrderCreateWithoutCreatedByInput[] | WorkOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutCreatedByInput | WorkOrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: WorkOrderCreateManyCreatedByInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type VehicleEntryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput> | VehicleEntryCreateWithoutCreatedByInput[] | VehicleEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutCreatedByInput | VehicleEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: VehicleEntryCreateManyCreatedByInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput> | WorkOrderCreateWithoutCreatedByInput[] | WorkOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutCreatedByInput | WorkOrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: WorkOrderCreateManyCreatedByInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput> | VehicleEntryCreateWithoutCreatedByInput[] | VehicleEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutCreatedByInput | VehicleEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: VehicleEntryCreateManyCreatedByInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type WorkshopUpdateOneWithoutUsersNestedInput = {
    create?: XOR<WorkshopCreateWithoutUsersInput, WorkshopUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutUsersInput
    upsert?: WorkshopUpsertWithoutUsersInput
    disconnect?: WorkshopWhereInput | boolean
    delete?: WorkshopWhereInput | boolean
    connect?: WorkshopWhereUniqueInput
    update?: XOR<XOR<WorkshopUpdateToOneWithWhereWithoutUsersInput, WorkshopUpdateWithoutUsersInput>, WorkshopUncheckedUpdateWithoutUsersInput>
  }

  export type WorkOrderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput> | WorkOrderCreateWithoutCreatedByInput[] | WorkOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutCreatedByInput | WorkOrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutCreatedByInput | WorkOrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: WorkOrderCreateManyCreatedByInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutCreatedByInput | WorkOrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutCreatedByInput | WorkOrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput | WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput | WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutAssignedToInput | WorkOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type VehicleEntryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput> | VehicleEntryCreateWithoutCreatedByInput[] | VehicleEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutCreatedByInput | VehicleEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutCreatedByInput | VehicleEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: VehicleEntryCreateManyCreatedByInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutCreatedByInput | VehicleEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutCreatedByInput | VehicleEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput> | WorkOrderCreateWithoutCreatedByInput[] | WorkOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutCreatedByInput | WorkOrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutCreatedByInput | WorkOrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: WorkOrderCreateManyCreatedByInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutCreatedByInput | WorkOrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutCreatedByInput | WorkOrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput> | WorkOrderCreateWithoutAssignedToInput[] | WorkOrderUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutAssignedToInput | WorkOrderCreateOrConnectWithoutAssignedToInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput | WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: WorkOrderCreateManyAssignedToInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput | WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutAssignedToInput | WorkOrderUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput> | VehicleEntryCreateWithoutCreatedByInput[] | VehicleEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutCreatedByInput | VehicleEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutCreatedByInput | VehicleEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: VehicleEntryCreateManyCreatedByInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutCreatedByInput | VehicleEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutCreatedByInput | VehicleEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    upsert?: PermissionUpsertWithoutRolesInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolesInput, PermissionUpdateWithoutRolesInput>, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type RegionCreateNestedOneWithoutVehiclesInput = {
    create?: XOR<RegionCreateWithoutVehiclesInput, RegionUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutVehiclesInput
    connect?: RegionWhereUniqueInput
  }

  export type VehicleEntryCreateNestedManyWithoutVehicleInput = {
    create?: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput> | VehicleEntryCreateWithoutVehicleInput[] | VehicleEntryUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutVehicleInput | VehicleEntryCreateOrConnectWithoutVehicleInput[]
    createMany?: VehicleEntryCreateManyVehicleInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutVehicleInput = {
    create?: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput> | WorkOrderCreateWithoutVehicleInput[] | WorkOrderUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutVehicleInput | WorkOrderCreateOrConnectWithoutVehicleInput[]
    createMany?: WorkOrderCreateManyVehicleInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type VehicleEntryUncheckedCreateNestedManyWithoutVehicleInput = {
    create?: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput> | VehicleEntryCreateWithoutVehicleInput[] | VehicleEntryUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutVehicleInput | VehicleEntryCreateOrConnectWithoutVehicleInput[]
    createMany?: VehicleEntryCreateManyVehicleInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutVehicleInput = {
    create?: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput> | WorkOrderCreateWithoutVehicleInput[] | WorkOrderUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutVehicleInput | WorkOrderCreateOrConnectWithoutVehicleInput[]
    createMany?: WorkOrderCreateManyVehicleInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegionUpdateOneRequiredWithoutVehiclesNestedInput = {
    create?: XOR<RegionCreateWithoutVehiclesInput, RegionUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutVehiclesInput
    upsert?: RegionUpsertWithoutVehiclesInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutVehiclesInput, RegionUpdateWithoutVehiclesInput>, RegionUncheckedUpdateWithoutVehiclesInput>
  }

  export type VehicleEntryUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput> | VehicleEntryCreateWithoutVehicleInput[] | VehicleEntryUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutVehicleInput | VehicleEntryCreateOrConnectWithoutVehicleInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutVehicleInput | VehicleEntryUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: VehicleEntryCreateManyVehicleInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutVehicleInput | VehicleEntryUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutVehicleInput | VehicleEntryUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput> | WorkOrderCreateWithoutVehicleInput[] | WorkOrderUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutVehicleInput | WorkOrderCreateOrConnectWithoutVehicleInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutVehicleInput | WorkOrderUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: WorkOrderCreateManyVehicleInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutVehicleInput | WorkOrderUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutVehicleInput | WorkOrderUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type VehicleEntryUncheckedUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput> | VehicleEntryCreateWithoutVehicleInput[] | VehicleEntryUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutVehicleInput | VehicleEntryCreateOrConnectWithoutVehicleInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutVehicleInput | VehicleEntryUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: VehicleEntryCreateManyVehicleInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutVehicleInput | VehicleEntryUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutVehicleInput | VehicleEntryUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput> | WorkOrderCreateWithoutVehicleInput[] | WorkOrderUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutVehicleInput | WorkOrderCreateOrConnectWithoutVehicleInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutVehicleInput | WorkOrderUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: WorkOrderCreateManyVehicleInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutVehicleInput | WorkOrderUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutVehicleInput | WorkOrderUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type VehicleCreateNestedOneWithoutEntriesInput = {
    create?: XOR<VehicleCreateWithoutEntriesInput, VehicleUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutEntriesInput
    connect?: VehicleWhereUniqueInput
  }

  export type WorkshopCreateNestedOneWithoutEntriesInput = {
    create?: XOR<WorkshopCreateWithoutEntriesInput, WorkshopUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutEntriesInput
    connect?: WorkshopWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVehicleEntriesInput = {
    create?: XOR<UserCreateWithoutVehicleEntriesInput, UserUncheckedCreateWithoutVehicleEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehicleEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderCreateNestedManyWithoutEntryInput = {
    create?: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput> | WorkOrderCreateWithoutEntryInput[] | WorkOrderUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutEntryInput | WorkOrderCreateOrConnectWithoutEntryInput[]
    createMany?: WorkOrderCreateManyEntryInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type KeyControlCreateNestedOneWithoutEntryInput = {
    create?: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
    connectOrCreate?: KeyControlCreateOrConnectWithoutEntryInput
    connect?: KeyControlWhereUniqueInput
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutEntryInput = {
    create?: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput> | WorkOrderCreateWithoutEntryInput[] | WorkOrderUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutEntryInput | WorkOrderCreateOrConnectWithoutEntryInput[]
    createMany?: WorkOrderCreateManyEntryInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type KeyControlUncheckedCreateNestedOneWithoutEntryInput = {
    create?: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
    connectOrCreate?: KeyControlCreateOrConnectWithoutEntryInput
    connect?: KeyControlWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VehicleUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<VehicleCreateWithoutEntriesInput, VehicleUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutEntriesInput
    upsert?: VehicleUpsertWithoutEntriesInput
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutEntriesInput, VehicleUpdateWithoutEntriesInput>, VehicleUncheckedUpdateWithoutEntriesInput>
  }

  export type WorkshopUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<WorkshopCreateWithoutEntriesInput, WorkshopUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutEntriesInput
    upsert?: WorkshopUpsertWithoutEntriesInput
    connect?: WorkshopWhereUniqueInput
    update?: XOR<XOR<WorkshopUpdateToOneWithWhereWithoutEntriesInput, WorkshopUpdateWithoutEntriesInput>, WorkshopUncheckedUpdateWithoutEntriesInput>
  }

  export type UserUpdateOneRequiredWithoutVehicleEntriesNestedInput = {
    create?: XOR<UserCreateWithoutVehicleEntriesInput, UserUncheckedCreateWithoutVehicleEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehicleEntriesInput
    upsert?: UserUpsertWithoutVehicleEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVehicleEntriesInput, UserUpdateWithoutVehicleEntriesInput>, UserUncheckedUpdateWithoutVehicleEntriesInput>
  }

  export type WorkOrderUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput> | WorkOrderCreateWithoutEntryInput[] | WorkOrderUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutEntryInput | WorkOrderCreateOrConnectWithoutEntryInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutEntryInput | WorkOrderUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WorkOrderCreateManyEntryInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutEntryInput | WorkOrderUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutEntryInput | WorkOrderUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type KeyControlUpdateOneWithoutEntryNestedInput = {
    create?: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
    connectOrCreate?: KeyControlCreateOrConnectWithoutEntryInput
    upsert?: KeyControlUpsertWithoutEntryInput
    disconnect?: KeyControlWhereInput | boolean
    delete?: KeyControlWhereInput | boolean
    connect?: KeyControlWhereUniqueInput
    update?: XOR<XOR<KeyControlUpdateToOneWithWhereWithoutEntryInput, KeyControlUpdateWithoutEntryInput>, KeyControlUncheckedUpdateWithoutEntryInput>
  }

  export type WorkOrderUncheckedUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput> | WorkOrderCreateWithoutEntryInput[] | WorkOrderUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutEntryInput | WorkOrderCreateOrConnectWithoutEntryInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutEntryInput | WorkOrderUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WorkOrderCreateManyEntryInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutEntryInput | WorkOrderUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutEntryInput | WorkOrderUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type KeyControlUncheckedUpdateOneWithoutEntryNestedInput = {
    create?: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
    connectOrCreate?: KeyControlCreateOrConnectWithoutEntryInput
    upsert?: KeyControlUpsertWithoutEntryInput
    disconnect?: KeyControlWhereInput | boolean
    delete?: KeyControlWhereInput | boolean
    connect?: KeyControlWhereUniqueInput
    update?: XOR<XOR<KeyControlUpdateToOneWithWhereWithoutEntryInput, KeyControlUpdateWithoutEntryInput>, KeyControlUncheckedUpdateWithoutEntryInput>
  }

  export type VehicleEntryCreateNestedOneWithoutKeyControlInput = {
    create?: XOR<VehicleEntryCreateWithoutKeyControlInput, VehicleEntryUncheckedCreateWithoutKeyControlInput>
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutKeyControlInput
    connect?: VehicleEntryWhereUniqueInput
  }

  export type VehicleEntryUpdateOneRequiredWithoutKeyControlNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutKeyControlInput, VehicleEntryUncheckedCreateWithoutKeyControlInput>
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutKeyControlInput
    upsert?: VehicleEntryUpsertWithoutKeyControlInput
    connect?: VehicleEntryWhereUniqueInput
    update?: XOR<XOR<VehicleEntryUpdateToOneWithWhereWithoutKeyControlInput, VehicleEntryUpdateWithoutKeyControlInput>, VehicleEntryUncheckedUpdateWithoutKeyControlInput>
  }

  export type VehicleCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<VehicleCreateWithoutWorkOrdersInput, VehicleUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutWorkOrdersInput
    connect?: VehicleWhereUniqueInput
  }

  export type VehicleEntryCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkOrdersInput, VehicleEntryUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkOrdersInput
    connect?: VehicleEntryWhereUniqueInput
  }

  export type WorkshopCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<WorkshopCreateWithoutWorkOrdersInput, WorkshopUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutWorkOrdersInput
    connect?: WorkshopWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedWorkOrdersInput = {
    create?: XOR<UserCreateWithoutAssignedWorkOrdersInput, UserUncheckedCreateWithoutAssignedWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedWorkOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedWorkOrdersInput = {
    create?: XOR<UserCreateWithoutCreatedWorkOrdersInput, UserUncheckedCreateWithoutCreatedWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedWorkOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type WorkOrderStatusCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput> | WorkOrderStatusCreateWithoutWorkOrderInput[] | WorkOrderStatusUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderStatusCreateOrConnectWithoutWorkOrderInput | WorkOrderStatusCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderStatusCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
  }

  export type WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput> | WorkOrderPhotoCreateWithoutWorkOrderInput[] | WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput | WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderPhotoCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
  }

  export type WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput> | WorkOrderSparePartCreateWithoutWorkOrderInput[] | WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput | WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderSparePartCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
  }

  export type WorkPauseCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput> | WorkPauseCreateWithoutWorkOrderInput[] | WorkPauseUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkPauseCreateOrConnectWithoutWorkOrderInput | WorkPauseCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkPauseCreateManyWorkOrderInputEnvelope
    connect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
  }

  export type WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput> | WorkOrderStatusCreateWithoutWorkOrderInput[] | WorkOrderStatusUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderStatusCreateOrConnectWithoutWorkOrderInput | WorkOrderStatusCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderStatusCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
  }

  export type WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput> | WorkOrderPhotoCreateWithoutWorkOrderInput[] | WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput | WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderPhotoCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
  }

  export type WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput> | WorkOrderSparePartCreateWithoutWorkOrderInput[] | WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput | WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkOrderSparePartCreateManyWorkOrderInputEnvelope
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
  }

  export type WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput = {
    create?: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput> | WorkPauseCreateWithoutWorkOrderInput[] | WorkPauseUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkPauseCreateOrConnectWithoutWorkOrderInput | WorkPauseCreateOrConnectWithoutWorkOrderInput[]
    createMany?: WorkPauseCreateManyWorkOrderInputEnvelope
    connect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<VehicleCreateWithoutWorkOrdersInput, VehicleUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutWorkOrdersInput
    upsert?: VehicleUpsertWithoutWorkOrdersInput
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutWorkOrdersInput, VehicleUpdateWithoutWorkOrdersInput>, VehicleUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkOrdersInput, VehicleEntryUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkOrdersInput
    upsert?: VehicleEntryUpsertWithoutWorkOrdersInput
    connect?: VehicleEntryWhereUniqueInput
    update?: XOR<XOR<VehicleEntryUpdateToOneWithWhereWithoutWorkOrdersInput, VehicleEntryUpdateWithoutWorkOrdersInput>, VehicleEntryUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<WorkshopCreateWithoutWorkOrdersInput, WorkshopUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutWorkOrdersInput
    upsert?: WorkshopUpsertWithoutWorkOrdersInput
    connect?: WorkshopWhereUniqueInput
    update?: XOR<XOR<WorkshopUpdateToOneWithWhereWithoutWorkOrdersInput, WorkshopUpdateWithoutWorkOrdersInput>, WorkshopUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type UserUpdateOneWithoutAssignedWorkOrdersNestedInput = {
    create?: XOR<UserCreateWithoutAssignedWorkOrdersInput, UserUncheckedCreateWithoutAssignedWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedWorkOrdersInput
    upsert?: UserUpsertWithoutAssignedWorkOrdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedWorkOrdersInput, UserUpdateWithoutAssignedWorkOrdersInput>, UserUncheckedUpdateWithoutAssignedWorkOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedWorkOrdersInput, UserUncheckedCreateWithoutCreatedWorkOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedWorkOrdersInput
    upsert?: UserUpsertWithoutCreatedWorkOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedWorkOrdersInput, UserUpdateWithoutCreatedWorkOrdersInput>, UserUncheckedUpdateWithoutCreatedWorkOrdersInput>
  }

  export type WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput> | WorkOrderStatusCreateWithoutWorkOrderInput[] | WorkOrderStatusUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderStatusCreateOrConnectWithoutWorkOrderInput | WorkOrderStatusCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderStatusUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderStatusUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderStatusCreateManyWorkOrderInputEnvelope
    set?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    disconnect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    delete?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    connect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    update?: WorkOrderStatusUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderStatusUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderStatusUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderStatusUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderStatusScalarWhereInput | WorkOrderStatusScalarWhereInput[]
  }

  export type WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput> | WorkOrderPhotoCreateWithoutWorkOrderInput[] | WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput | WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderPhotoUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderPhotoUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderPhotoCreateManyWorkOrderInputEnvelope
    set?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    disconnect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    delete?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    connect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    update?: WorkOrderPhotoUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderPhotoUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderPhotoUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderPhotoUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderPhotoScalarWhereInput | WorkOrderPhotoScalarWhereInput[]
  }

  export type WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput> | WorkOrderSparePartCreateWithoutWorkOrderInput[] | WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput | WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderSparePartUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderSparePartUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderSparePartCreateManyWorkOrderInputEnvelope
    set?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    disconnect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    delete?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    update?: WorkOrderSparePartUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderSparePartUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderSparePartUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderSparePartUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
  }

  export type WorkPauseUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput> | WorkPauseCreateWithoutWorkOrderInput[] | WorkPauseUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkPauseCreateOrConnectWithoutWorkOrderInput | WorkPauseCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkPauseUpsertWithWhereUniqueWithoutWorkOrderInput | WorkPauseUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkPauseCreateManyWorkOrderInputEnvelope
    set?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    disconnect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    delete?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    connect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    update?: WorkPauseUpdateWithWhereUniqueWithoutWorkOrderInput | WorkPauseUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkPauseUpdateManyWithWhereWithoutWorkOrderInput | WorkPauseUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkPauseScalarWhereInput | WorkPauseScalarWhereInput[]
  }

  export type WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput> | WorkOrderStatusCreateWithoutWorkOrderInput[] | WorkOrderStatusUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderStatusCreateOrConnectWithoutWorkOrderInput | WorkOrderStatusCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderStatusUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderStatusUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderStatusCreateManyWorkOrderInputEnvelope
    set?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    disconnect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    delete?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    connect?: WorkOrderStatusWhereUniqueInput | WorkOrderStatusWhereUniqueInput[]
    update?: WorkOrderStatusUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderStatusUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderStatusUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderStatusUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderStatusScalarWhereInput | WorkOrderStatusScalarWhereInput[]
  }

  export type WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput> | WorkOrderPhotoCreateWithoutWorkOrderInput[] | WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput | WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderPhotoUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderPhotoUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderPhotoCreateManyWorkOrderInputEnvelope
    set?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    disconnect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    delete?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    connect?: WorkOrderPhotoWhereUniqueInput | WorkOrderPhotoWhereUniqueInput[]
    update?: WorkOrderPhotoUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderPhotoUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderPhotoUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderPhotoUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderPhotoScalarWhereInput | WorkOrderPhotoScalarWhereInput[]
  }

  export type WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput> | WorkOrderSparePartCreateWithoutWorkOrderInput[] | WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput | WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkOrderSparePartUpsertWithWhereUniqueWithoutWorkOrderInput | WorkOrderSparePartUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkOrderSparePartCreateManyWorkOrderInputEnvelope
    set?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    disconnect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    delete?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    update?: WorkOrderSparePartUpdateWithWhereUniqueWithoutWorkOrderInput | WorkOrderSparePartUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkOrderSparePartUpdateManyWithWhereWithoutWorkOrderInput | WorkOrderSparePartUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
  }

  export type WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput = {
    create?: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput> | WorkPauseCreateWithoutWorkOrderInput[] | WorkPauseUncheckedCreateWithoutWorkOrderInput[]
    connectOrCreate?: WorkPauseCreateOrConnectWithoutWorkOrderInput | WorkPauseCreateOrConnectWithoutWorkOrderInput[]
    upsert?: WorkPauseUpsertWithWhereUniqueWithoutWorkOrderInput | WorkPauseUpsertWithWhereUniqueWithoutWorkOrderInput[]
    createMany?: WorkPauseCreateManyWorkOrderInputEnvelope
    set?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    disconnect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    delete?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    connect?: WorkPauseWhereUniqueInput | WorkPauseWhereUniqueInput[]
    update?: WorkPauseUpdateWithWhereUniqueWithoutWorkOrderInput | WorkPauseUpdateWithWhereUniqueWithoutWorkOrderInput[]
    updateMany?: WorkPauseUpdateManyWithWhereWithoutWorkOrderInput | WorkPauseUpdateManyWithWhereWithoutWorkOrderInput[]
    deleteMany?: WorkPauseScalarWhereInput | WorkPauseScalarWhereInput[]
  }

  export type WorkOrderCreateNestedOneWithoutStatusesInput = {
    create?: XOR<WorkOrderCreateWithoutStatusesInput, WorkOrderUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutStatusesInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutStatusesNestedInput = {
    create?: XOR<WorkOrderCreateWithoutStatusesInput, WorkOrderUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutStatusesInput
    upsert?: WorkOrderUpsertWithoutStatusesInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutStatusesInput, WorkOrderUpdateWithoutStatusesInput>, WorkOrderUncheckedUpdateWithoutStatusesInput>
  }

  export type WorkOrderCreateNestedOneWithoutPhotosInput = {
    create?: XOR<WorkOrderCreateWithoutPhotosInput, WorkOrderUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPhotosInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<WorkOrderCreateWithoutPhotosInput, WorkOrderUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPhotosInput
    upsert?: WorkOrderUpsertWithoutPhotosInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutPhotosInput, WorkOrderUpdateWithoutPhotosInput>, WorkOrderUncheckedUpdateWithoutPhotosInput>
  }

  export type WorkOrderCreateNestedOneWithoutPausesInput = {
    create?: XOR<WorkOrderCreateWithoutPausesInput, WorkOrderUncheckedCreateWithoutPausesInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPausesInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutPausesNestedInput = {
    create?: XOR<WorkOrderCreateWithoutPausesInput, WorkOrderUncheckedCreateWithoutPausesInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutPausesInput
    upsert?: WorkOrderUpsertWithoutPausesInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutPausesInput, WorkOrderUpdateWithoutPausesInput>, WorkOrderUncheckedUpdateWithoutPausesInput>
  }

  export type WorkOrderSparePartCreateNestedManyWithoutSparePartInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput> | WorkOrderSparePartCreateWithoutSparePartInput[] | WorkOrderSparePartUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutSparePartInput | WorkOrderSparePartCreateOrConnectWithoutSparePartInput[]
    createMany?: WorkOrderSparePartCreateManySparePartInputEnvelope
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
  }

  export type SparePartMovementCreateNestedManyWithoutSparePartInput = {
    create?: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput> | SparePartMovementCreateWithoutSparePartInput[] | SparePartMovementUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: SparePartMovementCreateOrConnectWithoutSparePartInput | SparePartMovementCreateOrConnectWithoutSparePartInput[]
    createMany?: SparePartMovementCreateManySparePartInputEnvelope
    connect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
  }

  export type WorkOrderSparePartUncheckedCreateNestedManyWithoutSparePartInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput> | WorkOrderSparePartCreateWithoutSparePartInput[] | WorkOrderSparePartUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutSparePartInput | WorkOrderSparePartCreateOrConnectWithoutSparePartInput[]
    createMany?: WorkOrderSparePartCreateManySparePartInputEnvelope
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
  }

  export type SparePartMovementUncheckedCreateNestedManyWithoutSparePartInput = {
    create?: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput> | SparePartMovementCreateWithoutSparePartInput[] | SparePartMovementUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: SparePartMovementCreateOrConnectWithoutSparePartInput | SparePartMovementCreateOrConnectWithoutSparePartInput[]
    createMany?: SparePartMovementCreateManySparePartInputEnvelope
    connect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkOrderSparePartUpdateManyWithoutSparePartNestedInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput> | WorkOrderSparePartCreateWithoutSparePartInput[] | WorkOrderSparePartUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutSparePartInput | WorkOrderSparePartCreateOrConnectWithoutSparePartInput[]
    upsert?: WorkOrderSparePartUpsertWithWhereUniqueWithoutSparePartInput | WorkOrderSparePartUpsertWithWhereUniqueWithoutSparePartInput[]
    createMany?: WorkOrderSparePartCreateManySparePartInputEnvelope
    set?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    disconnect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    delete?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    update?: WorkOrderSparePartUpdateWithWhereUniqueWithoutSparePartInput | WorkOrderSparePartUpdateWithWhereUniqueWithoutSparePartInput[]
    updateMany?: WorkOrderSparePartUpdateManyWithWhereWithoutSparePartInput | WorkOrderSparePartUpdateManyWithWhereWithoutSparePartInput[]
    deleteMany?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
  }

  export type SparePartMovementUpdateManyWithoutSparePartNestedInput = {
    create?: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput> | SparePartMovementCreateWithoutSparePartInput[] | SparePartMovementUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: SparePartMovementCreateOrConnectWithoutSparePartInput | SparePartMovementCreateOrConnectWithoutSparePartInput[]
    upsert?: SparePartMovementUpsertWithWhereUniqueWithoutSparePartInput | SparePartMovementUpsertWithWhereUniqueWithoutSparePartInput[]
    createMany?: SparePartMovementCreateManySparePartInputEnvelope
    set?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    disconnect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    delete?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    connect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    update?: SparePartMovementUpdateWithWhereUniqueWithoutSparePartInput | SparePartMovementUpdateWithWhereUniqueWithoutSparePartInput[]
    updateMany?: SparePartMovementUpdateManyWithWhereWithoutSparePartInput | SparePartMovementUpdateManyWithWhereWithoutSparePartInput[]
    deleteMany?: SparePartMovementScalarWhereInput | SparePartMovementScalarWhereInput[]
  }

  export type WorkOrderSparePartUncheckedUpdateManyWithoutSparePartNestedInput = {
    create?: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput> | WorkOrderSparePartCreateWithoutSparePartInput[] | WorkOrderSparePartUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: WorkOrderSparePartCreateOrConnectWithoutSparePartInput | WorkOrderSparePartCreateOrConnectWithoutSparePartInput[]
    upsert?: WorkOrderSparePartUpsertWithWhereUniqueWithoutSparePartInput | WorkOrderSparePartUpsertWithWhereUniqueWithoutSparePartInput[]
    createMany?: WorkOrderSparePartCreateManySparePartInputEnvelope
    set?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    disconnect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    delete?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    connect?: WorkOrderSparePartWhereUniqueInput | WorkOrderSparePartWhereUniqueInput[]
    update?: WorkOrderSparePartUpdateWithWhereUniqueWithoutSparePartInput | WorkOrderSparePartUpdateWithWhereUniqueWithoutSparePartInput[]
    updateMany?: WorkOrderSparePartUpdateManyWithWhereWithoutSparePartInput | WorkOrderSparePartUpdateManyWithWhereWithoutSparePartInput[]
    deleteMany?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
  }

  export type SparePartMovementUncheckedUpdateManyWithoutSparePartNestedInput = {
    create?: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput> | SparePartMovementCreateWithoutSparePartInput[] | SparePartMovementUncheckedCreateWithoutSparePartInput[]
    connectOrCreate?: SparePartMovementCreateOrConnectWithoutSparePartInput | SparePartMovementCreateOrConnectWithoutSparePartInput[]
    upsert?: SparePartMovementUpsertWithWhereUniqueWithoutSparePartInput | SparePartMovementUpsertWithWhereUniqueWithoutSparePartInput[]
    createMany?: SparePartMovementCreateManySparePartInputEnvelope
    set?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    disconnect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    delete?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    connect?: SparePartMovementWhereUniqueInput | SparePartMovementWhereUniqueInput[]
    update?: SparePartMovementUpdateWithWhereUniqueWithoutSparePartInput | SparePartMovementUpdateWithWhereUniqueWithoutSparePartInput[]
    updateMany?: SparePartMovementUpdateManyWithWhereWithoutSparePartInput | SparePartMovementUpdateManyWithWhereWithoutSparePartInput[]
    deleteMany?: SparePartMovementScalarWhereInput | SparePartMovementScalarWhereInput[]
  }

  export type WorkOrderCreateNestedOneWithoutSparePartsInput = {
    create?: XOR<WorkOrderCreateWithoutSparePartsInput, WorkOrderUncheckedCreateWithoutSparePartsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutSparePartsInput
    connect?: WorkOrderWhereUniqueInput
  }

  export type SparePartCreateNestedOneWithoutWorkOrdersInput = {
    create?: XOR<SparePartCreateWithoutWorkOrdersInput, SparePartUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutWorkOrdersInput
    connect?: SparePartWhereUniqueInput
  }

  export type WorkOrderUpdateOneRequiredWithoutSparePartsNestedInput = {
    create?: XOR<WorkOrderCreateWithoutSparePartsInput, WorkOrderUncheckedCreateWithoutSparePartsInput>
    connectOrCreate?: WorkOrderCreateOrConnectWithoutSparePartsInput
    upsert?: WorkOrderUpsertWithoutSparePartsInput
    connect?: WorkOrderWhereUniqueInput
    update?: XOR<XOR<WorkOrderUpdateToOneWithWhereWithoutSparePartsInput, WorkOrderUpdateWithoutSparePartsInput>, WorkOrderUncheckedUpdateWithoutSparePartsInput>
  }

  export type SparePartUpdateOneRequiredWithoutWorkOrdersNestedInput = {
    create?: XOR<SparePartCreateWithoutWorkOrdersInput, SparePartUncheckedCreateWithoutWorkOrdersInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutWorkOrdersInput
    upsert?: SparePartUpsertWithoutWorkOrdersInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutWorkOrdersInput, SparePartUpdateWithoutWorkOrdersInput>, SparePartUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type SparePartCreateNestedOneWithoutMovementsInput = {
    create?: XOR<SparePartCreateWithoutMovementsInput, SparePartUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutMovementsInput
    connect?: SparePartWhereUniqueInput
  }

  export type SparePartUpdateOneRequiredWithoutMovementsNestedInput = {
    create?: XOR<SparePartCreateWithoutMovementsInput, SparePartUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: SparePartCreateOrConnectWithoutMovementsInput
    upsert?: SparePartUpsertWithoutMovementsInput
    connect?: SparePartWhereUniqueInput
    update?: XOR<XOR<SparePartUpdateToOneWithWhereWithoutMovementsInput, SparePartUpdateWithoutMovementsInput>, SparePartUncheckedUpdateWithoutMovementsInput>
  }

  export type WorkshopCreateNestedManyWithoutRegionInput = {
    create?: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput> | WorkshopCreateWithoutRegionInput[] | WorkshopUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkshopCreateOrConnectWithoutRegionInput | WorkshopCreateOrConnectWithoutRegionInput[]
    createMany?: WorkshopCreateManyRegionInputEnvelope
    connect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
  }

  export type VehicleCreateNestedManyWithoutRegionInput = {
    create?: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput> | VehicleCreateWithoutRegionInput[] | VehicleUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutRegionInput | VehicleCreateOrConnectWithoutRegionInput[]
    createMany?: VehicleCreateManyRegionInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type WorkshopUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput> | WorkshopCreateWithoutRegionInput[] | WorkshopUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkshopCreateOrConnectWithoutRegionInput | WorkshopCreateOrConnectWithoutRegionInput[]
    createMany?: WorkshopCreateManyRegionInputEnvelope
    connect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
  }

  export type VehicleUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput> | VehicleCreateWithoutRegionInput[] | VehicleUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutRegionInput | VehicleCreateOrConnectWithoutRegionInput[]
    createMany?: VehicleCreateManyRegionInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type WorkshopUpdateManyWithoutRegionNestedInput = {
    create?: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput> | WorkshopCreateWithoutRegionInput[] | WorkshopUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkshopCreateOrConnectWithoutRegionInput | WorkshopCreateOrConnectWithoutRegionInput[]
    upsert?: WorkshopUpsertWithWhereUniqueWithoutRegionInput | WorkshopUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: WorkshopCreateManyRegionInputEnvelope
    set?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    disconnect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    delete?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    connect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    update?: WorkshopUpdateWithWhereUniqueWithoutRegionInput | WorkshopUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: WorkshopUpdateManyWithWhereWithoutRegionInput | WorkshopUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: WorkshopScalarWhereInput | WorkshopScalarWhereInput[]
  }

  export type VehicleUpdateManyWithoutRegionNestedInput = {
    create?: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput> | VehicleCreateWithoutRegionInput[] | VehicleUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutRegionInput | VehicleCreateOrConnectWithoutRegionInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutRegionInput | VehicleUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: VehicleCreateManyRegionInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutRegionInput | VehicleUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutRegionInput | VehicleUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type WorkshopUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput> | WorkshopCreateWithoutRegionInput[] | WorkshopUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: WorkshopCreateOrConnectWithoutRegionInput | WorkshopCreateOrConnectWithoutRegionInput[]
    upsert?: WorkshopUpsertWithWhereUniqueWithoutRegionInput | WorkshopUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: WorkshopCreateManyRegionInputEnvelope
    set?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    disconnect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    delete?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    connect?: WorkshopWhereUniqueInput | WorkshopWhereUniqueInput[]
    update?: WorkshopUpdateWithWhereUniqueWithoutRegionInput | WorkshopUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: WorkshopUpdateManyWithWhereWithoutRegionInput | WorkshopUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: WorkshopScalarWhereInput | WorkshopScalarWhereInput[]
  }

  export type VehicleUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput> | VehicleCreateWithoutRegionInput[] | VehicleUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutRegionInput | VehicleCreateOrConnectWithoutRegionInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutRegionInput | VehicleUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: VehicleCreateManyRegionInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutRegionInput | VehicleUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutRegionInput | VehicleUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutWorkshopsInput = {
    create?: XOR<RegionCreateWithoutWorkshopsInput, RegionUncheckedCreateWithoutWorkshopsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutWorkshopsInput
    connect?: RegionWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput> | UserCreateWithoutWorkshopInput[] | UserUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkshopInput | UserCreateOrConnectWithoutWorkshopInput[]
    createMany?: UserCreateManyWorkshopInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VehicleEntryCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput> | VehicleEntryCreateWithoutWorkshopInput[] | VehicleEntryUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkshopInput | VehicleEntryCreateOrConnectWithoutWorkshopInput[]
    createMany?: VehicleEntryCreateManyWorkshopInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type WorkOrderCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput> | WorkOrderCreateWithoutWorkshopInput[] | WorkOrderUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkshopInput | WorkOrderCreateOrConnectWithoutWorkshopInput[]
    createMany?: WorkOrderCreateManyWorkshopInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkshopScheduleCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput> | WorkshopScheduleCreateWithoutWorkshopInput[] | WorkshopScheduleUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkshopScheduleCreateOrConnectWithoutWorkshopInput | WorkshopScheduleCreateOrConnectWithoutWorkshopInput[]
    createMany?: WorkshopScheduleCreateManyWorkshopInputEnvelope
    connect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput> | UserCreateWithoutWorkshopInput[] | UserUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkshopInput | UserCreateOrConnectWithoutWorkshopInput[]
    createMany?: UserCreateManyWorkshopInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput> | VehicleEntryCreateWithoutWorkshopInput[] | VehicleEntryUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkshopInput | VehicleEntryCreateOrConnectWithoutWorkshopInput[]
    createMany?: VehicleEntryCreateManyWorkshopInputEnvelope
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
  }

  export type WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput> | WorkOrderCreateWithoutWorkshopInput[] | WorkOrderUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkshopInput | WorkOrderCreateOrConnectWithoutWorkshopInput[]
    createMany?: WorkOrderCreateManyWorkshopInputEnvelope
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
  }

  export type WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput> | WorkshopScheduleCreateWithoutWorkshopInput[] | WorkshopScheduleUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkshopScheduleCreateOrConnectWithoutWorkshopInput | WorkshopScheduleCreateOrConnectWithoutWorkshopInput[]
    createMany?: WorkshopScheduleCreateManyWorkshopInputEnvelope
    connect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
  }

  export type RegionUpdateOneRequiredWithoutWorkshopsNestedInput = {
    create?: XOR<RegionCreateWithoutWorkshopsInput, RegionUncheckedCreateWithoutWorkshopsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutWorkshopsInput
    upsert?: RegionUpsertWithoutWorkshopsInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutWorkshopsInput, RegionUpdateWithoutWorkshopsInput>, RegionUncheckedUpdateWithoutWorkshopsInput>
  }

  export type UserUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput> | UserCreateWithoutWorkshopInput[] | UserUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkshopInput | UserCreateOrConnectWithoutWorkshopInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutWorkshopInput | UserUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: UserCreateManyWorkshopInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutWorkshopInput | UserUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: UserUpdateManyWithWhereWithoutWorkshopInput | UserUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type VehicleEntryUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput> | VehicleEntryCreateWithoutWorkshopInput[] | VehicleEntryUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkshopInput | VehicleEntryCreateOrConnectWithoutWorkshopInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutWorkshopInput | VehicleEntryUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: VehicleEntryCreateManyWorkshopInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutWorkshopInput | VehicleEntryUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutWorkshopInput | VehicleEntryUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type WorkOrderUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput> | WorkOrderCreateWithoutWorkshopInput[] | WorkOrderUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkshopInput | WorkOrderCreateOrConnectWithoutWorkshopInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutWorkshopInput | WorkOrderUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: WorkOrderCreateManyWorkshopInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutWorkshopInput | WorkOrderUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutWorkshopInput | WorkOrderUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkshopScheduleUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput> | WorkshopScheduleCreateWithoutWorkshopInput[] | WorkshopScheduleUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkshopScheduleCreateOrConnectWithoutWorkshopInput | WorkshopScheduleCreateOrConnectWithoutWorkshopInput[]
    upsert?: WorkshopScheduleUpsertWithWhereUniqueWithoutWorkshopInput | WorkshopScheduleUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: WorkshopScheduleCreateManyWorkshopInputEnvelope
    set?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    disconnect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    delete?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    connect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    update?: WorkshopScheduleUpdateWithWhereUniqueWithoutWorkshopInput | WorkshopScheduleUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: WorkshopScheduleUpdateManyWithWhereWithoutWorkshopInput | WorkshopScheduleUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: WorkshopScheduleScalarWhereInput | WorkshopScheduleScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput> | UserCreateWithoutWorkshopInput[] | UserUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkshopInput | UserCreateOrConnectWithoutWorkshopInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutWorkshopInput | UserUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: UserCreateManyWorkshopInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutWorkshopInput | UserUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: UserUpdateManyWithWhereWithoutWorkshopInput | UserUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput> | VehicleEntryCreateWithoutWorkshopInput[] | VehicleEntryUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: VehicleEntryCreateOrConnectWithoutWorkshopInput | VehicleEntryCreateOrConnectWithoutWorkshopInput[]
    upsert?: VehicleEntryUpsertWithWhereUniqueWithoutWorkshopInput | VehicleEntryUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: VehicleEntryCreateManyWorkshopInputEnvelope
    set?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    disconnect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    delete?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    connect?: VehicleEntryWhereUniqueInput | VehicleEntryWhereUniqueInput[]
    update?: VehicleEntryUpdateWithWhereUniqueWithoutWorkshopInput | VehicleEntryUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: VehicleEntryUpdateManyWithWhereWithoutWorkshopInput | VehicleEntryUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
  }

  export type WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput> | WorkOrderCreateWithoutWorkshopInput[] | WorkOrderUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkOrderCreateOrConnectWithoutWorkshopInput | WorkOrderCreateOrConnectWithoutWorkshopInput[]
    upsert?: WorkOrderUpsertWithWhereUniqueWithoutWorkshopInput | WorkOrderUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: WorkOrderCreateManyWorkshopInputEnvelope
    set?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    disconnect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    delete?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    connect?: WorkOrderWhereUniqueInput | WorkOrderWhereUniqueInput[]
    update?: WorkOrderUpdateWithWhereUniqueWithoutWorkshopInput | WorkOrderUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: WorkOrderUpdateManyWithWhereWithoutWorkshopInput | WorkOrderUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
  }

  export type WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput> | WorkshopScheduleCreateWithoutWorkshopInput[] | WorkshopScheduleUncheckedCreateWithoutWorkshopInput[]
    connectOrCreate?: WorkshopScheduleCreateOrConnectWithoutWorkshopInput | WorkshopScheduleCreateOrConnectWithoutWorkshopInput[]
    upsert?: WorkshopScheduleUpsertWithWhereUniqueWithoutWorkshopInput | WorkshopScheduleUpsertWithWhereUniqueWithoutWorkshopInput[]
    createMany?: WorkshopScheduleCreateManyWorkshopInputEnvelope
    set?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    disconnect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    delete?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    connect?: WorkshopScheduleWhereUniqueInput | WorkshopScheduleWhereUniqueInput[]
    update?: WorkshopScheduleUpdateWithWhereUniqueWithoutWorkshopInput | WorkshopScheduleUpdateWithWhereUniqueWithoutWorkshopInput[]
    updateMany?: WorkshopScheduleUpdateManyWithWhereWithoutWorkshopInput | WorkshopScheduleUpdateManyWithWhereWithoutWorkshopInput[]
    deleteMany?: WorkshopScheduleScalarWhereInput | WorkshopScheduleScalarWhereInput[]
  }

  export type WorkshopCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<WorkshopCreateWithoutSchedulesInput, WorkshopUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutSchedulesInput
    connect?: WorkshopWhereUniqueInput
  }

  export type WorkshopUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<WorkshopCreateWithoutSchedulesInput, WorkshopUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutSchedulesInput
    upsert?: WorkshopUpsertWithoutSchedulesInput
    connect?: WorkshopWhereUniqueInput
    update?: XOR<XOR<WorkshopUpdateToOneWithWhereWithoutSchedulesInput, WorkshopUpdateWithoutSchedulesInput>, WorkshopUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type WorkshopCreateWithoutUsersInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutWorkshopsInput
    entries?: VehicleEntryCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutUsersInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutUsersInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutUsersInput, WorkshopUncheckedCreateWithoutUsersInput>
  }

  export type WorkOrderCreateWithoutCreatedByInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutCreatedByInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutCreatedByInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput>
  }

  export type WorkOrderCreateManyCreatedByInputEnvelope = {
    data: WorkOrderCreateManyCreatedByInput | WorkOrderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutAssignedToInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkOrderCreateManyAssignedToInputEnvelope = {
    data: WorkOrderCreateManyAssignedToInput | WorkOrderCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type VehicleEntryCreateWithoutCreatedByInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutEntriesInput
    workshop: WorkshopCreateNestedOneWithoutEntriesInput
    workOrders?: WorkOrderCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlUncheckedCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryCreateOrConnectWithoutCreatedByInput = {
    where: VehicleEntryWhereUniqueInput
    create: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type VehicleEntryCreateManyCreatedByInputEnvelope = {
    data: VehicleEntryCreateManyCreatedByInput | VehicleEntryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type WorkshopUpsertWithoutUsersInput = {
    update: XOR<WorkshopUpdateWithoutUsersInput, WorkshopUncheckedUpdateWithoutUsersInput>
    create: XOR<WorkshopCreateWithoutUsersInput, WorkshopUncheckedCreateWithoutUsersInput>
    where?: WorkshopWhereInput
  }

  export type WorkshopUpdateToOneWithWhereWithoutUsersInput = {
    where?: WorkshopWhereInput
    data: XOR<WorkshopUpdateWithoutUsersInput, WorkshopUncheckedUpdateWithoutUsersInput>
  }

  export type WorkshopUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkshopsNestedInput
    entries?: VehicleEntryUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutCreatedByInput, WorkOrderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<WorkOrderCreateWithoutCreatedByInput, WorkOrderUncheckedCreateWithoutCreatedByInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutCreatedByInput, WorkOrderUncheckedUpdateWithoutCreatedByInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutCreatedByInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type WorkOrderScalarWhereInput = {
    AND?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    OR?: WorkOrderScalarWhereInput[]
    NOT?: WorkOrderScalarWhereInput | WorkOrderScalarWhereInput[]
    id?: StringFilter<"WorkOrder"> | string
    orderNumber?: StringFilter<"WorkOrder"> | string
    vehicleId?: StringFilter<"WorkOrder"> | string
    entryId?: StringFilter<"WorkOrder"> | string
    workshopId?: StringFilter<"WorkOrder"> | string
    workType?: StringFilter<"WorkOrder"> | string
    priority?: StringFilter<"WorkOrder"> | string
    description?: StringFilter<"WorkOrder"> | string
    estimatedHours?: FloatNullableFilter<"WorkOrder"> | number | null
    assignedToId?: StringNullableFilter<"WorkOrder"> | string | null
    currentStatus?: StringFilter<"WorkOrder"> | string
    startedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"WorkOrder"> | Date | string | null
    totalHours?: FloatNullableFilter<"WorkOrder"> | number | null
    observations?: StringNullableFilter<"WorkOrder"> | string | null
    createdById?: StringFilter<"WorkOrder"> | string
    createdAt?: DateTimeFilter<"WorkOrder"> | Date | string
    updatedAt?: DateTimeFilter<"WorkOrder"> | Date | string
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutAssignedToInput, WorkOrderUncheckedUpdateWithoutAssignedToInput>
    create: XOR<WorkOrderCreateWithoutAssignedToInput, WorkOrderUncheckedCreateWithoutAssignedToInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutAssignedToInput, WorkOrderUncheckedUpdateWithoutAssignedToInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutAssignedToInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type VehicleEntryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: VehicleEntryWhereUniqueInput
    update: XOR<VehicleEntryUpdateWithoutCreatedByInput, VehicleEntryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<VehicleEntryCreateWithoutCreatedByInput, VehicleEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type VehicleEntryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: VehicleEntryWhereUniqueInput
    data: XOR<VehicleEntryUpdateWithoutCreatedByInput, VehicleEntryUncheckedUpdateWithoutCreatedByInput>
  }

  export type VehicleEntryUpdateManyWithWhereWithoutCreatedByInput = {
    where: VehicleEntryScalarWhereInput
    data: XOR<VehicleEntryUpdateManyMutationInput, VehicleEntryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type VehicleEntryScalarWhereInput = {
    AND?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
    OR?: VehicleEntryScalarWhereInput[]
    NOT?: VehicleEntryScalarWhereInput | VehicleEntryScalarWhereInput[]
    id?: StringFilter<"VehicleEntry"> | string
    entryCode?: StringFilter<"VehicleEntry"> | string
    vehicleId?: StringFilter<"VehicleEntry"> | string
    workshopId?: StringFilter<"VehicleEntry"> | string
    driverRut?: StringFilter<"VehicleEntry"> | string
    driverName?: StringFilter<"VehicleEntry"> | string
    driverPhone?: StringNullableFilter<"VehicleEntry"> | string | null
    entryDate?: DateTimeFilter<"VehicleEntry"> | Date | string
    exitDate?: DateTimeNullableFilter<"VehicleEntry"> | Date | string | null
    entryKm?: IntFilter<"VehicleEntry"> | number
    exitKm?: IntNullableFilter<"VehicleEntry"> | number | null
    fuelLevel?: StringFilter<"VehicleEntry"> | string
    hasKeys?: BoolFilter<"VehicleEntry"> | boolean
    observations?: StringNullableFilter<"VehicleEntry"> | string | null
    photos?: JsonNullableFilter<"VehicleEntry">
    status?: StringFilter<"VehicleEntry"> | string
    createdById?: StringFilter<"VehicleEntry"> | string
    createdAt?: DateTimeFilter<"VehicleEntry"> | Date | string
    updatedAt?: DateTimeFilter<"VehicleEntry"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    relatedTo?: StringNullableFilter<"Notification"> | string | null
    relatedId?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserCreateWithoutRoleInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionCreateWithoutRoleInput = {
    createdAt?: Date | string
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    permissionId: string
    createdAt?: Date | string
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    rut?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    roleId?: StringFilter<"User"> | string
    workshopId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    createdAt?: Date | string
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    roleId: string
    createdAt?: Date | string
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolesInput = {
    id?: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolesInput = {
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolesInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RegionCreateWithoutVehiclesInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    workshops?: WorkshopCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutVehiclesInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    workshops?: WorkshopUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutVehiclesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutVehiclesInput, RegionUncheckedCreateWithoutVehiclesInput>
  }

  export type VehicleEntryCreateWithoutVehicleInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workshop: WorkshopCreateNestedOneWithoutEntriesInput
    createdBy: UserCreateNestedOneWithoutVehicleEntriesInput
    workOrders?: WorkOrderCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateWithoutVehicleInput = {
    id?: string
    entryCode: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlUncheckedCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryCreateOrConnectWithoutVehicleInput = {
    where: VehicleEntryWhereUniqueInput
    create: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput>
  }

  export type VehicleEntryCreateManyVehicleInputEnvelope = {
    data: VehicleEntryCreateManyVehicleInput | VehicleEntryCreateManyVehicleInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutVehicleInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutVehicleInput = {
    id?: string
    orderNumber: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutVehicleInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput>
  }

  export type WorkOrderCreateManyVehicleInputEnvelope = {
    data: WorkOrderCreateManyVehicleInput | WorkOrderCreateManyVehicleInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutVehiclesInput = {
    update: XOR<RegionUpdateWithoutVehiclesInput, RegionUncheckedUpdateWithoutVehiclesInput>
    create: XOR<RegionCreateWithoutVehiclesInput, RegionUncheckedCreateWithoutVehiclesInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutVehiclesInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutVehiclesInput, RegionUncheckedUpdateWithoutVehiclesInput>
  }

  export type RegionUpdateWithoutVehiclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshops?: WorkshopUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutVehiclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshops?: WorkshopUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type VehicleEntryUpsertWithWhereUniqueWithoutVehicleInput = {
    where: VehicleEntryWhereUniqueInput
    update: XOR<VehicleEntryUpdateWithoutVehicleInput, VehicleEntryUncheckedUpdateWithoutVehicleInput>
    create: XOR<VehicleEntryCreateWithoutVehicleInput, VehicleEntryUncheckedCreateWithoutVehicleInput>
  }

  export type VehicleEntryUpdateWithWhereUniqueWithoutVehicleInput = {
    where: VehicleEntryWhereUniqueInput
    data: XOR<VehicleEntryUpdateWithoutVehicleInput, VehicleEntryUncheckedUpdateWithoutVehicleInput>
  }

  export type VehicleEntryUpdateManyWithWhereWithoutVehicleInput = {
    where: VehicleEntryScalarWhereInput
    data: XOR<VehicleEntryUpdateManyMutationInput, VehicleEntryUncheckedUpdateManyWithoutVehicleInput>
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutVehicleInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutVehicleInput, WorkOrderUncheckedUpdateWithoutVehicleInput>
    create: XOR<WorkOrderCreateWithoutVehicleInput, WorkOrderUncheckedCreateWithoutVehicleInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutVehicleInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutVehicleInput, WorkOrderUncheckedUpdateWithoutVehicleInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutVehicleInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutVehicleInput>
  }

  export type VehicleCreateWithoutEntriesInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutVehiclesInput
    workOrders?: WorkOrderCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutEntriesInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    regionId: string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutEntriesInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutEntriesInput, VehicleUncheckedCreateWithoutEntriesInput>
  }

  export type WorkshopCreateWithoutEntriesInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutWorkshopsInput
    users?: UserCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutEntriesInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutEntriesInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutEntriesInput, WorkshopUncheckedCreateWithoutEntriesInput>
  }

  export type UserCreateWithoutVehicleEntriesInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVehicleEntriesInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVehicleEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVehicleEntriesInput, UserUncheckedCreateWithoutVehicleEntriesInput>
  }

  export type WorkOrderCreateWithoutEntryInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutEntryInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutEntryInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput>
  }

  export type WorkOrderCreateManyEntryInputEnvelope = {
    data: WorkOrderCreateManyEntryInput | WorkOrderCreateManyEntryInput[]
    skipDuplicates?: boolean
  }

  export type KeyControlCreateWithoutEntryInput = {
    id?: string
    keyLocation: string
    deliveredTo?: string | null
    deliveredAt?: Date | string | null
    returnedBy?: string | null
    returnedAt?: Date | string | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeyControlUncheckedCreateWithoutEntryInput = {
    id?: string
    keyLocation: string
    deliveredTo?: string | null
    deliveredAt?: Date | string | null
    returnedBy?: string | null
    returnedAt?: Date | string | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeyControlCreateOrConnectWithoutEntryInput = {
    where: KeyControlWhereUniqueInput
    create: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
  }

  export type VehicleUpsertWithoutEntriesInput = {
    update: XOR<VehicleUpdateWithoutEntriesInput, VehicleUncheckedUpdateWithoutEntriesInput>
    create: XOR<VehicleCreateWithoutEntriesInput, VehicleUncheckedCreateWithoutEntriesInput>
    where?: VehicleWhereInput
  }

  export type VehicleUpdateToOneWithWhereWithoutEntriesInput = {
    where?: VehicleWhereInput
    data: XOR<VehicleUpdateWithoutEntriesInput, VehicleUncheckedUpdateWithoutEntriesInput>
  }

  export type VehicleUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutVehiclesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type WorkshopUpsertWithoutEntriesInput = {
    update: XOR<WorkshopUpdateWithoutEntriesInput, WorkshopUncheckedUpdateWithoutEntriesInput>
    create: XOR<WorkshopCreateWithoutEntriesInput, WorkshopUncheckedCreateWithoutEntriesInput>
    where?: WorkshopWhereInput
  }

  export type WorkshopUpdateToOneWithWhereWithoutEntriesInput = {
    where?: WorkshopWhereInput
    data: XOR<WorkshopUpdateWithoutEntriesInput, WorkshopUncheckedUpdateWithoutEntriesInput>
  }

  export type WorkshopUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkshopsNestedInput
    users?: UserUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type UserUpsertWithoutVehicleEntriesInput = {
    update: XOR<UserUpdateWithoutVehicleEntriesInput, UserUncheckedUpdateWithoutVehicleEntriesInput>
    create: XOR<UserCreateWithoutVehicleEntriesInput, UserUncheckedCreateWithoutVehicleEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVehicleEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVehicleEntriesInput, UserUncheckedUpdateWithoutVehicleEntriesInput>
  }

  export type UserUpdateWithoutVehicleEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVehicleEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutEntryInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutEntryInput, WorkOrderUncheckedUpdateWithoutEntryInput>
    create: XOR<WorkOrderCreateWithoutEntryInput, WorkOrderUncheckedCreateWithoutEntryInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutEntryInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutEntryInput, WorkOrderUncheckedUpdateWithoutEntryInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutEntryInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutEntryInput>
  }

  export type KeyControlUpsertWithoutEntryInput = {
    update: XOR<KeyControlUpdateWithoutEntryInput, KeyControlUncheckedUpdateWithoutEntryInput>
    create: XOR<KeyControlCreateWithoutEntryInput, KeyControlUncheckedCreateWithoutEntryInput>
    where?: KeyControlWhereInput
  }

  export type KeyControlUpdateToOneWithWhereWithoutEntryInput = {
    where?: KeyControlWhereInput
    data: XOR<KeyControlUpdateWithoutEntryInput, KeyControlUncheckedUpdateWithoutEntryInput>
  }

  export type KeyControlUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyControlUncheckedUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyLocation?: StringFieldUpdateOperationsInput | string
    deliveredTo?: NullableStringFieldUpdateOperationsInput | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnedBy?: NullableStringFieldUpdateOperationsInput | string | null
    returnedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryCreateWithoutKeyControlInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutEntriesInput
    workshop: WorkshopCreateNestedOneWithoutEntriesInput
    createdBy: UserCreateNestedOneWithoutVehicleEntriesInput
    workOrders?: WorkOrderCreateNestedManyWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateWithoutKeyControlInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutEntryInput
  }

  export type VehicleEntryCreateOrConnectWithoutKeyControlInput = {
    where: VehicleEntryWhereUniqueInput
    create: XOR<VehicleEntryCreateWithoutKeyControlInput, VehicleEntryUncheckedCreateWithoutKeyControlInput>
  }

  export type VehicleEntryUpsertWithoutKeyControlInput = {
    update: XOR<VehicleEntryUpdateWithoutKeyControlInput, VehicleEntryUncheckedUpdateWithoutKeyControlInput>
    create: XOR<VehicleEntryCreateWithoutKeyControlInput, VehicleEntryUncheckedCreateWithoutKeyControlInput>
    where?: VehicleEntryWhereInput
  }

  export type VehicleEntryUpdateToOneWithWhereWithoutKeyControlInput = {
    where?: VehicleEntryWhereInput
    data: XOR<VehicleEntryUpdateWithoutKeyControlInput, VehicleEntryUncheckedUpdateWithoutKeyControlInput>
  }

  export type VehicleEntryUpdateWithoutKeyControlInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutEntriesNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutVehicleEntriesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateWithoutKeyControlInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type VehicleCreateWithoutWorkOrdersInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutVehiclesInput
    entries?: VehicleEntryCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    regionId: string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutWorkOrdersInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutWorkOrdersInput, VehicleUncheckedCreateWithoutWorkOrdersInput>
  }

  export type VehicleEntryCreateWithoutWorkOrdersInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutEntriesInput
    workshop: WorkshopCreateNestedOneWithoutEntriesInput
    createdBy: UserCreateNestedOneWithoutVehicleEntriesInput
    keyControl?: KeyControlCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    keyControl?: KeyControlUncheckedCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryCreateOrConnectWithoutWorkOrdersInput = {
    where: VehicleEntryWhereUniqueInput
    create: XOR<VehicleEntryCreateWithoutWorkOrdersInput, VehicleEntryUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkshopCreateWithoutWorkOrdersInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutWorkshopsInput
    users?: UserCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutWorkOrdersInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutWorkOrdersInput, WorkshopUncheckedCreateWithoutWorkOrdersInput>
  }

  export type UserCreateWithoutAssignedWorkOrdersInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedWorkOrdersInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedWorkOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedWorkOrdersInput, UserUncheckedCreateWithoutAssignedWorkOrdersInput>
  }

  export type UserCreateWithoutCreatedWorkOrdersInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedWorkOrdersInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedWorkOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedWorkOrdersInput, UserUncheckedCreateWithoutCreatedWorkOrdersInput>
  }

  export type WorkOrderStatusCreateWithoutWorkOrderInput = {
    id?: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
  }

  export type WorkOrderStatusUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
  }

  export type WorkOrderStatusCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderStatusWhereUniqueInput
    create: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderStatusCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderStatusCreateManyWorkOrderInput | WorkOrderStatusCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderPhotoCreateWithoutWorkOrderInput = {
    id?: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
  }

  export type WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
  }

  export type WorkOrderPhotoCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderPhotoWhereUniqueInput
    create: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderPhotoCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderPhotoCreateManyWorkOrderInput | WorkOrderPhotoCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderSparePartCreateWithoutWorkOrderInput = {
    id?: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
    sparePart: SparePartCreateNestedOneWithoutWorkOrdersInput
  }

  export type WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    sparePartId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type WorkOrderSparePartCreateOrConnectWithoutWorkOrderInput = {
    where: WorkOrderSparePartWhereUniqueInput
    create: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderSparePartCreateManyWorkOrderInputEnvelope = {
    data: WorkOrderSparePartCreateManyWorkOrderInput | WorkOrderSparePartCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type WorkPauseCreateWithoutWorkOrderInput = {
    id?: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
  }

  export type WorkPauseUncheckedCreateWithoutWorkOrderInput = {
    id?: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
  }

  export type WorkPauseCreateOrConnectWithoutWorkOrderInput = {
    where: WorkPauseWhereUniqueInput
    create: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkPauseCreateManyWorkOrderInputEnvelope = {
    data: WorkPauseCreateManyWorkOrderInput | WorkPauseCreateManyWorkOrderInput[]
    skipDuplicates?: boolean
  }

  export type VehicleUpsertWithoutWorkOrdersInput = {
    update: XOR<VehicleUpdateWithoutWorkOrdersInput, VehicleUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<VehicleCreateWithoutWorkOrdersInput, VehicleUncheckedCreateWithoutWorkOrdersInput>
    where?: VehicleWhereInput
  }

  export type VehicleUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: VehicleWhereInput
    data: XOR<VehicleUpdateWithoutWorkOrdersInput, VehicleUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type VehicleUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutVehiclesNestedInput
    entries?: VehicleEntryUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: VehicleEntryUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleEntryUpsertWithoutWorkOrdersInput = {
    update: XOR<VehicleEntryUpdateWithoutWorkOrdersInput, VehicleEntryUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<VehicleEntryCreateWithoutWorkOrdersInput, VehicleEntryUncheckedCreateWithoutWorkOrdersInput>
    where?: VehicleEntryWhereInput
  }

  export type VehicleEntryUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: VehicleEntryWhereInput
    data: XOR<VehicleEntryUpdateWithoutWorkOrdersInput, VehicleEntryUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type VehicleEntryUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutEntriesNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutVehicleEntriesNestedInput
    keyControl?: KeyControlUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keyControl?: KeyControlUncheckedUpdateOneWithoutEntryNestedInput
  }

  export type WorkshopUpsertWithoutWorkOrdersInput = {
    update: XOR<WorkshopUpdateWithoutWorkOrdersInput, WorkshopUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<WorkshopCreateWithoutWorkOrdersInput, WorkshopUncheckedCreateWithoutWorkOrdersInput>
    where?: WorkshopWhereInput
  }

  export type WorkshopUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: WorkshopWhereInput
    data: XOR<WorkshopUpdateWithoutWorkOrdersInput, WorkshopUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type WorkshopUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkshopsNestedInput
    users?: UserUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type UserUpsertWithoutAssignedWorkOrdersInput = {
    update: XOR<UserUpdateWithoutAssignedWorkOrdersInput, UserUncheckedUpdateWithoutAssignedWorkOrdersInput>
    create: XOR<UserCreateWithoutAssignedWorkOrdersInput, UserUncheckedCreateWithoutAssignedWorkOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedWorkOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedWorkOrdersInput, UserUncheckedUpdateWithoutAssignedWorkOrdersInput>
  }

  export type UserUpdateWithoutAssignedWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedWorkOrdersInput = {
    update: XOR<UserUpdateWithoutCreatedWorkOrdersInput, UserUncheckedUpdateWithoutCreatedWorkOrdersInput>
    create: XOR<UserCreateWithoutCreatedWorkOrdersInput, UserUncheckedCreateWithoutCreatedWorkOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedWorkOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedWorkOrdersInput, UserUncheckedUpdateWithoutCreatedWorkOrdersInput>
  }

  export type UserUpdateWithoutCreatedWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderStatusUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderStatusWhereUniqueInput
    update: XOR<WorkOrderStatusUpdateWithoutWorkOrderInput, WorkOrderStatusUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderStatusCreateWithoutWorkOrderInput, WorkOrderStatusUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderStatusUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderStatusWhereUniqueInput
    data: XOR<WorkOrderStatusUpdateWithoutWorkOrderInput, WorkOrderStatusUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderStatusUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderStatusScalarWhereInput
    data: XOR<WorkOrderStatusUpdateManyMutationInput, WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderStatusScalarWhereInput = {
    AND?: WorkOrderStatusScalarWhereInput | WorkOrderStatusScalarWhereInput[]
    OR?: WorkOrderStatusScalarWhereInput[]
    NOT?: WorkOrderStatusScalarWhereInput | WorkOrderStatusScalarWhereInput[]
    id?: StringFilter<"WorkOrderStatus"> | string
    workOrderId?: StringFilter<"WorkOrderStatus"> | string
    status?: StringFilter<"WorkOrderStatus"> | string
    observations?: StringNullableFilter<"WorkOrderStatus"> | string | null
    changedById?: StringFilter<"WorkOrderStatus"> | string
    changedAt?: DateTimeFilter<"WorkOrderStatus"> | Date | string
  }

  export type WorkOrderPhotoUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderPhotoWhereUniqueInput
    update: XOR<WorkOrderPhotoUpdateWithoutWorkOrderInput, WorkOrderPhotoUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderPhotoCreateWithoutWorkOrderInput, WorkOrderPhotoUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderPhotoUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderPhotoWhereUniqueInput
    data: XOR<WorkOrderPhotoUpdateWithoutWorkOrderInput, WorkOrderPhotoUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderPhotoUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderPhotoScalarWhereInput
    data: XOR<WorkOrderPhotoUpdateManyMutationInput, WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderPhotoScalarWhereInput = {
    AND?: WorkOrderPhotoScalarWhereInput | WorkOrderPhotoScalarWhereInput[]
    OR?: WorkOrderPhotoScalarWhereInput[]
    NOT?: WorkOrderPhotoScalarWhereInput | WorkOrderPhotoScalarWhereInput[]
    id?: StringFilter<"WorkOrderPhoto"> | string
    workOrderId?: StringFilter<"WorkOrderPhoto"> | string
    url?: StringFilter<"WorkOrderPhoto"> | string
    description?: StringNullableFilter<"WorkOrderPhoto"> | string | null
    photoType?: StringFilter<"WorkOrderPhoto"> | string
    uploadedAt?: DateTimeFilter<"WorkOrderPhoto"> | Date | string
  }

  export type WorkOrderSparePartUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderSparePartWhereUniqueInput
    update: XOR<WorkOrderSparePartUpdateWithoutWorkOrderInput, WorkOrderSparePartUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkOrderSparePartCreateWithoutWorkOrderInput, WorkOrderSparePartUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkOrderSparePartUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkOrderSparePartWhereUniqueInput
    data: XOR<WorkOrderSparePartUpdateWithoutWorkOrderInput, WorkOrderSparePartUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkOrderSparePartUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkOrderSparePartScalarWhereInput
    data: XOR<WorkOrderSparePartUpdateManyMutationInput, WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkOrderSparePartScalarWhereInput = {
    AND?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
    OR?: WorkOrderSparePartScalarWhereInput[]
    NOT?: WorkOrderSparePartScalarWhereInput | WorkOrderSparePartScalarWhereInput[]
    id?: StringFilter<"WorkOrderSparePart"> | string
    workOrderId?: StringFilter<"WorkOrderSparePart"> | string
    sparePartId?: StringFilter<"WorkOrderSparePart"> | string
    quantityRequested?: IntFilter<"WorkOrderSparePart"> | number
    quantityDelivered?: IntNullableFilter<"WorkOrderSparePart"> | number | null
    status?: StringFilter<"WorkOrderSparePart"> | string
    requestedAt?: DateTimeFilter<"WorkOrderSparePart"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"WorkOrderSparePart"> | Date | string | null
    observations?: StringNullableFilter<"WorkOrderSparePart"> | string | null
  }

  export type WorkPauseUpsertWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkPauseWhereUniqueInput
    update: XOR<WorkPauseUpdateWithoutWorkOrderInput, WorkPauseUncheckedUpdateWithoutWorkOrderInput>
    create: XOR<WorkPauseCreateWithoutWorkOrderInput, WorkPauseUncheckedCreateWithoutWorkOrderInput>
  }

  export type WorkPauseUpdateWithWhereUniqueWithoutWorkOrderInput = {
    where: WorkPauseWhereUniqueInput
    data: XOR<WorkPauseUpdateWithoutWorkOrderInput, WorkPauseUncheckedUpdateWithoutWorkOrderInput>
  }

  export type WorkPauseUpdateManyWithWhereWithoutWorkOrderInput = {
    where: WorkPauseScalarWhereInput
    data: XOR<WorkPauseUpdateManyMutationInput, WorkPauseUncheckedUpdateManyWithoutWorkOrderInput>
  }

  export type WorkPauseScalarWhereInput = {
    AND?: WorkPauseScalarWhereInput | WorkPauseScalarWhereInput[]
    OR?: WorkPauseScalarWhereInput[]
    NOT?: WorkPauseScalarWhereInput | WorkPauseScalarWhereInput[]
    id?: StringFilter<"WorkPause"> | string
    workOrderId?: StringFilter<"WorkPause"> | string
    reason?: StringFilter<"WorkPause"> | string
    pausedAt?: DateTimeFilter<"WorkPause"> | Date | string
    resumedAt?: DateTimeNullableFilter<"WorkPause"> | Date | string | null
    duration?: IntNullableFilter<"WorkPause"> | number | null
    observations?: StringNullableFilter<"WorkPause"> | string | null
  }

  export type WorkOrderCreateWithoutStatusesInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutStatusesInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutStatusesInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutStatusesInput, WorkOrderUncheckedCreateWithoutStatusesInput>
  }

  export type WorkOrderUpsertWithoutStatusesInput = {
    update: XOR<WorkOrderUpdateWithoutStatusesInput, WorkOrderUncheckedUpdateWithoutStatusesInput>
    create: XOR<WorkOrderCreateWithoutStatusesInput, WorkOrderUncheckedCreateWithoutStatusesInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutStatusesInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutStatusesInput, WorkOrderUncheckedUpdateWithoutStatusesInput>
  }

  export type WorkOrderUpdateWithoutStatusesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutStatusesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderCreateWithoutPhotosInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutPhotosInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutPhotosInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutPhotosInput, WorkOrderUncheckedCreateWithoutPhotosInput>
  }

  export type WorkOrderUpsertWithoutPhotosInput = {
    update: XOR<WorkOrderUpdateWithoutPhotosInput, WorkOrderUncheckedUpdateWithoutPhotosInput>
    create: XOR<WorkOrderCreateWithoutPhotosInput, WorkOrderUncheckedCreateWithoutPhotosInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutPhotosInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutPhotosInput, WorkOrderUncheckedUpdateWithoutPhotosInput>
  }

  export type WorkOrderUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderCreateWithoutPausesInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutPausesInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutPausesInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutPausesInput, WorkOrderUncheckedCreateWithoutPausesInput>
  }

  export type WorkOrderUpsertWithoutPausesInput = {
    update: XOR<WorkOrderUpdateWithoutPausesInput, WorkOrderUncheckedUpdateWithoutPausesInput>
    create: XOR<WorkOrderCreateWithoutPausesInput, WorkOrderUncheckedCreateWithoutPausesInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutPausesInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutPausesInput, WorkOrderUncheckedUpdateWithoutPausesInput>
  }

  export type WorkOrderUpdateWithoutPausesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutPausesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderSparePartCreateWithoutSparePartInput = {
    id?: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
    workOrder: WorkOrderCreateNestedOneWithoutSparePartsInput
  }

  export type WorkOrderSparePartUncheckedCreateWithoutSparePartInput = {
    id?: string
    workOrderId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type WorkOrderSparePartCreateOrConnectWithoutSparePartInput = {
    where: WorkOrderSparePartWhereUniqueInput
    create: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput>
  }

  export type WorkOrderSparePartCreateManySparePartInputEnvelope = {
    data: WorkOrderSparePartCreateManySparePartInput | WorkOrderSparePartCreateManySparePartInput[]
    skipDuplicates?: boolean
  }

  export type SparePartMovementCreateWithoutSparePartInput = {
    id?: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
  }

  export type SparePartMovementUncheckedCreateWithoutSparePartInput = {
    id?: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
  }

  export type SparePartMovementCreateOrConnectWithoutSparePartInput = {
    where: SparePartMovementWhereUniqueInput
    create: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput>
  }

  export type SparePartMovementCreateManySparePartInputEnvelope = {
    data: SparePartMovementCreateManySparePartInput | SparePartMovementCreateManySparePartInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderSparePartUpsertWithWhereUniqueWithoutSparePartInput = {
    where: WorkOrderSparePartWhereUniqueInput
    update: XOR<WorkOrderSparePartUpdateWithoutSparePartInput, WorkOrderSparePartUncheckedUpdateWithoutSparePartInput>
    create: XOR<WorkOrderSparePartCreateWithoutSparePartInput, WorkOrderSparePartUncheckedCreateWithoutSparePartInput>
  }

  export type WorkOrderSparePartUpdateWithWhereUniqueWithoutSparePartInput = {
    where: WorkOrderSparePartWhereUniqueInput
    data: XOR<WorkOrderSparePartUpdateWithoutSparePartInput, WorkOrderSparePartUncheckedUpdateWithoutSparePartInput>
  }

  export type WorkOrderSparePartUpdateManyWithWhereWithoutSparePartInput = {
    where: WorkOrderSparePartScalarWhereInput
    data: XOR<WorkOrderSparePartUpdateManyMutationInput, WorkOrderSparePartUncheckedUpdateManyWithoutSparePartInput>
  }

  export type SparePartMovementUpsertWithWhereUniqueWithoutSparePartInput = {
    where: SparePartMovementWhereUniqueInput
    update: XOR<SparePartMovementUpdateWithoutSparePartInput, SparePartMovementUncheckedUpdateWithoutSparePartInput>
    create: XOR<SparePartMovementCreateWithoutSparePartInput, SparePartMovementUncheckedCreateWithoutSparePartInput>
  }

  export type SparePartMovementUpdateWithWhereUniqueWithoutSparePartInput = {
    where: SparePartMovementWhereUniqueInput
    data: XOR<SparePartMovementUpdateWithoutSparePartInput, SparePartMovementUncheckedUpdateWithoutSparePartInput>
  }

  export type SparePartMovementUpdateManyWithWhereWithoutSparePartInput = {
    where: SparePartMovementScalarWhereInput
    data: XOR<SparePartMovementUpdateManyMutationInput, SparePartMovementUncheckedUpdateManyWithoutSparePartInput>
  }

  export type SparePartMovementScalarWhereInput = {
    AND?: SparePartMovementScalarWhereInput | SparePartMovementScalarWhereInput[]
    OR?: SparePartMovementScalarWhereInput[]
    NOT?: SparePartMovementScalarWhereInput | SparePartMovementScalarWhereInput[]
    id?: StringFilter<"SparePartMovement"> | string
    sparePartId?: StringFilter<"SparePartMovement"> | string
    movementType?: StringFilter<"SparePartMovement"> | string
    quantity?: IntFilter<"SparePartMovement"> | number
    previousStock?: IntFilter<"SparePartMovement"> | number
    newStock?: IntFilter<"SparePartMovement"> | number
    reason?: StringFilter<"SparePartMovement"> | string
    reference?: StringNullableFilter<"SparePartMovement"> | string | null
    createdAt?: DateTimeFilter<"SparePartMovement"> | Date | string
  }

  export type WorkOrderCreateWithoutSparePartsInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    workshop: WorkshopCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutSparePartsInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutSparePartsInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutSparePartsInput, WorkOrderUncheckedCreateWithoutSparePartsInput>
  }

  export type SparePartCreateWithoutWorkOrdersInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    movements?: SparePartMovementCreateNestedManyWithoutSparePartInput
  }

  export type SparePartUncheckedCreateWithoutWorkOrdersInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    movements?: SparePartMovementUncheckedCreateNestedManyWithoutSparePartInput
  }

  export type SparePartCreateOrConnectWithoutWorkOrdersInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutWorkOrdersInput, SparePartUncheckedCreateWithoutWorkOrdersInput>
  }

  export type WorkOrderUpsertWithoutSparePartsInput = {
    update: XOR<WorkOrderUpdateWithoutSparePartsInput, WorkOrderUncheckedUpdateWithoutSparePartsInput>
    create: XOR<WorkOrderCreateWithoutSparePartsInput, WorkOrderUncheckedCreateWithoutSparePartsInput>
    where?: WorkOrderWhereInput
  }

  export type WorkOrderUpdateToOneWithWhereWithoutSparePartsInput = {
    where?: WorkOrderWhereInput
    data: XOR<WorkOrderUpdateWithoutSparePartsInput, WorkOrderUncheckedUpdateWithoutSparePartsInput>
  }

  export type WorkOrderUpdateWithoutSparePartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutSparePartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type SparePartUpsertWithoutWorkOrdersInput = {
    update: XOR<SparePartUpdateWithoutWorkOrdersInput, SparePartUncheckedUpdateWithoutWorkOrdersInput>
    create: XOR<SparePartCreateWithoutWorkOrdersInput, SparePartUncheckedCreateWithoutWorkOrdersInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutWorkOrdersInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutWorkOrdersInput, SparePartUncheckedUpdateWithoutWorkOrdersInput>
  }

  export type SparePartUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movements?: SparePartMovementUpdateManyWithoutSparePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutWorkOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movements?: SparePartMovementUncheckedUpdateManyWithoutSparePartNestedInput
  }

  export type SparePartCreateWithoutMovementsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderSparePartCreateNestedManyWithoutSparePartInput
  }

  export type SparePartUncheckedCreateWithoutMovementsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    unitOfMeasure: string
    unitPrice: number
    currentStock?: number
    minStock: number
    maxStock: number
    location?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderSparePartUncheckedCreateNestedManyWithoutSparePartInput
  }

  export type SparePartCreateOrConnectWithoutMovementsInput = {
    where: SparePartWhereUniqueInput
    create: XOR<SparePartCreateWithoutMovementsInput, SparePartUncheckedCreateWithoutMovementsInput>
  }

  export type SparePartUpsertWithoutMovementsInput = {
    update: XOR<SparePartUpdateWithoutMovementsInput, SparePartUncheckedUpdateWithoutMovementsInput>
    create: XOR<SparePartCreateWithoutMovementsInput, SparePartUncheckedCreateWithoutMovementsInput>
    where?: SparePartWhereInput
  }

  export type SparePartUpdateToOneWithWhereWithoutMovementsInput = {
    where?: SparePartWhereInput
    data: XOR<SparePartUpdateWithoutMovementsInput, SparePartUncheckedUpdateWithoutMovementsInput>
  }

  export type SparePartUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderSparePartUpdateManyWithoutSparePartNestedInput
  }

  export type SparePartUncheckedUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    unitOfMeasure?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    minStock?: IntFieldUpdateOperationsInput | number
    maxStock?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderSparePartUncheckedUpdateManyWithoutSparePartNestedInput
  }

  export type WorkshopCreateWithoutRegionInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutRegionInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput
    schedules?: WorkshopScheduleUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutRegionInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput>
  }

  export type WorkshopCreateManyRegionInputEnvelope = {
    data: WorkshopCreateManyRegionInput | WorkshopCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type VehicleCreateWithoutRegionInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: VehicleEntryCreateNestedManyWithoutVehicleInput
    workOrders?: WorkOrderCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutRegionInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutVehicleInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutRegionInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput>
  }

  export type VehicleCreateManyRegionInputEnvelope = {
    data: VehicleCreateManyRegionInput | VehicleCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type WorkshopUpsertWithWhereUniqueWithoutRegionInput = {
    where: WorkshopWhereUniqueInput
    update: XOR<WorkshopUpdateWithoutRegionInput, WorkshopUncheckedUpdateWithoutRegionInput>
    create: XOR<WorkshopCreateWithoutRegionInput, WorkshopUncheckedCreateWithoutRegionInput>
  }

  export type WorkshopUpdateWithWhereUniqueWithoutRegionInput = {
    where: WorkshopWhereUniqueInput
    data: XOR<WorkshopUpdateWithoutRegionInput, WorkshopUncheckedUpdateWithoutRegionInput>
  }

  export type WorkshopUpdateManyWithWhereWithoutRegionInput = {
    where: WorkshopScalarWhereInput
    data: XOR<WorkshopUpdateManyMutationInput, WorkshopUncheckedUpdateManyWithoutRegionInput>
  }

  export type WorkshopScalarWhereInput = {
    AND?: WorkshopScalarWhereInput | WorkshopScalarWhereInput[]
    OR?: WorkshopScalarWhereInput[]
    NOT?: WorkshopScalarWhereInput | WorkshopScalarWhereInput[]
    id?: StringFilter<"Workshop"> | string
    code?: StringFilter<"Workshop"> | string
    name?: StringFilter<"Workshop"> | string
    regionId?: StringFilter<"Workshop"> | string
    address?: StringFilter<"Workshop"> | string
    city?: StringFilter<"Workshop"> | string
    phone?: StringNullableFilter<"Workshop"> | string | null
    capacity?: IntNullableFilter<"Workshop"> | number | null
    isActive?: BoolFilter<"Workshop"> | boolean
    createdAt?: DateTimeFilter<"Workshop"> | Date | string
    updatedAt?: DateTimeFilter<"Workshop"> | Date | string
  }

  export type VehicleUpsertWithWhereUniqueWithoutRegionInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutRegionInput, VehicleUncheckedUpdateWithoutRegionInput>
    create: XOR<VehicleCreateWithoutRegionInput, VehicleUncheckedCreateWithoutRegionInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutRegionInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutRegionInput, VehicleUncheckedUpdateWithoutRegionInput>
  }

  export type VehicleUpdateManyWithWhereWithoutRegionInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutRegionInput>
  }

  export type VehicleScalarWhereInput = {
    AND?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    OR?: VehicleScalarWhereInput[]
    NOT?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    id?: StringFilter<"Vehicle"> | string
    licensePlate?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    brand?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    vin?: StringNullableFilter<"Vehicle"> | string | null
    fleetNumber?: StringNullableFilter<"Vehicle"> | string | null
    regionId?: StringFilter<"Vehicle"> | string
    status?: StringFilter<"Vehicle"> | string
    isActive?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
  }

  export type RegionCreateWithoutWorkshopsInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    vehicles?: VehicleCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutWorkshopsInput = {
    id?: string
    code: string
    name: string
    isActive?: boolean
    createdAt?: Date | string
    vehicles?: VehicleUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutWorkshopsInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutWorkshopsInput, RegionUncheckedCreateWithoutWorkshopsInput>
  }

  export type UserCreateWithoutWorkshopInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkshopInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkshopInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput>
  }

  export type UserCreateManyWorkshopInputEnvelope = {
    data: UserCreateManyWorkshopInput | UserCreateManyWorkshopInput[]
    skipDuplicates?: boolean
  }

  export type VehicleEntryCreateWithoutWorkshopInput = {
    id?: string
    entryCode: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutEntriesInput
    createdBy: UserCreateNestedOneWithoutVehicleEntriesInput
    workOrders?: WorkOrderCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryUncheckedCreateWithoutWorkshopInput = {
    id?: string
    entryCode: string
    vehicleId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutEntryInput
    keyControl?: KeyControlUncheckedCreateNestedOneWithoutEntryInput
  }

  export type VehicleEntryCreateOrConnectWithoutWorkshopInput = {
    where: VehicleEntryWhereUniqueInput
    create: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput>
  }

  export type VehicleEntryCreateManyWorkshopInputEnvelope = {
    data: VehicleEntryCreateManyWorkshopInput | VehicleEntryCreateManyWorkshopInput[]
    skipDuplicates?: boolean
  }

  export type WorkOrderCreateWithoutWorkshopInput = {
    id?: string
    orderNumber: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicle: VehicleCreateNestedOneWithoutWorkOrdersInput
    entry: VehicleEntryCreateNestedOneWithoutWorkOrdersInput
    assignedTo?: UserCreateNestedOneWithoutAssignedWorkOrdersInput
    createdBy: UserCreateNestedOneWithoutCreatedWorkOrdersInput
    statuses?: WorkOrderStatusCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderUncheckedCreateWithoutWorkshopInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statuses?: WorkOrderStatusUncheckedCreateNestedManyWithoutWorkOrderInput
    photos?: WorkOrderPhotoUncheckedCreateNestedManyWithoutWorkOrderInput
    spareParts?: WorkOrderSparePartUncheckedCreateNestedManyWithoutWorkOrderInput
    pauses?: WorkPauseUncheckedCreateNestedManyWithoutWorkOrderInput
  }

  export type WorkOrderCreateOrConnectWithoutWorkshopInput = {
    where: WorkOrderWhereUniqueInput
    create: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkOrderCreateManyWorkshopInputEnvelope = {
    data: WorkOrderCreateManyWorkshopInput | WorkOrderCreateManyWorkshopInput[]
    skipDuplicates?: boolean
  }

  export type WorkshopScheduleCreateWithoutWorkshopInput = {
    id?: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
  }

  export type WorkshopScheduleUncheckedCreateWithoutWorkshopInput = {
    id?: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
  }

  export type WorkshopScheduleCreateOrConnectWithoutWorkshopInput = {
    where: WorkshopScheduleWhereUniqueInput
    create: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopScheduleCreateManyWorkshopInputEnvelope = {
    data: WorkshopScheduleCreateManyWorkshopInput | WorkshopScheduleCreateManyWorkshopInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutWorkshopsInput = {
    update: XOR<RegionUpdateWithoutWorkshopsInput, RegionUncheckedUpdateWithoutWorkshopsInput>
    create: XOR<RegionCreateWithoutWorkshopsInput, RegionUncheckedCreateWithoutWorkshopsInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutWorkshopsInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutWorkshopsInput, RegionUncheckedUpdateWithoutWorkshopsInput>
  }

  export type RegionUpdateWithoutWorkshopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicles?: VehicleUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutWorkshopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicles?: VehicleUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutWorkshopInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutWorkshopInput, UserUncheckedUpdateWithoutWorkshopInput>
    create: XOR<UserCreateWithoutWorkshopInput, UserUncheckedCreateWithoutWorkshopInput>
  }

  export type UserUpdateWithWhereUniqueWithoutWorkshopInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutWorkshopInput, UserUncheckedUpdateWithoutWorkshopInput>
  }

  export type UserUpdateManyWithWhereWithoutWorkshopInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutWorkshopInput>
  }

  export type VehicleEntryUpsertWithWhereUniqueWithoutWorkshopInput = {
    where: VehicleEntryWhereUniqueInput
    update: XOR<VehicleEntryUpdateWithoutWorkshopInput, VehicleEntryUncheckedUpdateWithoutWorkshopInput>
    create: XOR<VehicleEntryCreateWithoutWorkshopInput, VehicleEntryUncheckedCreateWithoutWorkshopInput>
  }

  export type VehicleEntryUpdateWithWhereUniqueWithoutWorkshopInput = {
    where: VehicleEntryWhereUniqueInput
    data: XOR<VehicleEntryUpdateWithoutWorkshopInput, VehicleEntryUncheckedUpdateWithoutWorkshopInput>
  }

  export type VehicleEntryUpdateManyWithWhereWithoutWorkshopInput = {
    where: VehicleEntryScalarWhereInput
    data: XOR<VehicleEntryUpdateManyMutationInput, VehicleEntryUncheckedUpdateManyWithoutWorkshopInput>
  }

  export type WorkOrderUpsertWithWhereUniqueWithoutWorkshopInput = {
    where: WorkOrderWhereUniqueInput
    update: XOR<WorkOrderUpdateWithoutWorkshopInput, WorkOrderUncheckedUpdateWithoutWorkshopInput>
    create: XOR<WorkOrderCreateWithoutWorkshopInput, WorkOrderUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkOrderUpdateWithWhereUniqueWithoutWorkshopInput = {
    where: WorkOrderWhereUniqueInput
    data: XOR<WorkOrderUpdateWithoutWorkshopInput, WorkOrderUncheckedUpdateWithoutWorkshopInput>
  }

  export type WorkOrderUpdateManyWithWhereWithoutWorkshopInput = {
    where: WorkOrderScalarWhereInput
    data: XOR<WorkOrderUpdateManyMutationInput, WorkOrderUncheckedUpdateManyWithoutWorkshopInput>
  }

  export type WorkshopScheduleUpsertWithWhereUniqueWithoutWorkshopInput = {
    where: WorkshopScheduleWhereUniqueInput
    update: XOR<WorkshopScheduleUpdateWithoutWorkshopInput, WorkshopScheduleUncheckedUpdateWithoutWorkshopInput>
    create: XOR<WorkshopScheduleCreateWithoutWorkshopInput, WorkshopScheduleUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopScheduleUpdateWithWhereUniqueWithoutWorkshopInput = {
    where: WorkshopScheduleWhereUniqueInput
    data: XOR<WorkshopScheduleUpdateWithoutWorkshopInput, WorkshopScheduleUncheckedUpdateWithoutWorkshopInput>
  }

  export type WorkshopScheduleUpdateManyWithWhereWithoutWorkshopInput = {
    where: WorkshopScheduleScalarWhereInput
    data: XOR<WorkshopScheduleUpdateManyMutationInput, WorkshopScheduleUncheckedUpdateManyWithoutWorkshopInput>
  }

  export type WorkshopScheduleScalarWhereInput = {
    AND?: WorkshopScheduleScalarWhereInput | WorkshopScheduleScalarWhereInput[]
    OR?: WorkshopScheduleScalarWhereInput[]
    NOT?: WorkshopScheduleScalarWhereInput | WorkshopScheduleScalarWhereInput[]
    id?: StringFilter<"WorkshopSchedule"> | string
    workshopId?: StringFilter<"WorkshopSchedule"> | string
    dayOfWeek?: IntFilter<"WorkshopSchedule"> | number
    openTime?: StringFilter<"WorkshopSchedule"> | string
    closeTime?: StringFilter<"WorkshopSchedule"> | string
    isActive?: BoolFilter<"WorkshopSchedule"> | boolean
  }

  export type WorkshopCreateWithoutSchedulesInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutWorkshopsInput
    users?: UserCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutSchedulesInput = {
    id?: string
    code: string
    name: string
    regionId: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkshopInput
    entries?: VehicleEntryUncheckedCreateNestedManyWithoutWorkshopInput
    workOrders?: WorkOrderUncheckedCreateNestedManyWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutSchedulesInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutSchedulesInput, WorkshopUncheckedCreateWithoutSchedulesInput>
  }

  export type WorkshopUpsertWithoutSchedulesInput = {
    update: XOR<WorkshopUpdateWithoutSchedulesInput, WorkshopUncheckedUpdateWithoutSchedulesInput>
    create: XOR<WorkshopCreateWithoutSchedulesInput, WorkshopUncheckedCreateWithoutSchedulesInput>
    where?: WorkshopWhereInput
  }

  export type WorkshopUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: WorkshopWhereInput
    data: XOR<WorkshopUpdateWithoutSchedulesInput, WorkshopUncheckedUpdateWithoutSchedulesInput>
  }

  export type WorkshopUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutWorkshopsNestedInput
    users?: UserUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    workshop?: WorkshopCreateNestedOneWithoutUsersInput
    createdWorkOrders?: WorkOrderCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutCreatedByInput
    assignedWorkOrders?: WorkOrderUncheckedCreateNestedManyWithoutAssignedToInput
    vehicleEntries?: VehicleEntryUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkOrderCreateManyCreatedByInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateManyAssignedToInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleEntryCreateManyCreatedByInput = {
    id?: string
    entryCode: string
    vehicleId: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: string
    relatedTo?: string | null
    relatedId?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type WorkOrderUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutEntriesNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutEntriesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUncheckedUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    relatedTo?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyRoleInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    workshopId?: string | null
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RolePermissionCreateManyRoleInput = {
    permissionId: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshop?: WorkshopUpdateOneWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    workshopId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    roleId: string
    createdAt?: Date | string
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryCreateManyVehicleInput = {
    id?: string
    entryCode: string
    workshopId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateManyVehicleInput = {
    id?: string
    orderNumber: string
    entryId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleEntryUpdateWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workshop?: WorkshopUpdateOneRequiredWithoutEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutVehicleEntriesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUncheckedUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateManyWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUpdateWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutVehicleInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderCreateManyEntryInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    workshopId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    workshop?: WorkshopUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusCreateManyWorkOrderInput = {
    id?: string
    status: string
    observations?: string | null
    changedById: string
    changedAt?: Date | string
  }

  export type WorkOrderPhotoCreateManyWorkOrderInput = {
    id?: string
    url: string
    description?: string | null
    photoType: string
    uploadedAt?: Date | string
  }

  export type WorkOrderSparePartCreateManyWorkOrderInput = {
    id?: string
    sparePartId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type WorkPauseCreateManyWorkOrderInput = {
    id?: string
    reason: string
    pausedAt?: Date | string
    resumedAt?: Date | string | null
    duration?: number | null
    observations?: string | null
  }

  export type WorkOrderStatusUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderSparePartUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    sparePart?: SparePartUpdateOneRequiredWithoutWorkOrdersNestedInput
  }

  export type WorkOrderSparePartUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    sparePartId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkPauseUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkPauseUncheckedUpdateWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkPauseUncheckedUpdateManyWithoutWorkOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    pausedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resumedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderSparePartCreateManySparePartInput = {
    id?: string
    workOrderId: string
    quantityRequested: number
    quantityDelivered?: number | null
    status?: string
    requestedAt?: Date | string
    deliveredAt?: Date | string | null
    observations?: string | null
  }

  export type SparePartMovementCreateManySparePartInput = {
    id?: string
    movementType: string
    quantity: number
    previousStock: number
    newStock: number
    reason: string
    reference?: string | null
    createdAt?: Date | string
  }

  export type WorkOrderSparePartUpdateWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    workOrder?: WorkOrderUpdateOneRequiredWithoutSparePartsNestedInput
  }

  export type WorkOrderSparePartUncheckedUpdateWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkOrderSparePartUncheckedUpdateManyWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    workOrderId?: StringFieldUpdateOperationsInput | string
    quantityRequested?: IntFieldUpdateOperationsInput | number
    quantityDelivered?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SparePartMovementUpdateWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartMovementUncheckedUpdateWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SparePartMovementUncheckedUpdateManyWithoutSparePartInput = {
    id?: StringFieldUpdateOperationsInput | string
    movementType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    previousStock?: IntFieldUpdateOperationsInput | number
    newStock?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopCreateManyRegionInput = {
    id?: string
    code: string
    name: string
    address: string
    city: string
    phone?: string | null
    capacity?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleCreateManyRegionInput = {
    id?: string
    licensePlate: string
    vehicleType: string
    brand: string
    model: string
    year: number
    vin?: string | null
    fleetNumber?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkshopUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkshopNestedInput
    entries?: VehicleEntryUncheckedUpdateManyWithoutWorkshopNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutWorkshopNestedInput
    schedules?: WorkshopScheduleUncheckedUpdateManyWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: VehicleEntryUpdateManyWithoutVehicleNestedInput
    workOrders?: WorkOrderUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: VehicleEntryUncheckedUpdateManyWithoutVehicleNestedInput
    workOrders?: WorkOrderUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    fleetNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyWorkshopInput = {
    id?: string
    rut: string
    firstName: string
    lastName: string
    email: string
    password: string
    phone?: string | null
    roleId: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleEntryCreateManyWorkshopInput = {
    id?: string
    entryCode: string
    vehicleId: string
    driverRut: string
    driverName: string
    driverPhone?: string | null
    entryDate: Date | string
    exitDate?: Date | string | null
    entryKm: number
    exitKm?: number | null
    fuelLevel: string
    hasKeys?: boolean
    observations?: string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkOrderCreateManyWorkshopInput = {
    id?: string
    orderNumber: string
    vehicleId: string
    entryId: string
    workType: string
    priority?: string
    description: string
    estimatedHours?: number | null
    assignedToId?: string | null
    currentStatus?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    totalHours?: number | null
    observations?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkshopScheduleCreateManyWorkshopInput = {
    id?: string
    dayOfWeek: number
    openTime: string
    closeTime: string
    isActive?: boolean
  }

  export type UserUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    createdWorkOrders?: WorkOrderUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdWorkOrders?: WorkOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedWorkOrders?: WorkOrderUncheckedUpdateManyWithoutAssignedToNestedInput
    vehicleEntries?: VehicleEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    rut?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleEntryUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutVehicleEntriesNestedInput
    workOrders?: WorkOrderUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workOrders?: WorkOrderUncheckedUpdateManyWithoutEntryNestedInput
    keyControl?: KeyControlUncheckedUpdateOneWithoutEntryNestedInput
  }

  export type VehicleEntryUncheckedUpdateManyWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryCode?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    driverRut?: StringFieldUpdateOperationsInput | string
    driverName?: StringFieldUpdateOperationsInput | string
    driverPhone?: NullableStringFieldUpdateOperationsInput | string | null
    entryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entryKm?: IntFieldUpdateOperationsInput | number
    exitKm?: NullableIntFieldUpdateOperationsInput | number | null
    fuelLevel?: StringFieldUpdateOperationsInput | string
    hasKeys?: BoolFieldUpdateOperationsInput | boolean
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    photos?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkOrderUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicle?: VehicleUpdateOneRequiredWithoutWorkOrdersNestedInput
    entry?: VehicleEntryUpdateOneRequiredWithoutWorkOrdersNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedWorkOrdersNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWorkOrdersNestedInput
    statuses?: WorkOrderStatusUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: WorkOrderStatusUncheckedUpdateManyWithoutWorkOrderNestedInput
    photos?: WorkOrderPhotoUncheckedUpdateManyWithoutWorkOrderNestedInput
    spareParts?: WorkOrderSparePartUncheckedUpdateManyWithoutWorkOrderNestedInput
    pauses?: WorkPauseUncheckedUpdateManyWithoutWorkOrderNestedInput
  }

  export type WorkOrderUncheckedUpdateManyWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    vehicleId?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    workType?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    estimatedHours?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopScheduleUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkshopScheduleUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkshopScheduleUncheckedUpdateManyWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleCountOutputTypeDefaultArgs instead
     */
    export type VehicleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleEntryCountOutputTypeDefaultArgs instead
     */
    export type VehicleEntryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleEntryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderCountOutputTypeDefaultArgs instead
     */
    export type WorkOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SparePartCountOutputTypeDefaultArgs instead
     */
    export type SparePartCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SparePartCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionCountOutputTypeDefaultArgs instead
     */
    export type RegionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkshopCountOutputTypeDefaultArgs instead
     */
    export type WorkshopCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkshopCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleDefaultArgs instead
     */
    export type VehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleEntryDefaultArgs instead
     */
    export type VehicleEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeyControlDefaultArgs instead
     */
    export type KeyControlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeyControlDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderDefaultArgs instead
     */
    export type WorkOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderStatusDefaultArgs instead
     */
    export type WorkOrderStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderStatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderPhotoDefaultArgs instead
     */
    export type WorkOrderPhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderPhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkPauseDefaultArgs instead
     */
    export type WorkPauseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkPauseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SparePartDefaultArgs instead
     */
    export type SparePartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SparePartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkOrderSparePartDefaultArgs instead
     */
    export type WorkOrderSparePartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkOrderSparePartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SparePartMovementDefaultArgs instead
     */
    export type SparePartMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SparePartMovementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionDefaultArgs instead
     */
    export type RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkshopDefaultArgs instead
     */
    export type WorkshopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkshopDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkshopScheduleDefaultArgs instead
     */
    export type WorkshopScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkshopScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}